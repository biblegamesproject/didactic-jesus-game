//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.35;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.35] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 *
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags and Troop Name Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Name: Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name: Offset X:
 *   Name: Offset Y:
 *   - Offset the enemy name's position by this much.
 *   - For X: Negative goes left. Positive goes right.
 *   - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Always Visible:
 *   - Determines if the enemy name will always be visible.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type Number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type Number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type Number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\"","DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]"}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"1","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameFontSize:num
 * @text Name: Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 *
 * @param NameOffsetX:num
 * @text Name: Offset X
 * @parent Name
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Name: Offset Y
 * @parent Name
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAlwaysVisible:eval
 * @text Name: Always Visible
 * @parent Name
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * @default false
 *
 * @param NameAttachStateIcon:eval
 * @text Name: Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 1
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x310d=['usJmg','CmdTextAlign','Game_BattlerBase_isStateResist','LAumr','EnableDamageCap','lhIfd','Scene_Battle_startPartyCommandSelection','battleCameraData','ActSeq_Mechanics_Collapse','isCharging','wtypeId','subject','getDualWieldTimes','process_VisuMZ_BattleCore_Failsafes','_multipliers','HitRate','setActiveWeaponSet','%1EndBattleJS','AutoMeleeSolo','getCommonEventIdWithName','addEscapeCommand','HeAoe','innerHeight','%1Damage%2JS','commandStyle','BARE\x20HANDS','updatePositionBattleCore','_forcing','Window_BattleStatus_drawItemImage','MotionFrameWait','ActSeq_Movement_WaitForFloat','ylZFH','fuVea','XXAJK','%1Apply%2JS','isCustomBattleScope','TargetLocation','applyDamageCaps','ShowReflect','messageSpeed','HpmYp','PostApplyAsUserJS','displayHpDamage','xncbX','ActSeq_BattleLog_Refresh','height','%1StartTurnJS','hieIU','elOkE','allowRandomSpeed','updateStateSpriteBattleCore','move','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','needsSelection','_updateCursorArea','StatusWindowAttachmentBackOffsetX','createCancelButton','ZgSll','KAmPi','XPActorDefaultHeight','AnchorY','ForceDeath','PrioritySortActive','JrfnX','AttachStateOffsetX','gFVbY','_floatDuration','APBCJ','isActing','repeatTargets','ApplyImmortal','callNextMethod','_back2Sprite','DmdLe','MANUAL','autoBattleWindowRect','setSvBattlerSprite','attackMotions','actorCommandEscape','_immortal','clearDamagePopup','angleDuration','attackAnimationIdSlot','%1StartBattleJS','startPartyCommandSelection','_offsetY','waitForAnimation','VXwpX','USWNU','command301','ZeAjL','Window_BattleLog_displayMiss','MILtk','AutoNotetag','FKBcG','performActionEnd','cancelTargetSelectionVisibility','currentValue','repeats','bTiNq','ALL\x20SKILLS','isNextScene','VBOQo','_backAttachmentSprite','DUHQU','jIeLG','_checkOn','preemptive','ockaw','Game_Interpreter_PluginCommand','xqMQT','getBattlePortraitOffsetX','statusText','updateLink','turn','Scene_Battle_start','getInputButtonString','Window_BattleStatus_initialize','helpWindowRectBorderStyle','_svBattlerData','Scene_Battle_createPartyCommandWindow','isBusy','damageOffsetY','_currentAngle','_jumpHeight','nYmzm','callOkHandler','random','ActSeq_BattleLog_PushBaseLine','addedBuffs','smooth','autoBattleUseSkills','createShadowSprite','updatePosition','pVdSX','UONqG','VisuMZ_2_BattleSystemOTB','Game_Battler_clearDamagePopup','kaywH','finishActorInput','right','alterBreakShield','FollowTurn','gradientFillRect','Game_Battler_performMiss','ActSeq_Animation_CastAnimation','contents','actionEffect','canUseItemCommand','Sprite_Battler_damageOffsetX','_flipScaleX','addChild','some','maxBattleMembers','PostStartTurnJS','PNnCA','startInput','PopupShiftX','_autoBattle','_enemyId','AwSmJ','createMiss','liGqL','swapEnemyIDs','DcaDT','frontviewSpriteY','isOnCurrentMap','softDamageCapRate','kblfX','makeDeepCopy','checkTpbInputClose','version','_growWholeDuration','Damage','setBattleCameraPoint','_battleCoreNoElement','CastAnimation','makeEscapeRatio','drawItemImagePortraitStyle','EHSDb','isForOpponentBattleCore','YNcFd','SlotID','iSYZb','ZiAfD','Width','GoKAn','isEnemy','ArPenRate','canAttackBattleCore','iconHeight','UELkT','motionIdle','ActionSequence','process_VisuMZ_BattleCore_CreateRegExp','partyCommandWindowRectXPStyle','lineRect','noise','Targets','ext','updateForceAction','AyIBf','PSNYY','not\x20focus','findTargetSprite','inBattle','CeVQe','ActSeq_Movement_Jump','_damages','hide','ActionEnd','ActSeq_Projectile_Animation','adjustPosition','item','STR','Scene_Battle_createActorCommandWindow','command236','KjjeA','placeGauge','NewPopupBottom','Scene_Battle_updateBattleProcess','UNhTm','ZFGnS','DisplayAction','JHLvb','removeBuffsAuto','addBattleCoreAutoBattleStyleCommand','mmp','trueRandomTarget','gCGEU','tLLwU','ARRAYJSON','showPortraits','mainSprite','ActSeq_Impact_ColorBreak','displayCurrentState','UyBwf','clearFreezeMotionForWeapons','_frontAttachmentSprite','372597htpRrR','_lineHeight','ArPenFlat','StatusWindowAttachmentBackOffsetY','ParseArmorNotetags','contentsOpacity','Sprite_Battler_setBattler','Debuffs','battleStatusWindowAnimationContainer','activate','ActSeq_Camera_Offset','sVdGd','alive\x20battlers\x20not\x20user','KqUJQ','zeJUv','parseForcedGameTroopSettingsBattleCore','VisuMZ_3_BoostAction','_enemyNameContainer','Game_Action_applyGlobal','bgType','currentClass','removeAnimationFromContainer','PostRegenerateJS','getWtypeIdWithName','command357','dvedw','isGuardWaiting','CounterPlayback','zoomDuration','_enemies','isFloating','SemJp','onSkewEnd','putActiveBattlerOnTop','processPostBattleCommonEvents','VisuMZ_2_DragonbonesUnion','checkShowHideSwitchNotetags','endAnimation','PartyCmd','makeActionOrders','setBattlerFacePoint','createBattleField','iBvNr','vvTnp','refreshActorPortrait','onEncounterBattleCore','isAppeared','usINa','updateBattleProcess','front\x20center','ActSeq_Motion_PerformAction','getAttackWeaponAnimationId','createCommandNameWindow','isFightCommandEnabled','isClicked','isMeleeSingleTargetAction','CmdIconEscape','concat','updateAction','isInputting','Game_Action_needsSelection','_itemWindow','CheckSkillCommandShowSwitches','allowCollapse','Sprite_Enemy_update','performWeaponAnimation','Window_BattleLog_displayCritical','Window_BattleLog_update','CteKV','growBattler','Gpkpb','_item','addDamageSprite','create','KmcEu','waitForFloat','guaJM','itemHit','_baseX','UNTITLED','_logWindow','MeleeDistance','currentExt','bWiRo','applyResultSwitches','TUrYe','ActSeq_BattleLog_WaitForNewLine','removeImmortal','visualHpGauge','statusTextAutoBattleStyle','Post','zUAuF','Turns','substitute','createTargetsJS','OffsetAdjust','setMoveEasingType','isFriendly','isEscapeCommandEnabled','adjustFlippedBattlefield','isDead','Slot','isFrameVisible','setFrame','stateMotionIndex','Spriteset_Battle_update','createAttachmentSprites','_visualHpGauge_JustDied','Scene_Battle_updateStatusWindowPosition','_homeX','VisuMZ_2_BattleSystemFTB','ActSeq_DB_DragonbonesMotionAni','sbDHn','inHomePosition','Rate','onOWm','vWsNr','applyImmortal','applyTargetFilters','HJJqk','ATTACK','options','performCounter','Game_Battler_startTpbTurn','processEscape','resizeWindowBorderStyle','_angleWholeDuration','Wave','mpHealingFmt','itemLineRect','attackSkillId','Sprite_Actor_initMembers','SmoothImage','StatusWindowSelectableBackHide','Mqudp','process_VisuMZ_BattleCore_PluginParams','updateFloat','Game_Map_battleback2Name','_enemyWindow','AddOption','getColor','JwGpG','setHelpWindow','battler','partyCommandWindowRectDefaultStyle','RUvIp','ShowMissEvasion','tulCX','adjustPosition_1for1','Game_System_initialize','wginj','_targetFloatHeight','wait','angle','_subject','Parse_Notetags_TraitObjects','updateBattlebackBitmap2','aMuml','setImmortal','gainBravePoints','UCzCN','Scene_Options_maxCommands','KRPAb','RequiresDefeat','ActSeq_Mechanics_FtbAction','_regionBattleback1','isLearnedSkill','Scene_Map_updateCallMenu','tMNLw','attackAnimationId2','APWfN','ActSeq_Zoom_Scale','Scene_Battle_commandFight','oWVwk','BaseTroopIDs','yLtlt','isRightInputMode','StartTurnWait','createJS','friendsUnit','addSingleSkillCommand','isActor','Settings','ActSeq_Mechanics_BoostPointsChange','HelpAutoBattle','AlphaFilter','ActSeq_Movement_WaitForScale','_windowLayer','canEscape','changeInputWindow','wRoas','EWCOP','displayMpDamage','QphzX','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','ActSeq_Impact_MotionTrailCreate','EscapeSuccess','Targets1','canUse','removeState','aHOmY','dead','format','WaitCount','StepDistanceX','_floatEasing','initMembers','Game_Battler_forceAction','selectNextActor','Filename','width','isAnyoneChangingOpacity','string','zfehv','JZUXg','ActSeq_Horror_TVCreate','log','Scene_Battle_startActorCommandSelection','nYGMX','ActSeq_BattleLog_Clear','drawEnemyName','validTargets','adjustPosition_ScaleToFit','Amp','_commonEventIDs','skillTypes','all\x20targets','AGSfj','isForFriend','ActSeq_Impact_MotionBlurTarget','getNextSubjectFromPool','setVisibleUI','uhnli','ActSeq_Mechanics_WaitForEffect','zlddP','registerDefeatedEnemy','aKxiC','setupWeaponAnimation','_inputting','kmztG','GYplX','blockWidth','ActionAnimation','ElementStatusCore','BIGDn','getBattlePortraitFilename','clearForcedGameTroopSettingsBattleCore','DamageFlat','_indent','Sprite_Actor_setActorHome','BattleManager_makeActionOrders','command283','auto','FgxrW','AttachStateOffsetY','battleMove','prepareCustomActionSequence','mYKNt','ywlZu','QqqIc','isBattlerGrounded','_createCursorArea','ewAmg','VisuMZ_2_BattleSystemATB','updateBattlebackBitmap','Sprite_Enemy_setBattler','CalcEscapeRaiseJS','JS\x20%1REGENERATE','makeHpDamageText','setupBattlebackBattleCore','getMenuImage','Game_Battler_onTurnEnd','battleDisplayText','_padding','DTB','_actorWindow','ActSeq_Horror_Clear','STRUCT','ClearBattleLog','UpxVy','kxrWW','addChildAt','itemEffectAddNormalState','_cursorArea','kVuwX','PopupShiftY','performMiss','BattleManager_startTurn','Scene_Battle_selectPreviousCommand','KcCqO','_mainSprite','zUNlz','_animation','jasVN','Game_Action_makeTargets','OUeEK','Pre','ARRAYNUM','dead\x20enemies','osjRt','resizeWindowXPStyle','SvBattlerMass-%1-%2','isQueueOptionsMenu','_enemyIDs','Ogwxf','apply','ySnex','ActionSkillMsg1','_skillWindow','VisuMZ_3_ActSeqCamera','updateShadowPosition','BPpVG','ObMKp','_waitCount','_enemy','MAT','ActSeq_Angle_WaitForAngle','setBattleCameraTargets','SxNuw','damageFlat','icVBe','AutoBattle','ParseClassNotetags','_regionBattleback2','applyHardDamageCap','VTYDU','_actorCommandWindow','EnableSoftCap','_dimmerSprite','JfUdi','QvFzs','QZTDf','SideviewSelect','autoMeleeMultiTargetActionSet','applyGlobalCommonEventNotetags','CoreEngine','createEnemyNames','applyGlobal','unshift','OfuPa','isHidden','displayAction','maxLines','oxPvG','VisuMZ_2_PartySystem','ActSeq_Mechanics_TextPopup','JTLPU','remove','stbGainInstant','targetObjects','TimeScale','performAttackSlot','getDamageStyle','createAllWindows','drawLineText','emerge','pow','isPartyTpbInputtable','PopupPosition','SwitchCritical','DistanceY','border','battleUIOffsetX','battleGrow','toaiz','_effectsContainer','hardDamageCap','isDisplayEmergedEnemies','dimColor2','match','cameraDuration','makeData','updateEventMain','targetActionSet','_scene','battlerSmoothImage','JS\x20%1APPLY\x20%2','clamp','EmergeText','bhvnm','_battleCoreBattleResumeAfter','JS\x20%1DAMAGE\x20%2','isSceneBattle','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','isAnyoneFloating','maxCommands','AVHvx','isAnyoneSkewing','drawItemStatusXPStyle','_offsetX','Game_Action_executeDamage','HNfaD','_borderPortraitDuration','1:1','wholeActionSet','lURJj','makeTargetsBattleCore','popBaseLine','COMBATLOG','PIzxD','adjustPosition_ScaleDown','displaySubstitute','cXHCj','ActSeq_BattleLog_UI','critical','updateStateSprite','EsAuM','JgsTI','%1RegenerateJS','replace','displayBuffs','_allTargets','trim','Window_BattleLog_displayCurrentState','ActionEndUpdate','initElementStatusCore','updateAttachmentSprites','_targetOpacity','attack','isPartyCommandWindowDisabled','left','PreDamageAsUserJS','Game_Battler_makeSpeed','svBattlerAnchorY','setupFont','setupDamagePopup','updateBossCollapse','rbJVd','CriticalColor','rylar','isBattleFlipped','skills','mainSpriteHeight','updateRefresh','StatusWindowAttachmentFrontOffsetX','displayReflectionPlayBack','isBattleSys','getAttackMotionSlot','LastSelected','VisuMZ_0_CoreEngine','ActSeq_Impact_ShockwavePoint','getHardDamageCap','chantStyle','showHelpWindow','commandStyleCheck','skillId','onRegeneratePlayStateAnimation','dead\x20friends','_battlePortrait','ACiKN','Enemy','gCHrR','canAttack','isSkillItemWindowsMiddle','ckRgH','%1EndTurnJS','commandOptions','PreRegenerateJS','Sprite_Enemy_updateBossCollapse','svBattlerName','isMVAnimation','requestAnimation','max','Scene_Battle_helpWindowRect','addCustomCommands','PostStartActionJS','exit','getStypeIdWithName','die','jumpBattler','YEfCy','createStateIconSprite','isSideView','isBattleTest','autoBattleStyle','BattleLayout','WjIQS','ActSeq_Angle_Reset','collapseType','DhAmd','isAffectedByBreakShield','destroy','MotionType','AyYwE','isAutoBattleCommandEnabled','actionBattleCoreJS','NPGeT','GRQZm','SYUOg','Baibo','cAKGz','scale','guard','updateShadowVisibility','VariableHeal','addDebuff','charging','refreshBattlerMotions','ReflectPlayback','VWrKF','maxItems','performMoveToPoint','custom','Scene_Battle_createHelpWindow','_additionalSprites','eHnfT','Sprite_StateIcon_updateFrame','cPqFD','drawItemBackground','_armorPenetration','SvMotionIdleSolo-%1-%2','BattleManager_onEscapeSuccess','setupActionSet','rFyOF','KutKd','autoSelectPriority','nnXIU','ActSeq_Animation_ActionAnimation','eRdCL','Sprite_Enemy_updateCollapse','BattleManager_endBattle','callUpdateHelp','PostDamageJS','drawItemStatusListStyle','playEnemyDamage','KkMsV','processAnimationRequests','_battleCoreBattleStartEvent','removeBuff','FrontViewSelect','alive\x20opponents','Window_BattleLog_refresh','applyVariance','arRedRate','_jumpMaxHeight','Game_BattlerBase_initMembers','_emptyBitmap','BattleLogRectJS','ActSeq_Mechanics_SwapWeapon','compatibilityVisible','Window_BattleLog_popupDamage','ShowAddedBuff','addAutoBattleCommand','Game_Action_isForOpponent','speed','createUIContainer','gFiCN','Defeat','SkillItemStandardCols','mDQxA','BattleCore','KrvJh','jXUhk','Jcjpn','autoBattleStart','damageContainer','yGPUF','GsbFR','initVisibility','isAtbChargingState','EzbQC','clearHorrorEffects','nAjbF','_helpWindow','PPqwZ','extraPositionY','ActSeq_ChangeSkew','PortraitScaleBorderStyle','isChanting','Exploited','setBattleZoom','eraseState','onActorCancel','_cache','startBattle','setHome','isTurnBased','STmss','pattern','regenerateAllBattleCore','nextActiveWeaponSlot','DistanceX','xthLp','inputtingAction','BfKCN','UyRPk','kXJoV','Sprite_Actor_updateFrame','onEscapeSuccess','addCommand','IDYda','isNextSceneBattleTransitionable','Sprite_Enemy_createStateIconSprite','makeTargets','ScaleDown','KCkFF','Frame','PerformAction','addLoadListener','changeAtbChargeTime','BattleManager_inputtingAction','EVAL','_createCursorSprite','alive\x20opponents\x20not\x20target','BattleManager_onEncounter','performAction','_canLose','JS\x20%1START\x20BATTLE','UHplj','NqkJR','ShowHpDmg','slice','extraHeight','ActSeq_Movement_WaitForSkew','blt','updateCollapse','processDefeat','createEffectActionSet','ATK','_surprise','ActSeq_DB_DragonbonesTimeScale','PopupOffsetY','alive\x20friends','uYfgm','_appeared','PortraitScale','moveBattlerDistance','ActSeq_Mechanics_OtbOrder','turnCount','yAiRF','QosBJ','cRhDJ','_autoBattleWindow','JS\x20%1END\x20BATTLE','battleLayoutStyle','QYCoP','StatusWindowAttachmentBack','startMotion','ActSeq_BattleLog_AddText','ActSeq_Movement_Spin','enemyNames','parse','repositionEnemiesByResolution','updateWaitMode','105484CErHHS','okTargetSelectionVisibility','_enemySprites','startAttackWeaponAnimation','Game_Actor_setup','CommandWidth','performSubstitute','statusWindowRectBorderStyle','qbOAv','action','playReflection','TpGaugeOffsetY','WaitForAngle','addSingleSkillCommands','undecided','getChildIndex','ActionSkillMsg2','cAVIs','_updateClientArea','LtQWm','StepDuration','mYZzI','DefaultSoftCap','RegExp','Actions','CriticalHitRateJS','battleCorePreBattleCommonEvent','NameAttachStateIcon','JS\x20BATTLE\x20DEFEAT','81110CpzGoO','setBattlerBattleCore','xzfQK','cpTmR','retreat','Mirror','createEnemyNameContainer','show','enemyId','processBorderActor','HelpEscape','SvWeaponMass-%1-%2','CommandAddOptions','_dragonbonesSpriteContainer','lgdJX','checkTpbInputOpen','isSideButtonLayout','ShowPortraitsBorderStyle','ShowCritical','cxeYS','NpTBL','onAllActionsEnd','_cacheTextWidth','push','BattleLog','Game_Party_addActor','_createDamageContainer','_speed','CopyCombatLog','ActSeq_Mechanics_HpMpTp','_growDuration','battleAnimation','ConvertParams','createEmptyBitmap','TpGaugeOffsetX','bDkwz','setSkill','Window_BattleLog_displayTpDamage','updateShadowBattleCore','addBattleCoreAutoBattleStartupCommand','ZocBR','startSpin','CmdIconItem','_baseLineStack','DefeatEvent','_skewWholeDuration','WaitForNewLine','changePaintOpacity','Window_BattleLog_popBaseLine','slices','SkillItemMiddleLayout','COMBAT\x20LOG','WaitForZoom','tWIWB','_attackAnimationId','actions','_angleEasing','filterArea','forceSelect','ujZQj','anchorX','checkShowHideBattleNotetags','visible','zYyvG','pBoPt','kzeSg','TpMUg','zzcen','sortEnemies','processVictory','battleEnd','dying','drawSingleSkillCost','updatePadding','Scene_Battle_onEnemyCancel','gaIIT','MAXMP','addFightCommand','_battler','SsKNE','setBattleAngle','waitForMovement','startWeaponAnimation','clearElementChanges','needsActorInputCancel','gaugeX','fTAJr','setSTBExploited','_forceAction','Game_BattlerBase_die','KljwZ','TexZt','code','ActorCmd','itemEffectAddAttackState','AutoBattleBgType','ActSeq_Horror_GlitchCreate','thrust','moveBattlerToPoint','EnjeQ','svAnchorY','_flashDuration','Sprite_Battler_isMoving','TpbGaugeOffsetY','NameOffsetY','note','bitmapHeight','ActSeq_Mechanics_BoostPointsStoreData','start','getItemDamageAmountTextOriginal','updateAttachedSprites','randomTargets','Window_BattleLog_performEvasion','ActSeq_Impact_ZoomBlurPoint','ShowFacesListStyle','escape','onBattleStart','alive\x20actors\x20not\x20user','evalDamageFormulaBattleCore','ActSeq_Horror_GlitchRemove','updateCommandNameWindow','_targetIndex','EFFECT_COMMON_EVENT','updateHelp','StartTurnMsg','FBWeD','MotionSpeed','isAnyoneSpinning','makeDamageValue','VisuMZ_4_BreakShields','spinBattler','startDamagePopup','_targetSkewX','frameVisible','SkewY','ltrbL','_borderPortraitTargetX','itemHeight','ActSeq_Movement_FaceTarget','_growEasing','ChargeRate','hXPca','removeDamageSprite','HRzQp','actorCommandCancelTPB','hPhME','battleCommandName','boxWidth','Game_Temp_requestAnimation','bZTjm','_preemptive','clearBattlerMotionTrailData','updateMain','_back1Sprite','addShowHpGaugeCommand','_targetSkewY','onMoveEnd','addText','_floatWholeDuration','prototype','rknaH','lglHd','commandFight','sLdAG','dead\x20actors','Game_BattlerBase_canAttack','process_VisuMZ_BattleCore_Action_Notetags','MDF','VisuMZ_2_BattleSystemCTB','attackAnimationId1','aqaEH','YshFZ','shift','drawItemImageXPStyle','applySoftDamageCap','eeceK','waitForNewLine','clearActiveWeaponSet','zxPLF','addAutoBattleCommands','ActionCount','loadWindowskin','Game_Map_battleback1Name','skillItemWindowRectBorderStyle','owvWE','onJumpEnd','sliceMax','basicGaugesY','VisuMZ_2_BattleSystemSTB','isTriggered','actor','ShowMpDmg','autoBattleAtStart','_actions','Sprite_Battler_setHome','LUK','Game_BattlerBase_canGuard','callOptions','IYWhb','motionSpeed','hasBeenDefeatedBefore','updateCustomActionSequence','eWPNj','opponentsUnit','Sprite_Actor_moveToStartPosition','_battlerContainer','SceneManager_isSceneChanging','ActSeq_Motion_ClearFreezeFrame','PreDamageAsTargetJS','AsUser','loadBitmap','afTnD','_phase','sliceMin','Sprite_Weapon_loadBitmap','placeTimeGauge','QgJZo','jloqf','createInnerPortrait','Sprite_Battler_updatePosition','ZHkNu','getSkillTypes','tSfOP','invokeAction','pushBaseLine','resetBreakShield','_battleCoreAddedElements','KaBby','ActSeq_Movement_WaitForJump','isBattleRefreshRequested','Scene_Battle_onActorCancel','checkShowHideSkillNotetags','SvWeaponSolo-%1-%2','criticalDmgRate','iconWidth','AddHpGaugeOption','turnOrderChangeOTB','Game_Interpreter_command283','isBypassDamageCap','EzdtW','process_VisuMZ_BattleCore_TraitObject_Notetags','VNKXt','NameLegacy','criticalDmgFlat','BattleManager_endAction','isItemCommandEnabled','innerWidth','CommandVisible','reduce','kLQup','displayReflection','getNextSubject','Scene_Battle_startEnemySelection','DeGOo','skewDuration','LAzPO','refreshDimmerBitmap','stop','mohGC','XnPQp','alive\x20actors','Scene_Battle_skillWindowRect','Reveal','CriticalDmgFlat','regionId','zcthJ','WaitForScale','svBattlerAnchorX','damage','Game_Battler_performDamage','_methods','\x5cI[%1]%2','_skewEasing','isAnyoneJumping','faceWidth','missile','QoL','performCollapse','PreApplyAsUserJS','PostEndActionJS','Scene_Battle_itemWindowRect','ActSeq_Element_Clear','rxJXI','HitFlat','xDRFo','waitForEffect','textWidth','cameraClamp','displayTpDamage','DlzGl','drawSkillCost','Height','_targets','_statusWindow','initBattlePortrait','executeDamage','requestMotionRefresh','onEnemyOk','floatBattler','endBattle','actor%1-portrait','updateBorderSprite','_tpbSceneChangeCacheActor','addedStateObjects','drawItem','MejXN','processRandomizedData','ActSeq_Element_ForceElements','_jumpDuration','cuHcF','FlinchDistanceY','VisuMZ_2_HorrorEffects','hpDamage','isMagicSkill','Name','addImmortal','iconText','setupCriticalEffect','kOkMV','calcWindowHeight','applyFreezeMotionFrames','applyBattleCoreJS','revertTpbCachedActor','isForOne','BattleStartEvent','Hiesw','jUvBb','_battleCoreForcedElements','hue','isDuringNonLoopingMotion','getItemDamageAmountTextBattleCore','_wtypeIDs','addSkillCommands','ActSeq_Mechanics_Multipliers','_forcedBattlers','setBattleSkew','ActSeq_Movement_MoveBy','drawText','YsEwu','_motionCount','iakTw','toUpperCase','isHiddenSkill','autoSelectLastSelected','parent','chant','animationId','JS\x20%1END\x20ACTION','NameFontSize','includes','Sprite_Actor_setBattler','applyItem','isAlive','_skewY','PostApply%1JS','isMagical','_updateFilterArea','lnWWm','rdvOQ','setBattlePortrait','isVisualHpGaugeDisplayed','_animationSprites','checkCacheKey','loadSvActor','PreEndActionJS','SwtUr','ParseItemNotetags','battleFloat','ActSeq_Motion_FreezeMotionFrame','ActionStart','ScaleX','_battleField','FSDqr','_stateSprite','createStateSprite','FAnxh','CombatLogIcon','MIN_SAFE_INTEGER','iterateBattler','isCertainHit','canGuardBattleCore','JS\x20ESCAPE\x20FAILURE','isTickBased','updateFrame','isImmortal','abs','DamageRate','getSkillIdWithName','BattleManager_initMembers','eJipS','isBattlerFlipped','VpRnB','updateCallMenu','battleback1Name','startSkew','1fMZrpJ','mPXSD','clearBattleCoreData','addWeaponSwapCommand','isBreakStunned','createAnimationContainer','createWeather','mowCs','makeTargetSelectionMoreVisible','_effectDuration','battleSys','stepForward','setupMotionBlurImpactFilter','vNNyF','itemWindowRect','bYHHn','Sprite_Battleback_adjustPosition','GuardFormulaJS','_lastEnemy','resetFontSettings','Shadow','opacityStart','Game_BattlerBase_eraseState','getAttackMotion','_flinched','_text','round','collapse','Game_Interpreter_updateWaitMode','XDPDd','canGuard','filter','OffsetY','updateStateIconSprite','taVDX','ActSeq_Mechanics_ArmorPenetration','YxzQp','SvBattlerSolo-%1-%2','performDamage','wxuBv','BTUFv','SvMotionIdleMass-%1-%2','members','arRedFlat','_skewDuration','adjustPosition_ScaleUp','lineHeight','PopupOffsetX','ActSeq_Mechanics_BtbGain','Dffng','commandNameWindowDrawBackground','partyCommandWindowRect','loadBattleback1','JFKDW','cNAbJ','statusWindowRectDefaultStyle','battlerSprites','AllowCollapse','setupZoomBlurImpactFilter','isOkEnabled','_targetGrowX','ActSeq_Set_WholeActionSet','Rpmrb','PreEndTurnJS','GUARD','HdHuZ','ScaleToFit','RepositionEnemies','createString','HskjF','VisuMZ_3_SideviewBattleUI','length','ARRAYFUNC','splice','swing','shadow','setupBattleback','MUbLG','ActSeq_Mechanics_AddBuffDebuff','moveToStartPosition','117255haOyDm','performFlinch','oRYqJ','split','updateCancel','Sprite_Enemy_initVisibility','<CENTER>%1','default','AGI','softDamageCap','isAnimationShownOnBattlePortrait','IconSet','timeScale','pMezf','walk','PreStartActionJS','ltFNB','setupShockwaveImpactFilter','yaPAB','actorCommandSingleSkill','JSON','clearRect','ActSeq_Mechanics_AtbGauge','createDigits','displayEvasion','isPreviousSceneBattleTransitionable','_endBattle','drawItemStyleIconText','isAttack','_animationCount','ChtZo','addCombatLogCommand','byTeW','BattleManager_onEscapeFailure','alive\x20actors\x20not\x20target','okButtonText','command119','setHorrorEffectSettings','Setting','HomePosJS','addSkillTypeCommand','placeStateIcon','Koudr','CmdIconOptions','%1EndActionJS','isSpinning','_animationContainer','isAlwaysVisible','Spriteset_Battle_updateActors','Skill-%1-%2','uiMenuStyle','BattleManager_updatePhase','ParseActorNotetags','Game_Action_isForFriend','DigitGrouping','linkSprite','MpGaugeOffsetX','qgIQe','AOImN','HLDgJ','Scene_Battle_logWindowRect','BattleManager_isTpbMainPhase','Scene_Battle_createAllWindows','WoGwG','process_VisuMZ_BattleCore_DamageStyles','isTpbMainPhase','STYPES','ActSeq_Motion_WaitMotionFrame','alive\x20friends\x20not\x20user','_createClientArea','SJBvg','VHiCl','applyData','ibHgf','_defeatedEnemies','battleCommandIcon','PreStartTurnJS','isDying','changeCtbCastTime','bind','KeSGg','_weaponSprite','join','setupHpGaugeSprite','isSkipPartyCommandWindow','Window_BattleLog_pushBaseLine','DiPyY','Game_Action_apply','forceMotion','terminate','sideview_ui','flashColor','ReflectAnimation','drawIcon','EscapeSuccessJS','VisuMZ_4_CombatLog','XlIxN','PostDamageAsTargetJS','PMvij','_skewX','_tempEquipCheck','fontSize','getLastPluginCommandInterpreter','BravePoints','updateBorderStyle','alive\x20friends\x20not\x20target','wIYoo','ParseEnemyNotetags','process_VisuMZ_BattleCore_PreBattleCommonEvent','updateActors','evade','VisuMZ_1_ElementStatusCore','visibilityState','Game_Battler_performEvasion','Direction','ceil','_handlers','cancelButtonText','zMXLB','_opacityEasing','BqPmV','moveToStartPositionBattleCore','startGrow','VTxwn','Spriteset_Battle_createBattleField','_cancelButton','aZOCj','_spriteset','onGrowEnd','addActor','_cursorSprite','ActSeq_Impact_ShockwaveEachTargets','StateIconOffsetY','removeStatesAuto','_forcedBattleLayout','isCancelled','updateShadow','jXjTD','loadBattleback2','_activeWeaponSlot','HrQiG','CmdTextAutoBattle','Game_Battler_regenerateAll','ActSeq_Motion_RefreshMotion','EIGEa','loadSystem','ActSeq_Movement_WaitForSpin','pNCbb','isAnimationPlaying','wDAYX','BlNeQ','Parse_Notetags_Targets','commandSymbol','_commandNameWindow','isStateResist','_duration','idTQA','mainSpriteWidth','setupIconTextPopup','Window_ActorCommand_setup','sleep','Xyrbx','UvrWm','isCommandEnabled','SkPRu','endAction','animation','isAnyoneGrowing','createDistortionSprite','weapons','textSizeEx','createActors','cancelActorInput','prev\x20target','text','Index','formula','LdHWd','VPdkV','BattleEndEvent','displayCritical','playCancel','map','WaitCount2','JumpToLabel','makeActionListAutoAttack','isAtbCastingState','Sprite_Battler_updateMain','_freezeMotionData','getBattlePortraitOffsetY','HelpOptions','BattleVictoryJS','lHYBG','setLastPluginCommandInterpreter','GuPDb','battleSkew','updateOpacity','ActSeq_Mechanics_AddState','IconStypeNorm','extraPositionX','createDamageSprite','refresh','_interpreter','_currentActor','_escapeRatio','ARRAYEVAL','charged','regenerateAll','ZraUA','update','ShowTpDmg','isAnyProjectilePresent','Sprite_Battler_damageOffsetY','currentAction','#ffffff','_iconIndex','weatherType','isAutoBattle','ShowSubstitute','_tempActor','ActSeq_Movement_WaitForOpacity','createBattleUIOffsetX','performSTBExploiter','weaponImageId','reserveCommonEvent','ActSeq_Movement_HomeReset','XPSpriteYLocation','updateFlip','guardSkillId','deathStateId','BreakShields','_weaponImageId','MotionAni','clearFreezeMotion','KWfGp','isEffecting','_actorSprites','fQVfs','singleSkill','dofzH','isForRandomBattleCore','message1','isAnyoneMoving','SkillsStatesCore','_stateIconSprite','flashDuration','repositionCancelButtonBorderStyle','skewBattler','Buffs','iconIndex','boxHeight','NameOffsetX','deadMembers','_battleLayoutStyle','useItem','BattleManager_startBattle','createSeparateDamagePopups','EaPhE','ActSeq_Animation_AttackAnimation2','2mYTQri','itemRect','PARTY','_flashColor','ActSeq_Mechanics_DeathBreak','ChantStyle','_pattern','commandNameWindowDrawText','gQOCB','LsMdQ','autoMeleeSingleTargetActionSet','anchor','ljSDW','_targetGrowY','ruGja','addTextToCombatLog','setActiveWeaponSlot','battlerShadowScale','displayChangedBuffs','mhp','FXngO','rJoyl','_preBattleCommonEvent','DefaultSoftScaler','_borderPortraitSprite','gainHp','ActSeq_Movement_Opacity','performEvasion','forceAction','NchGe','getBattlePortrait','Game_Interpreter_command301','isOpen','isSpriteVisible','wStqH','invokeMagicReflection','PlakH','hbaem','XrMhM','createActionSequenceProjectile','canBattlerMove','startMove','Window_BattleEnemy_initialize','traitSet','canAddSkillCommand','startJump','YrGeS','loadEnemy','open','close','Scene_Battle_createCancelButton','Window_BattleLog_clear','UGiHz','attachSpritesToDistortionSprite','updateHpGaugePosition','BNpbh','Game_Action_itemEffectAddNormalState','Game_Action_itemHit','startActorCommandSelection','NpCbN','changeWeather','ActSeq_Mechanics_RemoveState','changeAtbCastTime','_active','Window_BattleEnemy_show','gZXXd','WaitForOpacity','PostStartBattleJS','_hpGaugeSprite','DdXpM','isForRandom','needsSelectionBattleCore','_opacityDuration','startActorSelection','BDeoO','_motionType','osdCh','fxUnJ','BattleManager_processDefeat','ozRhl','suyvs','playEnemyAttack','drawItemStatus','dCeNc','name','ActSeq_Target_PrevTarget','aBBMJ','VisuMZ_3_ActSeqImpact','battleMembers','statusWindowRect','setup','DEF','svShadow','effect','startAction','QVvXo','CmdIconFight','Sprite_Actor_update','_stypeIDs','selectNextCommand','States','applyForcedGameTroopSettingsBattleCore','AnchorX','ActSeq_Movement_Float','floor','ScaleY','casting','ShowPortraits','+%1\x20MP','setupTextPopup','WaitForProjectile','TpbGaugeOffsetX','createPartyCommandWindow','sdKdc','isUndecided','StatusWindowSkinFilename','KkwYw','hitRate','mpDamageFmt','createLowerLayer','setValue','BoostPoints','isPhysical','QYHVB','rtHdV','SkillItemBorderCols','MotionIdle','ActSeq_Mechanics_StbExploit','OinLw','isMeleeMultiTargetAction','Game_Troop_setup','nXcxg','CriticalDmgRate','list','ShowPopup','stepFlinch','refreshMotion','createAttachedSprites','MaxLines','rQvLX','Sprite_Actor_updateShadow','IcVPJ','optDisplayTp','indexOf','_uiContainer','WaitForAnimation','setAttack','waitCount','Strength','AnimationID','OffsetX','StatusWindowSkinHide','Window_BattleLog_performSubstitute','_skillIDs','setHelpWindowItem','CmdStyle','setText','removeActor','lxpko','HpGauge','wlaGX','mpDamage','evalDamageFormula','hasSvBattler','process_VisuMZ_BattleCore_BaseTroops','weatherPower','_homeY','createKeyJS','isFlipped','evQIT','enemy','OIEKX','CreateActionSequenceTargets','ShowCosts','applyGuard','Jfnvj','Parse_Notetags_Action','isActionSelectionValid','ActSeq_Camera_Clamp','startFloat','lgraF','drawItemImage','showAnimation','startEnemySelection','CalcEscapeRatioJS','GwQme','evaded','VisuMZ_1_MainMenuCore','Text','MAXHP','ZdPOv','current\x20target','Scene_Battle_startActorSelection','Zvifx','TPB','_partyCommandWindow','type','createChildSprite','WaitForMovement','svAnchorX','isActiveTpb','IhMVr','snapForBackground','user','drawItemImageListStyle','Radius','bitmapWidth','Wysrj','isTpb','loadSvEnemy','aYnYx','AUTO\x20BATTLE','_linkedSprite','children','AttackAnimation','XpDwa','min','dead\x20battlers','mainSpriteScaleX','shouldPopupDamage','TextColor','OverallFormulaJS','message4','actorCommandAutoBattle','eXkew','hSFUJ','EscapeFail','pJEMs','float','windowPadding','isItem','LDRzj','svBattlerData','getItemDamageAmountLabelOriginal','ConfigManager_makeData','helpAreaBottom','BattleManager_startInput','battleSpin','ARRAYSTRUCT','startOpacity','Mechanics','selectPreviousCommand','DefaultDamageStyle','ShowWeapon','setupBattleCore','Hjcim','updateBitmap','Game_Enemy_setup','PreStartBattleJS','revealNewWeaknesses','clone','requestRefresh','autoBattle','SkewX','NCYMJ','Window_BattleLog_performActionEnd','VariableDmg','_battlerName','damageRate','_createEffectsContainer','_waitMode','ARRAYSTR','HpGaugeOffsetY','Targets2','processRefresh','ParseAllNotetags','ForceExploited','_jumpWholeDuration','ActSeq_Zoom_Reset','skill','isShownOnBattlePortrait','bYMaq','aGwRE','startTpbTurn','setBackgroundType','ActSeq_Weapon_SetActiveWeapon','RXNHw','createAutoBattleWindow','MOTIONS','isBorderStylePortraitShown','actorCommandWindowRect','actionSplicePoint','PopupDuration','counterAttack','_actor','removedStateObjects','YyeOI','BAuQA','ActSeq_Target_NextTarget','Exploiter','isNonSubmenuCancel','value','StateIconOffsetX','YVsQJ','updateStyleOpacity','gainTp','updateScale','skillItemWindowRectMiddle','ActSeq_Mechanics_RemoveBuffDebuff','refreshCursor','damageOffsetX','BattleManager_selectNextCommand','gaugeLineHeight','_damageContainer','onSelectAction','eTBLs','spell','rYcTr','IvSYB','AutoBattleRect','vabhj','recoverAll','ZaLXB','onBattleStartBattleCore','Angle','scope','CalcActionSpeedJS','CurrentTurn','Intensity','isFastForward','updatePhase','updateSpin','displayStartMessages','isOpponent','dbQFz','Scene_Map_initialize','performMoveToTargets','createCommandVisibleJS','setHandler','338307MXOTbn','StepDistanceY','CommandAddAutoBattle','ActSeq_Zoom_WaitForZoom','redraw','Window_PartyCommand_initialize','RKQmn','skew','mainSpriteScaleY','_colorType','param','isDTB','performReflection','sQPhh','numTargets','Window_BattleLog_performRecovery','ShowCounter','ckfLP','OEERC','StyleOFF','alive\x20enemies','finalizeScale','performMagicEvasion','updateShadowScale','canMove','textColor','drawActorFace','displayFailure','AutoBattleCancel','FocusX','addItemCommand','Window_BattleLog_performAction','CriticalHitRate','SADkw','yXXVX','WjQvB','isJumping','nameY','Scene_Battle_stop','spriteId','helpWindowRect','addGuardCommand','KPKlU','PreDamageJS','hpAffected','createMainSprite','NoALK','updateStatusWindowPosition','Window_BattleLog_performMiss','Game_BattlerBase_addNewState','registerCommand','isForAll','cJzvR','DamageStyleList','isForOpponent','Sprite_Enemy_updateStateSprite','getDefeatedEnemies','WaitForSkew','KuXqB','ActiveTpbOptionsMessage','ShowHide','DisablePartyCmd','hpDamageFmt','displayMiss','ActSeq_Mechanics_BreakShieldReset','battleCommands','addOptionsCommand','_tpbState','applyArmorModifiers','gXfaU','LXEon','performAttack','VisuMZ_2_WeaponSwapSystem','fRNxn','BvCAT','StartTurnShow','lCHtm','JDtMp','110185bkBfEB','Duration','drawItemStyleIcon','Scene_Map_launchBattle','_angleRevertOnFinish','sort','makeBattleCommand','EasingType','jump','removeHorrorEffect','battleSpriteSkew','return\x200','checkAutoCustomActionSequenceNotetagEffect','effects','BTestBypass','ConvertActionSequenceTarget','TP_Flat','_targetAngle','_damagePopupArray','Window_SkillList_maxCols','battleProjectiles','BattleManager_startAction','HpGaugeOffsetX','PrioritySortActors','origin','DamageType%1','call','WaitForJump','skillWindowRect','yNakG','_lastPluginCommandInterpreter','onActorOk','getConfigValue','BattleDefeatJS','setWaitMode','isCustomActionSequence','mCkVP','_shadowScale','constructor','Game_Action_isForRandom','BattleManager_cancelActorInput','recRf','DualWield','UfnEs','usePremadeActionSequence','Window_BattleLog_displayFailure','setBattler','Bnnpa','bossCollapse','criticalHitFlat','hitFlat','Spriteset_Battle_createLowerLayer','_executedValue','_distortionSprite','Shadow2','aKJxL','_growY','YGUZQ','changeBattlebacks','performJump','GTFgJ','index','missed','StatusWindowAttachmentFront','StartName','windowAreaHeight','changeBattlerOpacity','_requestRefresh','pages','tgXHx','WaitForEffect','addBuff','_tpbNeedsPartyCommand','measureTextWidth','Sprite_Battler_update','icon','Window_BattleLog_displayMpDamage','Skills','initialize','getNextDamagePopup','addGeneralOptions','Game_Actor_makeActionList','createPartyCommandWindowBattleCore','onDisabledPartyCommandSelection','VisuMZ_3_WeaknessDisplay','YhkYf','selectNextCommandTpb','Victory','CXCeP','_angleDuration','obcLz','status','filters','JS\x20%1START\x20ACTION','VarianceFormulaJS','Window_BattleLog_performCounter','ActSeq_Movement_Skew','equipSlots','isGrowing','PreApply%1JS','PRE-','Sprite_Enemy_setHue','Game_Battler_performActionStart','CriticalHitFlat','updateEffectContainers','clearResult','uiInputPosition','IVcJO','USKzD','DistanceAdjust','yEZRC','Game_BattlerBase_refresh','message2','AdjustRect','refreshStatusWindow','finishActionSet','battleCoreResumeLaunchBattle','yXrVY','physical','rowSpacing','451168aouJfc','nHMBP','RVJTA','IxGct','updateInterpreter','Game_Action_clear','command3011','HLlTx','zqdgd','ActionCenteredName','mhOZm','SwitchMissEvade','abnormal','Window_BattleLog_performMagicEvasion','placeActorName','commandNameWindowCenter','HelpFight','aliveMembers','HP_Rate','notFocusValid','PostDamageAsUserJS','Scene_Map_initializeAfter','ConfigManager_applyData','createDamageContainer','IFoKp','NuFxJ','_list','isPreviousScene','_actionBattlers','battlelog','preparePartyRefresh','createActorCommandWindow','ActSeq_Mechanics_CtbOrder','battleJump','ajTRL','Game_Party_removeActor','Destination','BattleManager_processVictory','Interrupt','setupMotion','ITEM','PostEndTurnJS','isPlaytest','partyCommandWindowRectBorderStyle','Window_ActorCommand_initialize','createActorCommandWindowBattleCore','freezeFrame','ZnlqP','traitObjects','Game_Action_evalDamageFormula','JyIIl','initMembersBattleCore','Dafns','_action','updateSkew','adjustWeaponSpriteOffset','SaaEK','performActionMotions','Game_Map_setupBattleback','process_VisuMZ_BattleCore_Notetags','ActionItemMsg','occasion','#%1','launchBattle','makeAutoBattleActions','addedDebuffs','battleback2Name','LfkIZ','parameters','Game_Enemy_transform','createBattleUIOffsetY','LcvYz','mZekT','statusWindowRectXPStyle','bUDYf','ParseSkillNotetags','Scene_Battle_selectNextCommand','applyEasing','GpbKN','duration','ActSeq_Mechanics_VariablePopup','isSkill','Scene_Battle_onActorOk','_tempBattler','battleAngle','requestMotion','isTeamBased','Linear','isSceneChanging','updateVisibility','result','makeSpeed','ActSeq_Camera_FocusTarget','battleOpacity','createBattleFieldContainer','WeaponTypeID','logWindowRect','createHelpWindow','Sprite_Enemy_loadBitmap','fillRect','_isBattlerFlipped','changeCtbChargeTime','waitForJump','ZIvgG','glitch','fvrGw','ActSeq_Projectile_Icon','_growX','isWaiting','ArRedRate','LnytP','addAttackCommand','_motionSpeed','GjvcS','cmLxz','magicReflection','VisuMZ_1_SkillsStatesCore','getTraitSetKeys','alive\x20battlers','Scene_Battle_terminate','WOHKr','isDeathStateAffected','drawTextEx','Window_ItemList_maxCols','battleCamera','command301_PreBattleEvent','ParseWeaponNotetags','portrait','PWnkJ','backColor','isSkewing','opacity','Scale','pJtwj','getSimilarSTypes','setCustomDamageFormula','_opacityWholeDuration','battleEffect','onOpacityEnd','onEscapeFailure','ActSeq_Animation_ChangeBattlePortrait','Elements','ActSeq_Mechanics_StbRemoveExcessActions','Window_BattleLog_performDamage','CmdIconAutoBattle','VhuHg','QDosp','ActSeq_Motion_MotionType','Sprite_Battler_startMove','fDsun','updateBattlerContainer','JlAWg','createContents','ActSeq_Camera_WaitForCamera','ActSeq_Mechanics_CustomDmgFormula','_lines','_totalValue','isGuard','WuOBw','PvenX','GtNNP','bitmap','AutoBattleOK','_callSceneOptions','freezeMotion','delay','ActSeq_BattleLog_WaitForBattleLog','PYyxT','sortDamageSprites','processForcedAction','randomInt','AutoMeleeAoE','active','CriticalDuration','FocusY','Game_Interpreter_terminate','addNewState','updateJump','fdEOB','fight','ToZUF','EscapeFailureJS','xejEl','onEnemyCancel','helCU','ZrKxi','isAutoBattleCommandAdded','ActSeq_Element_AddElements','ActionEffect','center','isOptionsCommandEnabled','ygZzC','StatusWindowAttachmentFrontOffsetY','battleUIOffsetY','aHWpo','ActSeq_Movement_MoveToPoint','autoSelect','onAngleEnd','_motion','PreEndBattleJS','alive\x20enemies\x20not\x20user','performActionStart','_customDamageFormula','eTCHf','updateAngleCalculations','setBattleCameraOffset','mainFontSize','useDigitGrouping','_actionInputIndex','currentSymbol','forceEscapeSprite','popupDamage','ShowEnemyGauge','displayItemMessage','drawGauge','isDamagePopupRequested','Window_BattleLog_performCollapse','PostEndBattleJS','animationWait','onTurnEnd','FGUvX','ActSeq_Animation_WaitForAnimation','clearMotion','itemTextAlign','KhjUi','criticalHitRate','setBattlerFlip','anchorY','updateTargetPosition','removeChild','WaitForCamera','Sprite_Actor_updateBitmap','surprise','updateBattlebackBitmap1','SkipPartyCmd','zkrpo','TGbhF','_effectType','ShowAddedState','setEventCallback','jWlWf','kndXq','Scene_Boot_onDatabaseLoaded','allBattleMembers','compareEnemySprite','ActSeq_Weapon_ClearActiveWeapon','MrlAV','clear','iYLca','qWOOF','ShowRemovedState','Window_BattleLog_performReflection','BJWuG','Weapon-%1-%2','Yvubw','forceWeaponAnimation','SuICg','VTvIC','reverse','ZCKGF','setHue','startTurn','process_VisuMZ_BattleCore_jsFunctions','processBattleCoreJS','JS\x20%1END\x20TURN','setCursorRect','onEncounter','MRcFD','_svBattlerSprite','VisuMZ_3_ActSeqProjectiles','CheckMapBattleEventValid','initBattleCore','hpHealingFmt','toLowerCase','ShowActorGauge','isConfused','_floatHeight','clearActiveWeaponSlot','QLSnw','fUDjK','front\x20base','_shadowSprite','_updateCursorFilterArea','animationNextDelay','DamageStyles','onDatabaseLoaded','BjplG','cancel','makeCommandList','FlashDuration','rEhZS','ShowRemovedBuff','requestDragonbonesAnimation','stepBack','ActSeq_Impact_ShockwaveCenterTargets','-%1\x20MP','Game_Battler_onBattleStart','dimColor1','setupBattleCoreData','_enemyID','fTzdx','createHpGaugeSprite','equips','addChildToBack','battleCoreTpbMainPhase','SyTML','Point','Window_BattleLog_performActionStart','iYgEc','Sprite_Battler_initMembers','maxCols','Window_Options_statusText','isMoving','gGufq','bottom','FlashColor','MkJaf','performRecovery','movement','ActSeq_Mechanics_BreakShieldChange','updateWeather','animationBaseDelay','isBattleCoreTargetScope','command339','refreshRequest','svBattlerShadowVisible','displayRemovedStates','Opacity','JNqrg','loadPicture','missle','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','SbyfQ','actorId','_target','displayAddedStates','customDamageFormula','ActSeq_Target_CurrentIndex','performCastAnimation','pop','WaitCount1','commandAutoBattle','updateGrow','_baseY','_weather','createBorderStylePortraitSprite','weaponTypes','Window_Options_addGeneralOptions','ActSeq_Horror_NoiseRemove','isOptionsCommandAdded','nUvjW','commandName','DmSLv','loop','hXIPF','battleZoom','displayCounter','ActSeq_Mechanics_Immortal','Formula','addState','Actor','padding','MUOtM','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','MessageWait','resetResultSwitches','Scene_ItemBase_applyItem'];const _0xe55837=_0x5688;(function(_0x350d83,_0x489b94){const _0x2e8e9e=_0x5688;while(!![]){try{const _0x58462f=parseInt(_0x2e8e9e(0x47e))*-parseInt(_0x2e8e9e(0x71a))+parseInt(_0x2e8e9e(0xa3e))+-parseInt(_0x2e8e9e(0x768))+parseInt(_0x2e8e9e(0x4ce))+-parseInt(_0x2e8e9e(0x2f3))+parseInt(_0x2e8e9e(0x5d1))*-parseInt(_0x2e8e9e(0x2d6))+parseInt(_0x2e8e9e(0x7e0));if(_0x58462f===_0x489b94)break;else _0x350d83['push'](_0x350d83['shift']());}catch(_0x54aeef){_0x350d83['push'](_0x350d83['shift']());}}}(_0x310d,0x30f02));var label=_0xe55837(0x278),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x16694e){const _0x4cf469=_0xe55837;return _0x16694e[_0x4cf469(0x7c3)]&&_0x16694e['description'][_0x4cf469(0x450)]('['+label+']');})[0x0];VisuMZ[label]['Settings']=VisuMZ[label][_0xe55837(0x108)]||{},VisuMZ[_0xe55837(0x313)]=function(_0x2f76ed,_0x1e382d){const _0xed4cdf=_0xe55837;for(const _0x46e4d7 in _0x1e382d){if(_0x46e4d7['match'](/(.*):(.*)/i)){if('QdQGV'!=='QdQGV'){function _0x150073(){const _0x2b272a=_0x5688;_0x2a8ad8=this[_0x2b272a(0x1de)]();}}else{const _0x45f6b7=String(RegExp['$1']),_0x1e0466=String(RegExp['$2'])[_0xed4cdf(0x448)]()[_0xed4cdf(0x1ee)]();let _0x290280,_0x599b1a,_0x1d977e;switch(_0x1e0466){case'NUM':_0x290280=_0x1e382d[_0x46e4d7]!==''?Number(_0x1e382d[_0x46e4d7]):0x0;break;case _0xed4cdf(0x17b):_0x599b1a=_0x1e382d[_0x46e4d7]!==''?JSON['parse'](_0x1e382d[_0x46e4d7]):[],_0x290280=_0x599b1a[_0xed4cdf(0x584)](_0x20614a=>Number(_0x20614a));break;case _0xed4cdf(0x2ab):_0x290280=_0x1e382d[_0x46e4d7]!==''?eval(_0x1e382d[_0x46e4d7]):null;break;case _0xed4cdf(0x59b):_0x599b1a=_0x1e382d[_0x46e4d7]!==''?JSON[_0xed4cdf(0x2d3)](_0x1e382d[_0x46e4d7]):[],_0x290280=_0x599b1a[_0xed4cdf(0x584)](_0x194ef2=>eval(_0x194ef2));break;case _0xed4cdf(0x4e2):_0x290280=_0x1e382d[_0x46e4d7]!==''?JSON[_0xed4cdf(0x2d3)](_0x1e382d[_0x46e4d7]):'';break;case _0xed4cdf(0xa36):_0x599b1a=_0x1e382d[_0x46e4d7]!==''?JSON[_0xed4cdf(0x2d3)](_0x1e382d[_0x46e4d7]):[],_0x290280=_0x599b1a[_0xed4cdf(0x584)](_0x5ae106=>JSON[_0xed4cdf(0x2d3)](_0x5ae106));break;case'FUNC':_0x290280=_0x1e382d[_0x46e4d7]!==''?new Function(JSON[_0xed4cdf(0x2d3)](_0x1e382d[_0x46e4d7])):new Function(_0xed4cdf(0x773));break;case _0xed4cdf(0x4c6):_0x599b1a=_0x1e382d[_0x46e4d7]!==''?JSON[_0xed4cdf(0x2d3)](_0x1e382d[_0x46e4d7]):[],_0x290280=_0x599b1a[_0xed4cdf(0x584)](_0x27f25f=>new Function(JSON[_0xed4cdf(0x2d3)](_0x27f25f)));break;case _0xed4cdf(0xa25):_0x290280=_0x1e382d[_0x46e4d7]!==''?String(_0x1e382d[_0x46e4d7]):'';break;case _0xed4cdf(0x6d6):_0x599b1a=_0x1e382d[_0x46e4d7]!==''?JSON[_0xed4cdf(0x2d3)](_0x1e382d[_0x46e4d7]):[],_0x290280=_0x599b1a[_0xed4cdf(0x584)](_0x31961f=>String(_0x31961f));break;case _0xed4cdf(0x167):_0x1d977e=_0x1e382d[_0x46e4d7]!==''?JSON[_0xed4cdf(0x2d3)](_0x1e382d[_0x46e4d7]):{},_0x2f76ed[_0x45f6b7]={},VisuMZ[_0xed4cdf(0x313)](_0x2f76ed[_0x45f6b7],_0x1d977e);continue;case _0xed4cdf(0x6bf):_0x599b1a=_0x1e382d[_0x46e4d7]!==''?JSON[_0xed4cdf(0x2d3)](_0x1e382d[_0x46e4d7]):[],_0x290280=_0x599b1a[_0xed4cdf(0x584)](_0x58c04c=>VisuMZ[_0xed4cdf(0x313)]({},JSON[_0xed4cdf(0x2d3)](_0x58c04c)));break;default:continue;}_0x2f76ed[_0x45f6b7]=_0x290280;}}}return _0x2f76ed;},(_0x40254a=>{const _0xe79cdf=_0xe55837,_0x12401f=_0x40254a['name'];for(const _0x5b37bf of dependencies){if(_0xe79cdf(0x6b2)===_0xe79cdf(0x3d6)){function _0x32875e(){const _0x1152e0=_0xe79cdf;_0xa87c3d[_0x1152e0(0x392)][_0x1152e0(0x38f)]['call'](this);}}else{if(!Imported[_0x5b37bf]){if(_0xe79cdf(0xa06)!=='bRNaW'){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0xe79cdf(0x11c)](_0x12401f,_0x5b37bf)),SceneManager[_0xe79cdf(0x224)]();break;}else{function _0x5063ff(){const _0x1769ca=_0xe79cdf;_0x547a43['_tpbSceneChangeCacheActor']=_0x47e57c[_0x1769ca(0x3b1)]();}}}}}const _0x33e168=_0x40254a['description'];if(_0x33e168[_0xe79cdf(0x1c3)](/\[Version[ ](.*?)\]/i)){const _0xd8ca2d=Number(RegExp['$1']);if(_0xd8ca2d!==VisuMZ[label][_0xe79cdf(0x9fa)]){if('VBEex'!=='VBEex'){function _0x329388(){const _0x2261c8=_0xe79cdf;if(!_0x2f0ed4[_0x2261c8(0x1d0)]())return;_0xeb0248['ConvertParams'](_0x1c48f9,_0xde931f);const _0x259597=_0x1881b6[_0x2261c8(0x9a1)](_0x2aecbf[_0x2261c8(0xb7)]);if(_0x259597<=0x0)return;const _0x3b7556=_0x5bc674[_0x2261c8(0x534)](),_0x1881b6=_0x12db2c['_subject'],_0x24c88b=_0x38711f[_0x2261c8(0x67d)](_0x4393ed['Targets']),_0x3f4d0b=_0xe9e894[_0x2261c8(0x2f8)],_0x56de87=_0x34f1e5[_0x2261c8(0xa2)];if(!_0x3b7556||!_0x1881b6)return;_0x1cf952[_0x2261c8(0x21f)](_0x24c88b,_0x259597,_0x3f4d0b),_0x48b5c7[_0x2261c8(0x662)]&&_0x3b7556[_0x2261c8(0x78a)](_0x2261c8(0x312));}}else alert(_0xe79cdf(0x983)[_0xe79cdf(0x11c)](_0x12401f,_0xd8ca2d)),SceneManager[_0xe79cdf(0x224)]();}}if(_0x33e168[_0xe79cdf(0x1c3)](/\[Tier[ ](\d+)\]/i)){const _0x598605=Number(RegExp['$1']);_0x598605<tier?(alert(_0xe79cdf(0x114)[_0xe79cdf(0x11c)](_0x12401f,_0x598605,tier)),SceneManager[_0xe79cdf(0x224)]()):tier=Math['max'](_0x598605,tier);}VisuMZ[_0xe79cdf(0x313)](VisuMZ[label][_0xe79cdf(0x108)],_0x40254a[_0xe79cdf(0x824)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x1f6cb8){const _0x39f194=_0xe55837;let _0x474c68=[];for(const _0x518663 of _0x1f6cb8){if('BIGDn'===_0x39f194(0x146))_0x474c68=_0x474c68[_0x39f194(0xa77)](VisuMZ[_0x39f194(0x777)](_0x518663));else{function _0x152da4(){const _0x181799=_0x39f194;this[_0x181799(0x835)](_0x181799(0x11b));return;}}}return _0x474c68[_0x39f194(0x49d)](_0x3c1326=>_0x3c1326);},VisuMZ[_0xe55837(0x777)]=function(_0x38c7ec){const _0x2dc34a=_0xe55837,_0x33e6a6=BattleManager['allBattleMembers']()[_0x2dc34a(0x49d)](_0x27d61b=>_0x27d61b&&_0x27d61b['isAppeared']()),_0x18e3ff=BattleManager[_0x2dc34a(0xec)],_0x3c3291=BattleManager[_0x2dc34a(0x92e)],_0x117e97=BattleManager[_0x2dc34a(0x1ed)]?BattleManager[_0x2dc34a(0x1ed)][_0x2dc34a(0x2b5)](0x0):_0x33e6a6;_0x38c7ec=_0x38c7ec['toLowerCase']()[_0x2dc34a(0x1ee)]();if(_0x38c7ec===_0x2dc34a(0x69c)){if(_0x2dc34a(0x154)!=='NgGPo')return[_0x18e3ff];else{function _0x20b3d7(){const _0x213ecf=_0x2dc34a;if(!this[_0x213ecf(0xa24)]()['damage']['critical'])return 0x0;let _0x120867=_0x4803ff[_0x213ecf(0x278)]['Settings']['Damage'][_0x213ecf(0x2ef)][_0x213ecf(0x782)](this,_0x1d736c);return _0x120867=this[_0x213ecf(0x95d)][_0x213ecf(0x8c1)]*_0x120867+this['_multipliers'][_0x213ecf(0x799)],_0x120867;}}}else{if(_0x38c7ec===_0x2dc34a(0x690)){if(_0x2dc34a(0x3f0)!==_0x2dc34a(0x3f0)){function _0x30eb52(){const _0x34777a=_0x2dc34a;this[_0x34777a(0x518)]=this['_defeatedEnemies']||[];}}else return[_0x3c3291];}else{if(_0x38c7ec===_0x2dc34a(0x57b)){if(_0x2dc34a(0x31b)===_0x2dc34a(0x31b)){if(_0x3c3291){if(_0x2dc34a(0x3a5)!==_0x2dc34a(0x3a5)){function _0x172c47(){const _0x2f2031=_0x2dc34a;_0x3eab5d[_0x2f2031(0x237)]('PreEndActionJS');}}else{const _0x2c0540=_0x117e97['indexOf'](_0x3c3291);return _0x2c0540>=0x0?[_0x117e97[_0x2c0540-0x1]||_0x3c3291]:[_0x3c3291];}}}else{function _0x57bed5(){const _0x25ddc0=_0x2dc34a;_0x355b83['VisuMZ_0_CoreEngine']&&_0x260591[_0x25ddc0(0x1a1)]['Settings']['UI'][_0x25ddc0(0x4c1)]&&this['repositionEnemiesByResolution']();const _0x44aa97=_0x446906[_0x25ddc0(0x4a8)](),_0x3cac36=[];for(const _0x2db653 of _0x44aa97){_0x3cac36[_0x25ddc0(0x30a)](new _0x1e939f(_0x2db653));}_0x3cac36[_0x25ddc0(0x76d)](this['compareEnemySprite'][_0x25ddc0(0x51d)](this));for(const _0x37a707 of _0x3cac36){this[_0x25ddc0(0x3c0)][_0x25ddc0(0x9e6)](_0x37a707);}this['_enemySprites']=_0x3cac36;}}}else{if(_0x38c7ec==='text\x20target'){if('BjplG'!==_0x2dc34a(0x8fe)){function _0x324cfd(){const _0x409bfa=_0x2dc34a;this['damageContainer']()['addChild'](_0x2b8aa2);if(_0x145ce4[_0x409bfa(0x200)]())_0x4952cd['scale']['x']=-0x1;}}else{if(_0x3c3291){const _0x1eb31a=_0x117e97[_0x2dc34a(0x660)](_0x3c3291);return _0x1eb31a>=0x0?[_0x117e97[_0x1eb31a+0x1]||_0x3c3291]:[_0x3c3291];}}}else{if(_0x38c7ec===_0x2dc34a(0x134))return _0x117e97;else{if(_0x38c7ec==='focus')return[_0x18e3ff]['concat'](_0x117e97);else{if(_0x38c7ec===_0x2dc34a(0xa1a)){if(_0x2dc34a(0x73d)!==_0x2dc34a(0x785))return _0x33e6a6[_0x2dc34a(0x49d)](_0x2e2bf1=>_0x2e2bf1!==_0x18e3ff&&!_0x117e97[_0x2dc34a(0x450)](_0x2e2bf1)&&_0x2e2bf1[_0x2dc34a(0x7f3)]());else{function _0x16ca3d(){const _0x49d9c1=_0x2dc34a;this[_0x49d9c1(0x6a1)]()?this[_0x49d9c1(0x7be)]():_0x1be7c3[_0x49d9c1(0x278)]['BattleManager_selectNextCommand'][_0x49d9c1(0x782)](this);}}}}}}}}}if(_0x18e3ff){if(_0x2dc34a(0x720)==='RKQmn'){if(_0x38c7ec===_0x2dc34a(0x2c0)){if(_0x2dc34a(0x23a)!=='qpzhw')return _0x18e3ff[_0x2dc34a(0x105)]()['aliveMembers']();else{function _0x5ee550(){const _0x4ffb31=_0x2dc34a;_0x5bbc54[_0x4ffb31(0x278)][_0x4ffb31(0xa26)][_0x4ffb31(0x782)](this),this[_0x4ffb31(0x80d)]();}}}else{if(_0x38c7ec===_0x2dc34a(0x512)){if(_0x2dc34a(0xe5)!==_0x2dc34a(0x5da))return _0x18e3ff[_0x2dc34a(0x105)]()[_0x2dc34a(0x7f1)]()['filter'](_0x107119=>_0x107119!==_0x18e3ff);else{function _0x457037(){const _0xa8396a=_0x2dc34a,_0x220fbf=this[_0xa8396a(0x341)];_0x247844['BattleCore'][_0xa8396a(0xa44)][_0xa8396a(0x782)](this,_0x27074a),this[_0xa8396a(0x521)](_0x9ea2ed);if(_0x220fbf!==_0x2bb897)this[_0xa8396a(0x731)]();}}}else{if(_0x38c7ec===_0x2dc34a(0x537))return _0x18e3ff[_0x2dc34a(0x105)]()[_0x2dc34a(0x7f1)]()[_0x2dc34a(0x49d)](_0x107d40=>_0x107d40!==_0x3c3291);else{if(_0x38c7ec===_0x2dc34a(0x211))return _0x18e3ff[_0x2dc34a(0x105)]()[_0x2dc34a(0x5ca)]();else{if(_0x38c7ec[_0x2dc34a(0x1c3)](/FRIEND INDEX (\d+)/i)){const _0x516d42=Number(RegExp['$1']);return[_0x18e3ff['friendsUnit']()[_0x2dc34a(0x4a8)]()[_0x516d42]];}}}}}if(_0x38c7ec===_0x2dc34a(0x264))return _0x18e3ff[_0x2dc34a(0x3be)]()[_0x2dc34a(0x7f1)]();else{if(_0x38c7ec===_0x2dc34a(0x2ad))return _0x18e3ff['opponentsUnit']()[_0x2dc34a(0x7f1)]()[_0x2dc34a(0x49d)](_0x155be8=>_0x155be8!==_0x3c3291);else{if(_0x38c7ec==='dead\x20opponents')return _0x18e3ff[_0x2dc34a(0x3be)]()[_0x2dc34a(0x5ca)]();else{if(_0x38c7ec[_0x2dc34a(0x1c3)](/OPPONENT INDEX (\d+)/i)){const _0x51f550=Number(RegExp['$1']);return[_0x18e3ff['opponentsUnit']()[_0x2dc34a(0x4a8)]()[_0x51f550]];}}}}}else{function _0xd87322(){const _0x416685=_0x2dc34a;_0x198924[_0x416685(0x23d)]['x']=this[_0x416685(0x6ab)](),_0x1f0b3f['scale']['y']=this[_0x416685(0x722)]();}}}if(_0x38c7ec===_0x2dc34a(0x3f7)){if(_0x2dc34a(0x9b2)!==_0x2dc34a(0x3c6))return $gameParty['aliveMembers']();else{function _0x575fb2(){const _0x1bf94b=_0x2dc34a,_0x46ef6c=_0x3db6c2(_0x11e25f['$1']);return[_0x460ef9[_0x1bf94b(0x4a8)]()[_0x46ef6c]];}}}else{if(_0x38c7ec===_0x2dc34a(0x368))return $gameParty['aliveMembers']()['filter'](_0x59e7b5=>_0x59e7b5!==_0x18e3ff);else{if(_0x38c7ec===_0x2dc34a(0x4f0))return $gameParty['aliveMembers']()[_0x2dc34a(0x49d)](_0x33399a=>_0x33399a!==_0x3c3291);else{if(_0x38c7ec===_0x2dc34a(0x397)){if(_0x2dc34a(0x9f3)===_0x2dc34a(0x9f3))return $gameParty['deadMembers']();else{function _0x30e403(){const _0x4e66ef=_0x2dc34a,_0x57e2fb=_0x4babdd[_0x4e66ef(0x107)]()?_0x3e946e[_0x4e66ef(0x5bf)]:_0x3ad1f[_0x4e66ef(0x7d8)];_0x57e2fb&&_0x1ecf17[_0x4e66ef(0x278)][_0x4e66ef(0x108)][_0x4e66ef(0x30b)][_0x4e66ef(0x8ce)]&&(this['push'](_0x4e66ef(0x1df)),this[_0x4e66ef(0x30a)](_0x4e66ef(0x3d3)),this[_0x4e66ef(0x30a)](_0x4e66ef(0x390),_0x57e2fb[_0x4e66ef(0x11c)](_0x5309b7['name']())),this[_0x4e66ef(0x30a)](_0x4e66ef(0xea))),_0x21f826['id']===_0x1828d9['deathStateId']()&&this['push']('performCollapse',_0x24cd7b);}}}else{if(_0x38c7ec['match'](/ACTOR INDEX (\d+)/i)){if(_0x2dc34a(0x9c)===_0x2dc34a(0x101)){function _0x4e9d79(){const _0xf0b7e3=_0x2dc34a;return this[_0xf0b7e3(0x991)]>0x0;}}else{const _0x3deb09=Number(RegExp['$1']);return[$gameParty[_0x2dc34a(0x4a8)]()[_0x3deb09]];}}else{if(_0x38c7ec[_0x2dc34a(0x1c3)](/ACTOR ID (\d+)/i)){const _0x1d073e=Number(RegExp['$1']);return[$gameActors[_0x2dc34a(0x3b1)](_0x1d073e)];}}}}}}if(_0x38c7ec===_0x2dc34a(0x72e))return $gameTroop[_0x2dc34a(0x7f1)]();else{if(_0x38c7ec===_0x2dc34a(0x8a8))return $gameTroop['aliveMembers']()['filter'](_0xe04bff=>_0xe04bff!==_0x18e3ff);else{if(_0x38c7ec==='alive\x20enemies\x20not\x20target'){if(_0x2dc34a(0x254)!=='KutKd'){function _0x3ce3de(){const _0x5e6b1e=_0x2dc34a,_0x1334ff=_0x58172f['battleMembers']()[_0x392959],_0x1061fc=new _0x3abcb5();_0x1061fc[_0x5e6b1e(0x547)](_0x1334ff),_0x1061fc['setBattler'](_0x1334ff),_0x1061fc[_0x5e6b1e(0x59f)](),this[_0x5e6b1e(0x5ba)][_0x5e6b1e(0x30a)](_0x1061fc),this[_0x5e6b1e(0x3c0)][_0x5e6b1e(0x9e6)](_0x1061fc);}}else return $gameTroop[_0x2dc34a(0x7f1)]()['filter'](_0x1225f4=>_0x1225f4!==_0x3c3291);}else{if(_0x38c7ec===_0x2dc34a(0x17c))return $gameTroop['deadMembers']();else{if(_0x38c7ec[_0x2dc34a(0x1c3)](/ENEMY INDEX (\d+)/i)){if('YhkYf'===_0x2dc34a(0x7bd)){const _0x514bec=Number(RegExp['$1']);return[$gameTroop[_0x2dc34a(0x4a8)]()[_0x514bec]];}else{function _0x3c751f(){const _0x3fc838=_0x2dc34a;this[_0x3fc838(0xbd)]=![];}}}else{if(_0x38c7ec[_0x2dc34a(0x1c3)](/ENEMY ID (\d+)/i)){if(_0x2dc34a(0x754)!==_0x2dc34a(0x142)){const _0x28dfc0=Number(RegExp['$1']);return $gameTroop[_0x2dc34a(0x7f1)]()[_0x2dc34a(0x49d)](_0x35d26e=>_0x35d26e[_0x2dc34a(0x2fb)]()===_0x28dfc0);}else{function _0x414f2b(){const _0x332d56=_0x2dc34a;if(!_0x1bd814[_0x332d56(0x22a)]()&&this['constructor']===_0x5ee113){const _0x408886=_0x2118d8['prototype'][_0x332d56(0x2cc)]();[_0x332d56(0x4d5),_0x332d56(0x656),'portrait',_0x332d56(0x1bb)][_0x332d56(0x450)](_0x408886)&&(this[_0x332d56(0x863)]=0x0);}}}}}}}}}if(_0x38c7ec===_0x2dc34a(0x856))return _0x33e6a6[_0x2dc34a(0x49d)](_0x376acb=>_0x376acb['isAlive']());else{if(_0x38c7ec===_0x2dc34a(0xa4a)){if(_0x2dc34a(0x177)==='kabvO'){function _0x280721(){const _0x5ef460=_0x2dc34a;return _0x2a2b5c[_0x5ef460(0x278)][_0x5ef460(0x108)]['AutoBattle'][_0x5ef460(0x882)];}}else return _0x33e6a6[_0x2dc34a(0x49d)](_0x43acae=>_0x43acae[_0x2dc34a(0x453)]()&&_0x43acae!==_0x18e3ff);}else{if(_0x38c7ec==='alive\x20battlers\x20not\x20target')return _0x33e6a6[_0x2dc34a(0x49d)](_0x1aa341=>_0x1aa341[_0x2dc34a(0x453)]()&&_0x1aa341!==_0x3c3291);else{if(_0x38c7ec===_0x2dc34a(0x6aa))return _0x33e6a6['filter'](_0x404e45=>_0x404e45[_0x2dc34a(0xb6)]());}}}return[];},PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Set_SetupAction',_0x101ee1=>{const _0x3892fa=_0xe55837;if(!SceneManager[_0x3892fa(0x1d0)]())return;VisuMZ[_0x3892fa(0x313)](_0x101ee1,_0x101ee1);const _0x24dba1=$gameTemp[_0x3892fa(0x534)](),_0x2b0c38=BattleManager['_action'],_0xce0c=BattleManager[_0x3892fa(0xec)],_0xf6c967=BattleManager[_0x3892fa(0x1ed)]?BattleManager[_0x3892fa(0x1ed)][_0x3892fa(0x2b5)](0x0):[],_0x1e670d=BattleManager[_0x3892fa(0xa2)];if(!_0x24dba1||!_0x2b0c38||!_0xce0c)return;if(!_0x2b0c38[_0x3892fa(0xa24)]())return;if(_0x101ee1[_0x3892fa(0xa2e)])_0x1e670d['displayAction'](_0xce0c,_0x2b0c38[_0x3892fa(0xa24)]());if(_0x101ee1[_0x3892fa(0x995)]){if('hPhME'!==_0x3892fa(0x384)){function _0x47d0e2(){const _0x38e486=_0x3892fa;if(!_0x3ece8b[_0x38e486(0x22a)]())return;const _0x4aa713=this['battler']();if(!_0x4aa713)return;_0x289e49=_0x43e74c||0x0;if(_0x10d023>0x0){if(_0x4aa713[_0x38e486(0xa0)]>_0x1ac841)_0x55a583+=_0x4aa713['width']/0x2+_0x3e2e4c;if(_0x4aa713[_0x38e486(0xa0)]<_0x4855a1)_0x3b6755-=_0x4aa713[_0x38e486(0x124)]/0x2+_0x107cd2;}if(_0x57d09b)this[_0x38e486(0xa66)](_0xe60b07,_0x112ea2,![]);_0x2b27fe-=_0x4aa713['_homeX'],_0x57016c-=_0x4aa713[_0x38e486(0x677)],_0x4aa713[_0x38e486(0x5fa)](_0x563ada,_0x154481,_0x4603c5);if(_0xf19820[_0x38e486(0x209)])_0x4aa713[_0x38e486(0xb2)](_0x2b1c6b||_0x38e486(0x837));}}else _0x1e670d[_0x3892fa(0x30a)](_0x3892fa(0xc7),_0xce0c,_0xf6c967,!![]);}if(_0x101ee1[_0x3892fa(0x464)])_0x1e670d['push'](_0x3892fa(0x8a9),_0xce0c,_0x2b0c38);if(_0x101ee1[_0x3892fa(0x697)])_0x1e670d[_0x3892fa(0x30a)](_0x3892fa(0x344));if(_0x101ee1[_0x3892fa(0x9ff)])_0x1e670d[_0x3892fa(0x30a)](_0x3892fa(0x932),_0xce0c,_0x2b0c38);if(_0x101ee1[_0x3892fa(0x662)])_0x1e670d[_0x3892fa(0x30a)](_0x3892fa(0x9a5));_0x24dba1['setWaitMode'](_0x3892fa(0x7fd));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x4bb),_0x2ebe65=>{const _0xc79d2d=_0xe55837;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2ebe65,_0x2ebe65);const _0x24eb86=$gameTemp['getLastPluginCommandInterpreter'](),_0x3d6f0c=BattleManager[_0xc79d2d(0x815)],_0x1fb012=BattleManager[_0xc79d2d(0xec)],_0x2f1b22=BattleManager[_0xc79d2d(0x1ed)]?BattleManager[_0xc79d2d(0x1ed)][_0xc79d2d(0x2b5)](0x0):[],_0x2451e9=BattleManager['_logWindow'],_0x21e934=_0x2ebe65[_0xc79d2d(0x792)]??![];if(!_0x24eb86||!_0x3d6f0c||!_0x1fb012)return;if(!_0x3d6f0c[_0xc79d2d(0xa24)]())return;let _0x1a888c=_0x21e934?_0x2451e9[_0xc79d2d(0x95b)](_0x1fb012):0x1;for(let _0x7ba751=0x0;_0x7ba751<_0x1a888c;_0x7ba751++){if(_0x21e934&&_0x1fb012[_0xc79d2d(0x107)]()){if('NIzbv'!=='NIzbv'){function _0x216aaf(){const _0x502cff=_0xc79d2d;this[_0x502cff(0x78a)]('animation');}}else _0x2451e9[_0xc79d2d(0x30a)](_0xc79d2d(0x95f),_0x1fb012,_0x7ba751);}if(_0x2ebe65[_0xc79d2d(0x2a7)])_0x2451e9[_0xc79d2d(0x30a)](_0xc79d2d(0x2af),_0x1fb012,_0x3d6f0c);if(_0x2ebe65[_0xc79d2d(0x11d)]>0x0)_0x2451e9[_0xc79d2d(0x30a)](_0xc79d2d(0x664),_0x2ebe65['WaitCount']);if(_0x2ebe65[_0xc79d2d(0x144)])_0x2451e9[_0xc79d2d(0x30a)]('showAnimation',_0x1fb012,_0x2f1b22,_0x3d6f0c[_0xc79d2d(0xa24)]()['animationId']);if(_0x2ebe65[_0xc79d2d(0x662)])_0x2451e9[_0xc79d2d(0x30a)]('waitForAnimation');for(const _0xcbda08 of _0x2f1b22){if(!_0xcbda08)continue;if(_0x2ebe65[_0xc79d2d(0x89c)])_0x2451e9[_0xc79d2d(0x30a)](_0xc79d2d(0x9e2),_0x1fb012,_0xcbda08);}}_0x21e934&&_0x1fb012['isActor']()&&_0x2451e9['push'](_0xc79d2d(0x3a4),_0x1fb012);if(_0x2ebe65[_0xc79d2d(0x995)])_0x2451e9[_0xc79d2d(0x30a)]('applyImmortal',_0x1fb012,_0x2f1b22,![]);_0x24eb86[_0xc79d2d(0x78a)]('battlelog');}),PluginManager[_0xe55837(0x74c)](pluginData['name'],'ActSeq_Set_TargetActionSet',_0x5bf0b7=>{const _0x38266a=_0xe55837;if(!SceneManager[_0x38266a(0x1d0)]())return;VisuMZ[_0x38266a(0x313)](_0x5bf0b7,_0x5bf0b7);const _0x1755b2=$gameTemp[_0x38266a(0x534)](),_0x7bb86b=BattleManager['_action'],_0x4d746b=BattleManager['_subject'],_0x226be5=BattleManager[_0x38266a(0x1ed)]?BattleManager[_0x38266a(0x1ed)][_0x38266a(0x2b5)](0x0):[],_0x2d0c73=BattleManager[_0x38266a(0xa2)],_0x1b6103=_0x5bf0b7['DualWield']??![];if(!_0x1755b2||!_0x7bb86b||!_0x4d746b)return;if(!_0x7bb86b[_0x38266a(0xa24)]())return;let _0x5e50b1=_0x1b6103?_0x2d0c73[_0x38266a(0x95b)](_0x4d746b):0x1;for(let _0x20460d=0x0;_0x20460d<_0x5e50b1;_0x20460d++){if(_0x38266a(0x93e)!==_0x38266a(0x93e)){function _0x306eea(){const _0x1d6cf7=_0x38266a,_0x5bd3f7=this['itemLineRect'](_0x8c737b),_0x2098f0=this[_0x1d6cf7(0x93f)](_0x4e49e9),_0xd4fe07=this[_0x1d6cf7(0x578)](_0x2098f0)[_0x1d6cf7(0x124)];this[_0x1d6cf7(0x322)](this[_0x1d6cf7(0x571)](_0xa848c2));const _0x4f5f8f=this['itemTextAlign']();if(_0x4f5f8f===_0x1d6cf7(0x9db))this[_0x1d6cf7(0x85a)](_0x2098f0,_0x5bd3f7['x']+_0x5bd3f7[_0x1d6cf7(0x124)]-_0xd4fe07,_0x5bd3f7['y'],_0xd4fe07);else{if(_0x4f5f8f===_0x1d6cf7(0x89d)){const _0x48a7cb=_0x5bd3f7['x']+_0x10d53e[_0x1d6cf7(0x639)]((_0x5bd3f7[_0x1d6cf7(0x124)]-_0xd4fe07)/0x2);this[_0x1d6cf7(0x85a)](_0x2098f0,_0x48a7cb,_0x5bd3f7['y'],_0xd4fe07);}else this[_0x1d6cf7(0x85a)](_0x2098f0,_0x5bd3f7['x'],_0x5bd3f7['y'],_0xd4fe07);}}}else for(const _0x4ebcff of _0x226be5){if(!_0x4ebcff)continue;if(_0x1b6103&&_0x4d746b['isActor']()){if(_0x38266a(0x97f)!==_0x38266a(0x5ff))_0x2d0c73['push'](_0x38266a(0x95f),_0x4d746b,_0x20460d);else{function _0x2b10dd(){const _0x5b2559=_0x38266a;if(!_0x1db914[_0x5b2559(0x1d0)]())return;_0x2bffb3['ConvertParams'](_0x37d4f7,_0x5865c5);const _0x5abd38=_0x562f17['_action'];if(!_0x5abd38)return;let _0x20034f=_0x35d209[_0x5b2559(0x946)];_0x5abd38[_0x5b2559(0x867)](_0x20034f);}}}if(_0x5bf0b7['PerformAction'])_0x2d0c73[_0x38266a(0x30a)](_0x38266a(0x2af),_0x4d746b,_0x7bb86b);if(_0x5bf0b7[_0x38266a(0x934)]>0x0)_0x2d0c73[_0x38266a(0x30a)](_0x38266a(0x664),_0x5bf0b7[_0x38266a(0x934)]);if(_0x5bf0b7['ActionAnimation'])_0x2d0c73['push'](_0x38266a(0x687),_0x4d746b,[_0x4ebcff],_0x7bb86b[_0x38266a(0xa24)]()[_0x38266a(0x44d)]);if(_0x5bf0b7[_0x38266a(0x585)]>0x0)_0x2d0c73[_0x38266a(0x30a)](_0x38266a(0x664),_0x5bf0b7[_0x38266a(0x585)]);if(_0x5bf0b7[_0x38266a(0x89c)])_0x2d0c73[_0x38266a(0x30a)]('actionEffect',_0x4d746b,_0x4ebcff);}}_0x1b6103&&_0x4d746b[_0x38266a(0x107)]()&&_0x2d0c73['push'](_0x38266a(0x3a4),_0x4d746b);if(_0x5bf0b7['ApplyImmortal'])_0x2d0c73[_0x38266a(0x30a)](_0x38266a(0xc7),_0x4d746b,_0x226be5,![]);_0x1755b2[_0x38266a(0x78a)](_0x38266a(0x7fd));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Set_FinishAction',_0x58da75=>{const _0x5760f4=_0xe55837;if(!SceneManager[_0x5760f4(0x1d0)]())return;VisuMZ[_0x5760f4(0x313)](_0x58da75,_0x58da75);const _0x2da4c3=$gameTemp[_0x5760f4(0x534)](),_0x4d6b34=BattleManager[_0x5760f4(0x815)],_0x42f2c3=BattleManager[_0x5760f4(0xec)],_0x5b4f98=BattleManager[_0x5760f4(0x1ed)]?BattleManager['_allTargets']['slice'](0x0):[],_0x6d4a61=BattleManager[_0x5760f4(0xa2)];if(!_0x2da4c3||!_0x4d6b34||!_0x42f2c3)return;if(!_0x4d6b34['item']())return;if(_0x58da75[_0x5760f4(0x995)])_0x6d4a61[_0x5760f4(0x30a)](_0x5760f4(0xc7),_0x42f2c3,_0x5b4f98,![]);if(_0x58da75['WaitForNewLine'])_0x6d4a61[_0x5760f4(0x30a)](_0x5760f4(0x3a3));if(_0x58da75[_0x5760f4(0x7ae)])_0x6d4a61[_0x5760f4(0x30a)]('waitForEffect');if(_0x58da75[_0x5760f4(0x168)])_0x6d4a61[_0x5760f4(0x30a)](_0x5760f4(0x8d7));if(_0x58da75[_0x5760f4(0xa21)])_0x6d4a61[_0x5760f4(0x30a)](_0x5760f4(0x9ae),_0x42f2c3);if(_0x58da75[_0x5760f4(0x697)])_0x6d4a61[_0x5760f4(0x30a)](_0x5760f4(0x344));_0x2da4c3['setWaitMode'](_0x5760f4(0x7fd));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_ChangeAngle',_0x35d0b9=>{const _0x21925c=_0xe55837;if(!SceneManager[_0x21925c(0x1d0)]())return;if(!Imported[_0x21925c(0x187)])return;VisuMZ[_0x21925c(0x313)](_0x35d0b9,_0x35d0b9);const _0x207a91=$gameTemp['getLastPluginCommandInterpreter'](),_0x226797=_0x35d0b9[_0x21925c(0x2e2)];if(!_0x207a91)return;$gameScreen[_0x21925c(0x343)](_0x35d0b9[_0x21925c(0x70b)],_0x35d0b9['Duration'],_0x35d0b9['EasingType']);if(_0x226797)_0x207a91['setWaitMode']('battleAngle');}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x22f),_0x3c5c58=>{const _0xb29eb8=_0xe55837;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xb29eb8(0x187)])return;VisuMZ[_0xb29eb8(0x313)](_0x3c5c58,_0x3c5c58);const _0xe0b0ba=$gameTemp['getLastPluginCommandInterpreter'](),_0x44e96a=_0x3c5c58['WaitForAngle'];if(!_0xe0b0ba)return;$gameScreen['setBattleAngle'](0x0,_0x3c5c58[_0xb29eb8(0x769)],_0x3c5c58[_0xb29eb8(0x76f)]);if(_0x44e96a)_0xe0b0ba[_0xb29eb8(0x78a)]('battleAngle');}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x18e),_0xf14006=>{const _0x5b02c1=_0xe55837;if(!SceneManager[_0x5b02c1(0x1d0)]())return;if(!Imported[_0x5b02c1(0x187)])return;const _0x1b94b4=$gameTemp[_0x5b02c1(0x534)]();if(!_0x1b94b4)return;_0x1b94b4[_0x5b02c1(0x78a)]('battleAngle');}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x257),_0x1e0179=>{const _0x5e8596=_0xe55837;if(!SceneManager[_0x5e8596(0x1d0)]())return;VisuMZ[_0x5e8596(0x313)](_0x1e0179,_0x1e0179);const _0x3b880e=$gameTemp[_0x5e8596(0x534)](),_0x532a1c=BattleManager['_action'],_0x13495a=BattleManager[_0x5e8596(0xec)],_0x259c9c=VisuMZ[_0x5e8596(0x67d)](_0x1e0179[_0x5e8596(0xa15)]),_0x3243b5=_0x1e0179[_0x5e8596(0x2f8)],_0x20cf6f=BattleManager[_0x5e8596(0xa2)];if(!_0x3b880e||!_0x532a1c||!_0x13495a)return;if(!_0x532a1c[_0x5e8596(0xa24)]())return;let _0x22bc84=_0x532a1c[_0x5e8596(0xa24)]()[_0x5e8596(0x44d)];if(_0x22bc84<0x0)_0x22bc84=_0x13495a[_0x5e8596(0x39c)]();$gameTemp[_0x5e8596(0x21f)](_0x259c9c,_0x22bc84,_0x3243b5),_0x1e0179[_0x5e8596(0x662)]&&_0x3b880e['setWaitMode'](_0x5e8596(0x312));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Animation_AttackAnimation',_0x33c73c=>{const _0x276326=_0xe55837;if(!SceneManager[_0x276326(0x1d0)]())return;VisuMZ[_0x276326(0x313)](_0x33c73c,_0x33c73c);const _0x3eb74f=$gameTemp[_0x276326(0x534)](),_0x1f694e=BattleManager[_0x276326(0xec)],_0x3719eb=VisuMZ[_0x276326(0x67d)](_0x33c73c[_0x276326(0xa15)]),_0x1c3318=_0x33c73c['Mirror'],_0x4ca9f6=BattleManager[_0x276326(0xa2)];if(!_0x3eb74f||!_0x1f694e)return;const _0x5594e6=_0x1f694e[_0x276326(0x39c)]();$gameTemp['requestAnimation'](_0x3719eb,_0x5594e6,_0x1c3318);if(_0x33c73c[_0x276326(0x662)]){if(_0x276326(0xad)===_0x276326(0xad))_0x3eb74f['setWaitMode'](_0x276326(0x312));else{function _0x1e402b(){const _0x4ec39f=_0x276326;this[_0x4ec39f(0xa5b)]=this['validTargets'](),this['sortEnemies'](),_0x54f0c0['prototype']['refresh'][_0x4ec39f(0x782)](this);}}}}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x5d0),_0x261e6a=>{const _0x1902f7=_0xe55837;if(!SceneManager[_0x1902f7(0x1d0)]())return;VisuMZ[_0x1902f7(0x313)](_0x261e6a,_0x261e6a);const _0x1b0221=_0x474e99[_0x1902f7(0x9a1)](_0x261e6a[_0x1902f7(0xb7)]);if(_0x1b0221<=0x0)return;const _0x52aa58=$gameTemp[_0x1902f7(0x534)](),_0x474e99=BattleManager[_0x1902f7(0xec)],_0x370805=VisuMZ[_0x1902f7(0x67d)](_0x261e6a['Targets']),_0x272454=_0x261e6a[_0x1902f7(0x2f8)],_0x5dba64=BattleManager[_0x1902f7(0xa2)];if(!_0x52aa58||!_0x474e99)return;$gameTemp[_0x1902f7(0x21f)](_0x370805,_0x1b0221,_0x272454),_0x261e6a[_0x1902f7(0x662)]&&_0x52aa58[_0x1902f7(0x78a)](_0x1902f7(0x312));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x9e0),_0x2dc3f4=>{const _0x3ba9f8=_0xe55837;if(!SceneManager[_0x3ba9f8(0x1d0)]())return;VisuMZ[_0x3ba9f8(0x313)](_0x2dc3f4,_0x2dc3f4);const _0x2c7ecc=$gameTemp[_0x3ba9f8(0x534)](),_0x1fc33e=BattleManager['_action'],_0x491c88=_0x2dc3f4['Mirror'],_0x542194=VisuMZ[_0x3ba9f8(0x67d)](_0x2dc3f4[_0x3ba9f8(0xa15)]);if(!_0x2c7ecc||!_0x1fc33e)return;if(!_0x1fc33e[_0x3ba9f8(0xa24)]())return;for(const _0x6c4d0f of _0x542194){if(_0x3ba9f8(0x3f2)!==_0x3ba9f8(0x3f2)){function _0x4aa205(){const _0x3a96d2=_0x3ba9f8;this[_0x3a96d2(0x573)]();}}else{if(!_0x6c4d0f)continue;_0x6c4d0f['performCastAnimation'](_0x1fc33e,_0x491c88);}}if(_0x2dc3f4[_0x3ba9f8(0x662)])_0x2c7ecc['setWaitMode'](_0x3ba9f8(0x312));}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x86c),_0x2541aa=>{const _0x1854e6=_0xe55837;VisuMZ[_0x1854e6(0x313)](_0x2541aa,_0x2541aa);const _0x10de00=$gameTemp['getLastPluginCommandInterpreter'](),_0x2d224f=VisuMZ[_0x1854e6(0x67d)](_0x2541aa[_0x1854e6(0xa15)]),_0x452d47=_0x2541aa[_0x1854e6(0x123)];if(!_0x452d47)return;for(const _0x2aa0f8 of _0x2d224f){if(!_0x2aa0f8)continue;if(!_0x2aa0f8[_0x1854e6(0x107)]())continue;_0x2aa0f8['setBattlePortrait'](_0x452d47);}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],'ActSeq_Animation_ShowAnimation',_0x55b42c=>{const _0x3139da=_0xe55837;if(!SceneManager[_0x3139da(0x1d0)]())return;VisuMZ[_0x3139da(0x313)](_0x55b42c,_0x55b42c);const _0x375a3c=$gameTemp[_0x3139da(0x534)](),_0xd15a07=VisuMZ[_0x3139da(0x67d)](_0x55b42c[_0x3139da(0xa15)]),_0x44b0a4=_0x55b42c[_0x3139da(0x666)],_0x54e0bb=_0x55b42c['Mirror'];if(!_0x375a3c)return;$gameTemp[_0x3139da(0x21f)](_0xd15a07,_0x44b0a4,_0x54e0bb);if(_0x55b42c[_0x3139da(0x662)])_0x375a3c[_0x3139da(0x78a)](_0x3139da(0x312));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x8bd),_0x24e1a9=>{const _0x43bb3f=_0xe55837;if(!SceneManager[_0x43bb3f(0x1d0)]())return;const _0x58f254=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x58f254)return;_0x58f254[_0x43bb3f(0x78a)](_0x43bb3f(0x312));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x2d0),_0x9cb451=>{const _0x3a49f8=_0xe55837;if(!SceneManager[_0x3a49f8(0x1d0)]())return;VisuMZ[_0x3a49f8(0x313)](_0x9cb451,_0x9cb451);const _0x4477cd=BattleManager[_0x3a49f8(0xa2)],_0x1d644f=_0x9cb451[_0x3a49f8(0x30f)]&&Imported[_0x3a49f8(0x52d)];_0x4477cd['addText'](_0x9cb451['Text']),_0x1d644f&&Imported['VisuMZ_4_CombatLog']&&$gameSystem[_0x3a49f8(0x5e0)](_0x9cb451[_0x3a49f8(0x68d)]||'',_0x9cb451[_0x3a49f8(0x46b)]||0x0);}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x12d),_0x15d095=>{const _0x503063=_0xe55837;if(!SceneManager['isSceneBattle']())return;const _0x15c51=BattleManager[_0x503063(0xa2)];_0x15c51[_0x503063(0x8d7)]();}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_BattleLog_DisplayAction',_0x5ca4de=>{const _0x42cc0d=_0xe55837;if(!SceneManager[_0x42cc0d(0x1d0)]())return;const _0x279bdd=$gameTemp[_0x42cc0d(0x534)](),_0x892943=BattleManager[_0x42cc0d(0x815)],_0x476ec2=BattleManager[_0x42cc0d(0xec)],_0x2d547f=BattleManager['_logWindow'];if(!_0x279bdd||!_0x892943||!_0x476ec2)return;if(!_0x892943[_0x42cc0d(0xa24)]())return;_0x2d547f[_0x42cc0d(0x1a7)](_0x476ec2,_0x892943[_0x42cc0d(0xa24)]()),_0x279bdd[_0x42cc0d(0x78a)]('battlelog');}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_BattleLog_PopBaseLine',_0xb62c7e=>{const _0x4c5f7b=_0xe55837;if(!SceneManager[_0x4c5f7b(0x1d0)]())return;const _0x1f78c6=BattleManager[_0x4c5f7b(0xa2)];_0x1f78c6[_0x4c5f7b(0x1df)]();}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x9cf),_0x1cbf6c=>{const _0x4cf7aa=_0xe55837;if(!SceneManager[_0x4cf7aa(0x1d0)]())return;const _0x19e7d8=BattleManager[_0x4cf7aa(0xa2)];_0x19e7d8[_0x4cf7aa(0x3d3)]();}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x97b),_0x85096a=>{const _0x507bca=_0xe55837;if(!SceneManager[_0x507bca(0x1d0)]())return;const _0x43a2bc=BattleManager['_logWindow'];_0x43a2bc[_0x507bca(0x597)]();}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x1e5),_0x181723=>{const _0x489cda=_0xe55837;if(!SceneManager[_0x489cda(0x1d0)]())return;VisuMZ['ConvertParams'](_0x181723,_0x181723),SceneManager[_0x489cda(0x1c8)][_0x489cda(0x139)](_0x181723[_0x489cda(0x756)]);}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x886),_0x591fba=>{const _0xf417d4=_0xe55837;if(!SceneManager['isSceneBattle']())return;const _0xe130fe=$gameTemp[_0xf417d4(0x534)]();_0xe130fe[_0xf417d4(0x78a)](_0xf417d4(0x7fd));}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0xa8),_0x40567e=>{const _0x228a87=_0xe55837;if(!SceneManager[_0x228a87(0x1d0)]())return;const _0x26f18c=$gameTemp['getLastPluginCommandInterpreter'](),_0x2e4f11=BattleManager['_logWindow'];_0x2e4f11[_0x228a87(0x3a3)](),_0x26f18c[_0x228a87(0x78a)](_0x228a87(0x7fd));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x683),_0x2c9d28=>{const _0x449d99=_0xe55837;if(!SceneManager[_0x449d99(0x1d0)]())return;if(!Imported[_0x449d99(0x187)])return;VisuMZ[_0x449d99(0x313)](_0x2c9d28,_0x2c9d28);const _0x387c68=$gameScreen[_0x449d99(0x956)]();_0x387c68[_0x449d99(0x412)]=_0x2c9d28[_0x449d99(0x4f4)];}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Camera_FocusPoint',_0x896b49=>{const _0x4940d0=_0xe55837;if(!SceneManager[_0x4940d0(0x1d0)]())return;if(!Imported[_0x4940d0(0x187)])return;VisuMZ[_0x4940d0(0x313)](_0x896b49,_0x896b49);const _0x525e4d=$gameTemp[_0x4940d0(0x534)](),_0x595c12=_0x896b49[_0x4940d0(0x8c6)];$gameScreen['setBattleCameraPoint'](_0x896b49[_0x4940d0(0x737)],_0x896b49[_0x4940d0(0x88e)],_0x896b49[_0x4940d0(0x769)],_0x896b49[_0x4940d0(0x76f)]);if(_0x595c12)_0x525e4d[_0x4940d0(0x78a)](_0x4940d0(0x85c));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x83c),_0x3425a4=>{const _0x354012=_0xe55837;if(!SceneManager[_0x354012(0x1d0)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x354012(0x313)](_0x3425a4,_0x3425a4);const _0x2bff41=$gameTemp[_0x354012(0x534)](),_0x3bc80a=VisuMZ['CreateActionSequenceTargets'](_0x3425a4[_0x354012(0xa15)]),_0x481c65=_0x3425a4[_0x354012(0x8c6)];$gameScreen[_0x354012(0x18f)](_0x3bc80a,_0x3425a4[_0x354012(0x769)],_0x3425a4[_0x354012(0x76f)]);if(_0x481c65)_0x2bff41[_0x354012(0x78a)](_0x354012(0x85c));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0xa48),_0x10c222=>{const _0x5270c9=_0xe55837;if(!SceneManager[_0x5270c9(0x1d0)]())return;if(!Imported[_0x5270c9(0x187)])return;VisuMZ[_0x5270c9(0x313)](_0x10c222,_0x10c222);const _0x3bd362=$gameTemp[_0x5270c9(0x534)](),_0x3b96c8=_0x10c222[_0x5270c9(0x8c6)];$gameScreen['setBattleCameraOffset'](_0x10c222[_0x5270c9(0x667)],_0x10c222['OffsetY'],_0x10c222[_0x5270c9(0x769)],_0x10c222['EasingType']);if(_0x3b96c8)_0x3bd362['setWaitMode'](_0x5270c9(0x85c));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Camera_Reset',_0x29f888=>{const _0x35e256=_0xe55837;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x35e256(0x187)])return;VisuMZ[_0x35e256(0x313)](_0x29f888,_0x29f888);const _0xe9bf98=$gameTemp['getLastPluginCommandInterpreter'](),_0x35dab1=_0x29f888['ResetFocus'],_0x2840d5=_0x29f888['ResetOffset'],_0x456baf=_0x29f888[_0x35e256(0x8c6)];if(_0x35dab1){const _0x441bb1=Math[_0x35e256(0x498)](Graphics[_0x35e256(0x124)]/0x2),_0x29af4f=Math[_0x35e256(0x498)](Graphics['height']/0x2);$gameScreen[_0x35e256(0x9fd)](_0x441bb1,_0x29af4f,_0x29f888['Duration'],_0x29f888[_0x35e256(0x76f)]);}if(_0x2840d5){if('ddGae'==='WGhqX'){function _0x27203d(){const _0x43e636=_0x35e256;this[_0x43e636(0x634)]();}}else $gameScreen[_0x35e256(0x8ad)](0x0,0x0,_0x29f888[_0x35e256(0x769)],_0x29f888['EasingType']);}if(_0x456baf)_0xe9bf98[_0x35e256(0x78a)](_0x35e256(0x85c));}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x879),_0x533f51=>{const _0x3e4999=_0xe55837;if(!SceneManager[_0x3e4999(0x1d0)]())return;if(!Imported[_0x3e4999(0x187)])return;const _0x5ae9f1=$gameTemp[_0x3e4999(0x534)]();if(!_0x5ae9f1)return;_0x5ae9f1['setWaitMode'](_0x3e4999(0x85c));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0xc1),_0x315d2e=>{const _0x5431e9=_0xe55837;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5431e9(0xa61)])return;VisuMZ[_0x5431e9(0x313)](_0x315d2e,_0x315d2e);const _0x213f84=VisuMZ[_0x5431e9(0x67d)](_0x315d2e['Targets']),_0x519009=_0x315d2e[_0x5431e9(0x5b6)][_0x5431e9(0x8f1)]()[_0x5431e9(0x1ee)]();for(const _0x400b57 of _0x213f84){if(!_0x400b57)continue;_0x400b57[_0x5431e9(0x904)](_0x519009);}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x2be),_0x2d20e4=>{const _0x14db0f=_0xe55837;if(!SceneManager[_0x14db0f(0x1d0)]())return;if(!Imported[_0x14db0f(0xa61)])return;VisuMZ[_0x14db0f(0x313)](_0x2d20e4,_0x2d20e4);const _0x2fd80a=VisuMZ[_0x14db0f(0x67d)](_0x2d20e4[_0x14db0f(0xa15)]),_0x4b1f9c=_0x2d20e4[_0x14db0f(0x1b0)];for(const _0x31add6 of _0x2fd80a){if(_0x14db0f(0x50d)!==_0x14db0f(0x952)){if(!_0x31add6)continue;_0x31add6['dragonbonesData']()[_0x14db0f(0x4da)]=_0x4b1f9c;}else{function _0x598cfd(){this['_waitCount']=_0x5c5e22;}}}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x89b),_0x7bf867=>{const _0x1e2e02=_0xe55837;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1e2e02(0x53d)])return;VisuMZ[_0x1e2e02(0x313)](_0x7bf867,_0x7bf867);const _0x9a0c09=BattleManager[_0x1e2e02(0x815)],_0x47f62d=_0x7bf867[_0x1e2e02(0x86d)];if(!_0x9a0c09)return;_0x9a0c09[_0x1e2e02(0x3d5)]=_0x47f62d;}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x40c),_0x5e5380=>{const _0x533ee9=_0xe55837;if(!SceneManager[_0x533ee9(0x1d0)]())return;if(!Imported[_0x533ee9(0x53d)])return;const _0x292110=BattleManager[_0x533ee9(0x815)];if(!_0x292110)return;_0x292110[_0x533ee9(0x346)]();}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x426),_0x4a6650=>{const _0x32883c=_0xe55837;if(!SceneManager[_0x32883c(0x1d0)]())return;if(!Imported[_0x32883c(0x53d)])return;VisuMZ[_0x32883c(0x313)](_0x4a6650,_0x4a6650);const _0xa24a16=BattleManager[_0x32883c(0x815)],_0x42f0c6=_0x4a6650['Elements'];if(!_0xa24a16)return;_0xa24a16[_0x32883c(0x43a)]=_0x42f0c6;}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Element_NullElements',_0x440d8e=>{const _0x5c9380=_0xe55837;if(!SceneManager[_0x5c9380(0x1d0)]())return;if(!Imported[_0x5c9380(0x53d)])return;const _0x568204=BattleManager['_action'];if(!_0x568204)return;_0x568204[_0x5c9380(0x9fe)]=!![];}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x166),_0x343ff8=>{const _0x436a75=_0xe55837;if(!Imported[_0x436a75(0x42a)])return;if(!SceneManager[_0x436a75(0x1d0)]())return;VisuMZ['ConvertParams'](_0x343ff8,_0x343ff8);const _0x3518b4=VisuMZ[_0x436a75(0x67d)](_0x343ff8[_0x436a75(0xa15)]);for(const _0x39001a of _0x3518b4){if(!_0x39001a)continue;_0x39001a[_0x436a75(0x771)](_0x436a75(0xa14)),_0x39001a['removeHorrorEffect'](_0x436a75(0x848)),_0x39001a[_0x436a75(0x771)]('tv'),_0x39001a[_0x436a75(0x283)]();}$gamePlayer['refresh']();}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x353),_0x2837e0=>{const _0x4ba18b=_0xe55837;if(!Imported[_0x4ba18b(0x42a)])return;if(!SceneManager[_0x4ba18b(0x1d0)]())return;VisuMZ[_0x4ba18b(0x313)](_0x2837e0,_0x2837e0);const _0x4e40c2=VisuMZ[_0x4ba18b(0x67d)](_0x2837e0[_0x4ba18b(0xa15)]),_0x3e53a3='glitch';_0x2837e0[_0x4ba18b(0x3c8)]=Math['ceil'](_0x2837e0['slices']/0x2),_0x2837e0[_0x4ba18b(0x3ad)]=_0x2837e0[_0x4ba18b(0x324)],_0x2837e0[_0x4ba18b(0x924)]=!![];for(const _0x409aca of _0x4e40c2){if(!_0x409aca)continue;_0x409aca['setHorrorEffectSettings'](_0x3e53a3,_0x2837e0);}$gamePlayer[_0x4ba18b(0x597)]();}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x36a),_0x185644=>{const _0x390fa0=_0xe55837;if(!Imported[_0x390fa0(0x42a)])return;if(!SceneManager[_0x390fa0(0x1d0)]())return;VisuMZ[_0x390fa0(0x313)](_0x185644,_0x185644);const _0x16a06f=VisuMZ['CreateActionSequenceTargets'](_0x185644[_0x390fa0(0xa15)]);for(const _0x415d4a of _0x16a06f){if(!_0x415d4a)continue;_0x415d4a[_0x390fa0(0x771)](_0x390fa0(0x848));}$gamePlayer[_0x390fa0(0x597)]();}),PluginManager[_0xe55837(0x74c)](pluginData['name'],'ActSeq_Horror_NoiseCreate',_0x2b5a64=>{const _0x21503a=_0xe55837;if(!Imported[_0x21503a(0x42a)])return;if(!SceneManager[_0x21503a(0x1d0)]())return;VisuMZ[_0x21503a(0x313)](_0x2b5a64,_0x2b5a64);const _0x22dca4=VisuMZ[_0x21503a(0x67d)](_0x2b5a64[_0x21503a(0xa15)]),_0x3b908e=_0x21503a(0xa14);for(const _0x4bcb67 of _0x22dca4){if(!_0x4bcb67)continue;_0x4bcb67[_0x21503a(0x4f3)](_0x3b908e,_0x2b5a64);}$gamePlayer[_0x21503a(0x597)]();}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x93c),_0x3242d4=>{const _0x484593=_0xe55837;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x484593(0x313)](_0x3242d4,_0x3242d4);const _0xe44bf2=VisuMZ[_0x484593(0x67d)](_0x3242d4[_0x484593(0xa15)]);for(const _0x3144fc of _0xe44bf2){if(!_0x3144fc)continue;_0x3144fc[_0x484593(0x771)]('noise');}$gamePlayer[_0x484593(0x597)]();}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x129),_0x314e5f=>{const _0xa5aff4=_0xe55837;if(!Imported[_0xa5aff4(0x42a)])return;if(!SceneManager[_0xa5aff4(0x1d0)]())return;VisuMZ[_0xa5aff4(0x313)](_0x314e5f,_0x314e5f);const _0x3404f3=VisuMZ[_0xa5aff4(0x67d)](_0x314e5f[_0xa5aff4(0xa15)]),_0x514159='tv';for(const _0x28d5f4 of _0x3404f3){if(_0xa5aff4(0x791)===_0xa5aff4(0x827)){function _0x2668af(){const _0x1b1fd0=_0xa5aff4;if(!_0x5c8124[_0x1b1fd0(0x22a)]())return;const _0x2bc290=this['battler']();if(!_0x2bc290)return;_0x2bc290['startOpacity'](_0x4ff394,_0x33cf42,_0x4b0372);}}else{if(!_0x28d5f4)continue;_0x28d5f4[_0xa5aff4(0x4f3)](_0x514159,_0x314e5f);}}$gamePlayer[_0xa5aff4(0x597)]();}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Horror_TVRemove',_0x49da76=>{const _0x47eb04=_0xe55837;if(!Imported[_0x47eb04(0x42a)])return;if(!SceneManager[_0x47eb04(0x1d0)]())return;VisuMZ[_0x47eb04(0x313)](_0x49da76,_0x49da76);const _0x3ea536=VisuMZ[_0x47eb04(0x67d)](_0x49da76['Targets']);for(const _0x2bf41f of _0x3ea536){if(!_0x2bf41f)continue;_0x2bf41f[_0x47eb04(0x771)]('tv');}$gamePlayer[_0x47eb04(0x597)]();}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0xa39),_0x3239e7=>{const _0x46923c=_0xe55837;if(!SceneManager[_0x46923c(0x1d0)]())return;if(!Imported[_0x46923c(0x628)])return;const _0x5db13e=SceneManager[_0x46923c(0x1c8)][_0x46923c(0x54d)];if(!_0x5db13e)return;VisuMZ[_0x46923c(0x313)](_0x3239e7,_0x3239e7);const _0x2bf386=_0x3239e7[_0x46923c(0x70f)]||0x1,_0x4e24d0=_0x3239e7[_0x46923c(0x769)]||0x1,_0x4edb0b=_0x3239e7['EasingType']||_0x46923c(0x837);_0x5db13e['setupRgbSplitImpactFilter'](_0x2bf386,_0x4e24d0,_0x4edb0b);}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Impact_MotionBlurScreen',_0x2a498c=>{const _0x53e695=_0xe55837;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x53e695(0x628)])return;const _0x105e36=SceneManager[_0x53e695(0x1c8)][_0x53e695(0x54d)];if(!_0x105e36)return;VisuMZ[_0x53e695(0x313)](_0x2a498c,_0x2a498c);const _0x9ca475=Number(_0x2a498c[_0x53e695(0x70b)])||0x0,_0x4cee97=Number(_0x2a498c[_0x53e695(0xc4)]),_0x225c99=_0x2a498c['Duration']||0x1,_0x32872a=_0x2a498c[_0x53e695(0x76f)]||_0x53e695(0x837);_0x105e36[_0x53e695(0x48a)](_0x9ca475,_0x4cee97,_0x225c99,_0x32872a);}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x137),_0x5a98ea=>{const _0x19a55c=_0xe55837;if(!SceneManager[_0x19a55c(0x1d0)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x365a58=SceneManager[_0x19a55c(0x1c8)]['_spriteset'];if(!_0x365a58)return;VisuMZ[_0x19a55c(0x313)](_0x5a98ea,_0x5a98ea);const _0x1604b4=Number(_0x5a98ea['Angle'])||0x0,_0x742077=Number(_0x5a98ea[_0x19a55c(0xc4)]),_0x27d8d2=_0x5a98ea[_0x19a55c(0x769)]||0x1,_0x300eae=_0x5a98ea[_0x19a55c(0x76f)]||_0x19a55c(0x837),_0x1c232f=VisuMZ[_0x19a55c(0x67d)](_0x5a98ea[_0x19a55c(0xa15)]);for(const _0xe5419b of _0x1c232f){if(_0x19a55c(0x332)==='zYyvG'){if(!_0xe5419b)continue;if(!_0xe5419b[_0x19a55c(0xe1)]())continue;_0xe5419b['battler']()[_0x19a55c(0x48a)](_0x1604b4,_0x742077,_0x27d8d2,_0x300eae);}else{function _0x3ca038(){_0x1c241f['name']=_0x15ddb4(_0x4a0552['$1']);}}}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x115),_0x1665f4=>{const _0x21a13a=_0xe55837;if(!SceneManager[_0x21a13a(0x1d0)]())return;if(!Imported[_0x21a13a(0x628)])return;VisuMZ['ConvertParams'](_0x1665f4,_0x1665f4);const _0x2a5ee7={'delay':_0x1665f4[_0x21a13a(0x885)],'duration':_0x1665f4[_0x21a13a(0x82f)],'hue':_0x1665f4[_0x21a13a(0x43b)],'opacityStart':_0x1665f4[_0x21a13a(0x493)],'tone':_0x1665f4['tone'],'visible':!![]},_0x5e0bef=VisuMZ['CreateActionSequenceTargets'](_0x1665f4['Targets']);for(const _0x3711c1 of _0x5e0bef){if(!_0x3711c1)continue;_0x3711c1['setBattlerMotionTrailData'](_0x2a5ee7);}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Impact_MotionTrailRemove',_0x4bdec1=>{const _0x595656=_0xe55837;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x595656(0x313)](_0x4bdec1,_0x4bdec1);const _0x4ea408=VisuMZ[_0x595656(0x67d)](_0x4bdec1[_0x595656(0xa15)]);for(const _0x5671cf of _0x4ea408){if(!_0x5671cf)continue;_0x5671cf[_0x595656(0x38a)]();}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x20a),_0x5e34a8=>{const _0x5c6a19=_0xe55837;if(!Imported[_0x5c6a19(0x628)])return;const _0x5e6370=SceneManager[_0x5c6a19(0x1c8)][_0x5c6a19(0x54d)];if(!_0x5e6370)return;VisuMZ['ConvertParams'](_0x5e34a8,_0x5e34a8);const _0x1768f8=_0x5e34a8['X']||0x0,_0x3c797f=_0x5e34a8['Y']||0x0,_0x3bdcd9=_0x5e34a8[_0x5c6a19(0x131)]||0x0,_0x52cd33=_0x5e34a8['Wave']||0x0,_0x4b4fa6=_0x5e34a8[_0x5c6a19(0x769)]||0x1;_0x5e6370['setupShockwaveImpactFilter'](_0x1768f8,_0x3c797f,_0x3bdcd9,_0x52cd33,_0x4b4fa6);}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x551),_0x3efdc1=>{const _0x76005d=_0xe55837;if(!SceneManager[_0x76005d(0x1d0)]())return;if(!Imported[_0x76005d(0x628)])return;const _0x2e3417=SceneManager[_0x76005d(0x1c8)]['_spriteset'];if(!_0x2e3417)return;VisuMZ[_0x76005d(0x313)](_0x3efdc1,_0x3efdc1);const _0xbebab6=VisuMZ[_0x76005d(0x67d)](_0x3efdc1[_0x76005d(0xa15)]),_0x8f2553=_0x3efdc1[_0x76005d(0x973)],_0x355719=_0x3efdc1[_0x76005d(0x667)]||0x0,_0x367049=_0x3efdc1[_0x76005d(0x49e)]||0x0,_0x15e1f7=_0x3efdc1[_0x76005d(0x131)]||0x0,_0x2d3b59=_0x3efdc1[_0x76005d(0xd1)]||0x0,_0x10663a=_0x3efdc1['Duration']||0x1;for(const _0x14ec74 of _0xbebab6){if(!_0x14ec74)continue;if(!_0x14ec74[_0x76005d(0xe1)]())continue;const _0x525779=_0x14ec74[_0x76005d(0xe1)]();let _0x596a67=_0x525779[_0x76005d(0xa0)],_0x441a75=_0x525779['_baseY'];_0x596a67+=(Graphics['width']-Graphics[_0x76005d(0x386)])/0x2,_0x441a75+=(Graphics[_0x76005d(0x97c)]-Graphics[_0x76005d(0x5c8)])/0x2;if(_0x8f2553[_0x76005d(0x1c3)](/front/i))_0x596a67+=(_0x14ec74[_0x76005d(0xa0a)]()?0x1:-0x1)*_0x525779[_0x76005d(0x56b)]()/0x2;else _0x8f2553[_0x76005d(0x1c3)](/back/i)&&(_0x596a67+=(_0x14ec74[_0x76005d(0xa0a)]()?-0x1:0x1)*_0x525779['mainSpriteWidth']()/0x2);if(_0x8f2553[_0x76005d(0x1c3)](/head/i))_0x441a75-=_0x525779[_0x76005d(0x202)]();else{if(_0x8f2553[_0x76005d(0x1c3)](/center/i)){if('wPUHP'==='xpJUq'){function _0x5c821b(){const _0x419449=_0x76005d;this[_0x419449(0x949)]=0x0;}}else _0x441a75-=_0x525779[_0x76005d(0x202)]()/0x2;}}_0x596a67+=_0x355719,_0x441a75+=_0x367049,_0x2e3417[_0x76005d(0x4df)](_0x596a67,_0x441a75,_0x15e1f7,_0x2d3b59,_0x10663a);}}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x906),_0x1d76fb=>{const _0xb4af6e=_0xe55837;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xb4af6e(0x628)])return;const _0x3ec947=SceneManager['_scene']['_spriteset'];if(!_0x3ec947)return;VisuMZ['ConvertParams'](_0x1d76fb,_0x1d76fb);const _0x1eff90=VisuMZ[_0xb4af6e(0x67d)](_0x1d76fb['Targets']),_0xb5ad1c=_0x1d76fb[_0xb4af6e(0x973)],_0x3b5a71=_0x1d76fb['OffsetX']||0x0,_0x40c5af=_0x1d76fb[_0xb4af6e(0x49e)]||0x0,_0x2981a0=_0x1d76fb[_0xb4af6e(0x131)]||0x0,_0xaa6e6=_0x1d76fb[_0xb4af6e(0xd1)]||0x0,_0xc6a1c8=_0x1d76fb[_0xb4af6e(0x769)]||0x1,_0x5b41a8=Math[_0xb4af6e(0x6a9)](..._0x1eff90[_0xb4af6e(0x584)](_0x1882ad=>_0x1882ad[_0xb4af6e(0xe1)]()[_0xb4af6e(0xa0)]-_0x1882ad['battler']()['mainSpriteWidth']()/0x2)),_0x29d64b=Math['max'](..._0x1eff90[_0xb4af6e(0x584)](_0x1fefd5=>_0x1fefd5[_0xb4af6e(0xe1)]()['_baseX']+_0x1fefd5[_0xb4af6e(0xe1)]()[_0xb4af6e(0x56b)]()/0x2)),_0x216e78=Math['min'](..._0x1eff90[_0xb4af6e(0x584)](_0x1075be=>_0x1075be[_0xb4af6e(0xe1)]()['_baseY']-_0x1075be[_0xb4af6e(0xe1)]()[_0xb4af6e(0x202)]())),_0x416bff=Math[_0xb4af6e(0x220)](..._0x1eff90[_0xb4af6e(0x584)](_0x253308=>_0x253308['battler']()[_0xb4af6e(0x937)])),_0x57b1c2=_0x1eff90[_0xb4af6e(0x49d)](_0x1ba003=>_0x1ba003['isActor']())[_0xb4af6e(0x4c5)],_0x294a1f=_0x1eff90[_0xb4af6e(0x49d)](_0x35f108=>_0x35f108[_0xb4af6e(0xa0a)]())[_0xb4af6e(0x4c5)];let _0x331777=0x0,_0x3ebe22=0x0;if(_0xb5ad1c[_0xb4af6e(0x1c3)](/front/i)){if(_0xb4af6e(0x5ee)===_0xb4af6e(0x3d1)){function _0x117b19(){const _0x43ed81=_0xb4af6e;return _0x941bcd['BattleCore'][_0x43ed81(0x108)]['Actor']['SmoothImage'];}}else _0x331777=_0x57b1c2>=_0x294a1f?_0x5b41a8:_0x29d64b;}else{if(_0xb5ad1c[_0xb4af6e(0x1c3)](/middle/i))_0x331777=(_0x5b41a8+_0x29d64b)/0x2,melee=-0x1;else{if(_0xb5ad1c['match'](/back/i)){if(_0xb4af6e(0x7a1)===_0xb4af6e(0x218)){function _0x3fa940(){const _0x48e008=_0xb4af6e;let _0x28983a=0x0;this[_0x48e008(0x31e)]['length']>0x0&&(_0x28983a=this[_0x48e008(0x31e)][this['_baseLineStack'][_0x48e008(0x4c5)]-0x1]),this[_0x48e008(0x87b)][_0x48e008(0x4c5)]>_0x28983a?this[_0x48e008(0xea)]():this[_0x48e008(0x996)]();}}else _0x331777=_0x57b1c2>=_0x294a1f?_0x29d64b:_0x5b41a8;}}}if(_0xb5ad1c[_0xb4af6e(0x1c3)](/head/i))_0x3ebe22=_0x216e78;else{if(_0xb5ad1c[_0xb4af6e(0x1c3)](/center/i))_0x3ebe22=(_0x216e78+_0x416bff)/0x2;else _0xb5ad1c[_0xb4af6e(0x1c3)](/base/i)&&(_0x3ebe22=_0x416bff);}_0x331777+=(Graphics[_0xb4af6e(0x124)]-Graphics['boxWidth'])/0x2,_0x3ebe22+=(Graphics[_0xb4af6e(0x97c)]-Graphics[_0xb4af6e(0x5c8)])/0x2,_0x331777+=_0x3b5a71,_0x3ebe22+=_0x40c5af,_0x3ec947[_0xb4af6e(0x4df)](_0x331777,_0x3ebe22,_0x2981a0,_0xaa6e6,_0xc6a1c8);}),PluginManager['registerCommand'](pluginData['name'],_0xe55837(0x364),_0x5186ad=>{const _0x18e390=_0xe55837;if(!Imported[_0x18e390(0x628)])return;const _0x24f3f9=SceneManager[_0x18e390(0x1c8)]['_spriteset'];if(!_0x24f3f9)return;VisuMZ[_0x18e390(0x313)](_0x5186ad,_0x5186ad);const _0x42a961=_0x5186ad['X']||0x0,_0x2e86e2=_0x5186ad['Y']||0x0,_0x3cbb40=_0x5186ad[_0x18e390(0x665)]||0x0,_0x1bb5d4=_0x5186ad[_0x18e390(0x69e)]||0x0,_0x5c2718=_0x5186ad[_0x18e390(0x769)]||0x1,_0x5d557f=_0x5186ad[_0x18e390(0x76f)]||_0x18e390(0x837);_0x24f3f9[_0x18e390(0x4b8)](_0x3cbb40,_0x42a961,_0x2e86e2,_0x1bb5d4,_0x5c2718,_0x5d557f);}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x434abf=>{const _0x82ea3f=_0xe55837;if(!Imported[_0x82ea3f(0x628)])return;const _0x3f9958=SceneManager['_scene']['_spriteset'];if(!_0x3f9958)return;VisuMZ['ConvertParams'](_0x434abf,_0x434abf);const _0x453011=VisuMZ[_0x82ea3f(0x67d)](_0x434abf[_0x82ea3f(0xa15)]),_0x41bc5f=_0x434abf['TargetLocation'],_0x25537f=_0x434abf[_0x82ea3f(0x667)]||0x0,_0x29d8d9=_0x434abf[_0x82ea3f(0x49e)]||0x0,_0xa8e47b=_0x434abf[_0x82ea3f(0x665)]||0x0,_0x2c4123=_0x434abf[_0x82ea3f(0x69e)]||0x0,_0xf3d09b=_0x434abf[_0x82ea3f(0x769)]||0x1,_0x2aece3=_0x434abf['EasingType']||_0x82ea3f(0x837),_0x56b971=Math[_0x82ea3f(0x6a9)](..._0x453011[_0x82ea3f(0x584)](_0x4d91b6=>_0x4d91b6[_0x82ea3f(0xe1)]()['_baseX']-_0x4d91b6['battler']()[_0x82ea3f(0x56b)]()/0x2)),_0x43340c=Math[_0x82ea3f(0x220)](..._0x453011['map'](_0x12c6c7=>_0x12c6c7[_0x82ea3f(0xe1)]()[_0x82ea3f(0xa0)]+_0x12c6c7[_0x82ea3f(0xe1)]()[_0x82ea3f(0x56b)]()/0x2)),_0x55d565=Math[_0x82ea3f(0x6a9)](..._0x453011[_0x82ea3f(0x584)](_0x3c1baa=>_0x3c1baa[_0x82ea3f(0xe1)]()['_baseY']-_0x3c1baa['battler']()[_0x82ea3f(0x202)]())),_0x171ba7=Math[_0x82ea3f(0x220)](..._0x453011[_0x82ea3f(0x584)](_0x14e76c=>_0x14e76c[_0x82ea3f(0xe1)]()['_baseY'])),_0x38be83=_0x453011[_0x82ea3f(0x49d)](_0x90ffc=>_0x90ffc[_0x82ea3f(0x107)]())['length'],_0x5397f3=_0x453011[_0x82ea3f(0x49d)](_0x13da52=>_0x13da52[_0x82ea3f(0xa0a)]())['length'];let _0x513630=0x0,_0x500f4b=0x0;if(_0x41bc5f['match'](/front/i))_0x513630=_0x38be83>=_0x5397f3?_0x56b971:_0x43340c;else{if(_0x41bc5f[_0x82ea3f(0x1c3)](/middle/i))_0x513630=(_0x56b971+_0x43340c)/0x2,melee=-0x1;else{if(_0x41bc5f['match'](/back/i)){if('wPqVA'===_0x82ea3f(0x333)){function _0x23c69b(){const _0x15142e=_0x82ea3f;_0x5b7d2f=_0x192dcb[_0x15142e(0x124)]/_0x42098d[_0x15142e(0x629)]()['length'],_0x5e62a5*=_0x4a24a0,_0x40ae39+=_0x58a2d3[_0x15142e(0x124)]/_0x59b7cc['battleMembers']()[_0x15142e(0x4c5)]/0x2;}}else _0x513630=_0x38be83>=_0x5397f3?_0x43340c:_0x56b971;}}}if(_0x41bc5f[_0x82ea3f(0x1c3)](/head/i))_0x500f4b=_0x55d565;else{if(_0x41bc5f['match'](/center/i)){if(_0x82ea3f(0x128)!==_0x82ea3f(0x293))_0x500f4b=(_0x55d565+_0x171ba7)/0x2;else{function _0x7bca(){return![];}}}else _0x41bc5f[_0x82ea3f(0x1c3)](/base/i)&&(_0x500f4b=_0x171ba7);}_0x513630+=(Graphics[_0x82ea3f(0x124)]-Graphics[_0x82ea3f(0x386)])/0x2,_0x500f4b+=(Graphics[_0x82ea3f(0x97c)]-Graphics[_0x82ea3f(0x5c8)])/0x2,_0x513630+=_0x25537f,_0x500f4b+=_0x29d8d9,_0x3f9958[_0x82ea3f(0x4b8)](_0xa8e47b,_0x513630,_0x500f4b,_0x2c4123,_0xf3d09b,_0x2aece3);}),PluginManager[_0xe55837(0x74c)](pluginData['name'],'ActSeq_Mechanics_ActionEffect',_0x511232=>{const _0xb9aa1a=_0xe55837;if(!SceneManager[_0xb9aa1a(0x1d0)]())return;VisuMZ[_0xb9aa1a(0x313)](_0x511232,_0x511232);const _0x2e6b14=$gameTemp[_0xb9aa1a(0x534)](),_0x5ea5ed=BattleManager['_action'],_0x225ed8=BattleManager[_0xb9aa1a(0xec)],_0x53a53a=BattleManager[_0xb9aa1a(0xa2)];if(!_0x2e6b14||!_0x5ea5ed||!_0x225ed8)return;if(!_0x5ea5ed[_0xb9aa1a(0xa24)]())return;const _0x2c1b88=VisuMZ['CreateActionSequenceTargets'](_0x511232[_0xb9aa1a(0xa15)]);for(const _0x46ae78 of _0x2c1b88){if(_0xb9aa1a(0x8c0)!=='KhjUi'){function _0x27443f(){const _0x2d4fb2=_0xb9aa1a;this[_0x2d4fb2(0x881)]=new _0x43ec58(0x1,0x1),_0x1a9771[_0x2d4fb2(0x22a)]()?this[_0x2d4fb2(0x174)]['bitmap']=_0x5721db[_0x2d4fb2(0x6a2)](_0x2bafc9):this[_0x2d4fb2(0x174)][_0x2d4fb2(0x881)]=_0x591b8f[_0x2d4fb2(0x600)](_0x4a3a3e),this['_mainSprite']['bitmap']['addLoadListener'](this[_0x2d4fb2(0x314)]['bind'](this));}}else{if(!_0x46ae78)continue;_0x53a53a[_0xb9aa1a(0x30a)](_0xb9aa1a(0x9e2),_0x225ed8,_0x46ae78);}}_0x2e6b14[_0xb9aa1a(0x78a)]('battlelog');}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x4cc),_0x5329d3=>{const _0xdb9a04=_0xe55837;if(!SceneManager[_0xdb9a04(0x1d0)]())return;VisuMZ[_0xdb9a04(0x313)](_0x5329d3,_0x5329d3);const _0x53b464=[_0xdb9a04(0x68e),'MAXMP',_0xdb9a04(0x2bc),_0xdb9a04(0x62c),_0xdb9a04(0x18d),_0xdb9a04(0x39a),_0xdb9a04(0x4d6),_0xdb9a04(0x3b6)],_0x1fad47=_0x5329d3[_0xdb9a04(0x5c6)],_0x56e06=_0x5329d3['Debuffs'],_0x49071c=_0x5329d3[_0xdb9a04(0xae)],_0x26dbdc=VisuMZ['CreateActionSequenceTargets'](_0x5329d3[_0xdb9a04(0xa15)]);for(const _0x7bcad of _0x26dbdc){if(!_0x7bcad)continue;for(const _0x2229c7 of _0x1fad47){if(_0xdb9a04(0x7ea)!=='mhOZm'){function _0x582043(){const _0x1837cf=_0xdb9a04;_0x402562[_0x1837cf(0x152)]();}}else{const _0x32ac35=_0x53b464[_0xdb9a04(0x660)](_0x2229c7['toUpperCase']()[_0xdb9a04(0x1ee)]());if(_0x32ac35>=0x0&&_0x32ac35<=0x7){if(_0xdb9a04(0x5e5)===_0xdb9a04(0x8d9)){function _0x197f98(){const _0x431832=_0xdb9a04;if(this[_0x431832(0x8aa)]!==_0x431832(0x4d5))return this['customDamageFormula'](_0xaa2f92);else return _0x49acb1['getDamageStyle'](this[_0x431832(0xa24)]())==='MANUAL'?_0x4063c2[_0x431832(0x278)][_0x431832(0x811)]['call'](this,_0x2d8ec3):this[_0x431832(0x369)](_0x501f12);}}else _0x7bcad[_0xdb9a04(0x7af)](_0x32ac35,_0x49071c);}}}for(const _0x12d446 of _0x56e06){if(_0xdb9a04(0x67c)===_0xdb9a04(0x67c)){const _0x29460a=_0x53b464[_0xdb9a04(0x660)](_0x12d446[_0xdb9a04(0x448)]()['trim']());if(_0x29460a>=0x0&&_0x29460a<=0x7){if('eMWPB'==='eMWPB')_0x7bcad[_0xdb9a04(0x241)](_0x29460a,_0x49071c);else{function _0x88ab5c(){const _0x4920e6=_0xdb9a04;this[_0x4920e6(0x19f)](_0x185843,_0x2eeedb,_0x8bc401);}}}}else{function _0x548ac4(){return[_0x27ffca];}}}}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x593),_0xdca9e0=>{const _0x1f7010=_0xe55837;if(!SceneManager[_0x1f7010(0x1d0)]())return;VisuMZ[_0x1f7010(0x313)](_0xdca9e0,_0xdca9e0);const _0x573b8f=_0xdca9e0[_0x1f7010(0x635)],_0x2a80e4=VisuMZ[_0x1f7010(0x67d)](_0xdca9e0['Targets']);for(const _0x467153 of _0x2a80e4){if(!_0x467153)continue;for(const _0xd5813 of _0x573b8f){_0x467153[_0x1f7010(0x947)](_0xd5813);}}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x4a1),_0x440138=>{const _0x4c908d=_0xe55837;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4c908d(0x313)](_0x440138,_0x440138);const _0x390eae=BattleManager[_0x4c908d(0x815)],_0x57534e={'arPenRate':_0x440138[_0x4c908d(0xa0b)],'arPenFlat':_0x440138[_0x4c908d(0xa40)],'arRedRate':_0x440138[_0x4c908d(0x84d)],'arRedFlat':_0x440138['ArRedFlat']};_0x390eae[_0x4c908d(0x24f)]=_0x57534e;}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Mechanics_AnalyzeWeakness',_0x53d548=>{const _0x27e169=_0xe55837;if(!SceneManager[_0x27e169(0x1d0)]())return;if(!Imported[_0x27e169(0x7bc)])return;VisuMZ[_0x27e169(0x313)](_0x53d548,_0x53d548);const _0x4dee52=VisuMZ['CreateActionSequenceTargets'](_0x53d548['Targets']),_0x8fe41a=_0x53d548[_0x27e169(0x3f9)]||0x1;for(const _0x402f21 of _0x4dee52){if(!_0x402f21)continue;if(!_0x402f21[_0x27e169(0xa0a)]())continue;_0x402f21[_0x27e169(0x6ca)](_0x8fe41a);}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x4e4),_0x498383=>{const _0x590a04=_0xe55837;if(!SceneManager[_0x590a04(0x1d0)]())return;if(!Imported[_0x590a04(0x159)])return;VisuMZ[_0x590a04(0x313)](_0x498383,_0x498383);const _0x5a2f8a=VisuMZ[_0x590a04(0x67d)](_0x498383['Targets']),_0x4b740d=_0x498383[_0x590a04(0x37f)],_0x13f289=_0x498383['ChargeRate'],_0x19895b=_0x498383[_0x590a04(0x806)];for(const _0x22a6c0 of _0x5a2f8a){if(!_0x22a6c0)continue;if(_0x22a6c0[_0x590a04(0x281)]())_0x22a6c0[_0x590a04(0x2a9)](_0x4b740d);else{if(_0x22a6c0[_0x590a04(0x588)]()){_0x22a6c0[_0x590a04(0x60f)](_0x13f289);if(_0x19895b)_0x22a6c0['atbInterrupt']();}}}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x109),_0x4bcc0f=>{const _0x29c9f9=_0xe55837;if(!SceneManager[_0x29c9f9(0x1d0)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0x29c9f9(0x313)](_0x4bcc0f,_0x4bcc0f);const _0x55a367=VisuMZ[_0x29c9f9(0x67d)](_0x4bcc0f['Targets']),_0x266f2e=_0x4bcc0f[_0x29c9f9(0x64a)];for(const _0x5f5b08 of _0x55a367){if(!_0x5f5b08)continue;_0x5f5b08['gainStoredBoostPoints'](_0x266f2e);}}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x35e),_0x40a14b=>{const _0x2b8ea5=_0xe55837;if(!SceneManager[_0x2b8ea5(0x1d0)]())return;if(!Imported[_0x2b8ea5(0xa4e)])return;if(!BattleManager[_0x2b8ea5(0xec)])return;VisuMZ[_0x2b8ea5(0x313)](_0x40a14b,_0x40a14b);const _0x33b9f4=_0x40a14b['VariableID'];$gameVariables[_0x2b8ea5(0x649)](_0x33b9f4,BattleManager[_0x2b8ea5(0xec)]['toUseBoostPoints']());}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x91f),_0x3fa503=>{const _0x1c95da=_0xe55837;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1c95da(0x374)])return;VisuMZ[_0x1c95da(0x313)](_0x3fa503,_0x3fa503);const _0x2c2bb5=VisuMZ[_0x1c95da(0x67d)](_0x3fa503[_0x1c95da(0xa15)]),_0x58ebde=_0x3fa503[_0x1c95da(0x5b4)];for(const _0x5b3acf of _0x2c2bb5){if(!_0x5b3acf)continue;if(_0x5b3acf[_0x1c95da(0x482)]())continue;if(!_0x5b3acf[_0x1c95da(0x232)]())continue;_0x5b3acf[_0x1c95da(0x9dc)](_0x58ebde);}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x75a),_0xd809c=>{const _0x385c07=_0xe55837;if(!SceneManager[_0x385c07(0x1d0)]())return;if(!Imported[_0x385c07(0x374)])return;VisuMZ[_0x385c07(0x313)](_0xd809c,_0xd809c);const _0x8b761=VisuMZ[_0x385c07(0x67d)](_0xd809c['Targets']);for(const _0x1ab95d of _0x8b761){if(!_0x1ab95d)continue;if(_0x1ab95d['isBreakStunned']())continue;if(!_0x1ab95d[_0x385c07(0x232)]())continue;_0x1ab95d[_0x385c07(0x3d4)]();}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x4ae),_0x323fa3=>{const _0x2038d0=_0xe55837;if(!SceneManager[_0x2038d0(0x1d0)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;VisuMZ[_0x2038d0(0x313)](_0x323fa3,_0x323fa3);const _0x4737d2=VisuMZ[_0x2038d0(0x67d)](_0x323fa3[_0x2038d0(0xa15)]),_0x2e2ee3=_0x323fa3[_0x2038d0(0x535)];for(const _0x3a17a2 of _0x4737d2){if(!_0x3a17a2)continue;_0x3a17a2[_0x2038d0(0xf1)](_0x2e2ee3);}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x957),_0x35e999=>{const _0x110b6e=_0xe55837;if(!SceneManager[_0x110b6e(0x1d0)]())return;VisuMZ['ConvertParams'](_0x35e999,_0x35e999);const _0x462c5e=$gameTemp[_0x110b6e(0x534)](),_0x500989=BattleManager[_0x110b6e(0x815)],_0x4ec7d5=BattleManager[_0x110b6e(0xec)];if(!_0x462c5e||!_0x500989||!_0x4ec7d5)return;if(!_0x500989[_0x110b6e(0xa24)]())return;const _0x174f8b=VisuMZ[_0x110b6e(0x67d)](_0x35e999[_0x110b6e(0xa15)]);for(const _0x18e6f4 of _0x174f8b){if(!_0x18e6f4)continue;if(_0x35e999[_0x110b6e(0x98c)]){if(_0x110b6e(0x29c)!==_0x110b6e(0x29c)){function _0x18aa6b(){const _0x48d998=_0x110b6e;if(!_0x48aaee['VisuMZ_3_ActSeqImpact'])return;const _0x345f91=_0x2c1a44[_0x48d998(0x1c8)][_0x48d998(0x54d)];if(!_0x345f91)return;_0x5adb9b['ConvertParams'](_0xf87106,_0x12b028);const _0x3de176=_0x685e4c['X']||0x0,_0x122ad2=_0x589fec['Y']||0x0,_0x3ba5c5=_0x214b3b[_0x48d998(0x131)]||0x0,_0x53d2f3=_0x3dc503[_0x48d998(0xd1)]||0x0,_0x1bc3e7=_0x4dfc84['Duration']||0x1;_0x345f91[_0x48d998(0x4df)](_0x3de176,_0x122ad2,_0x3ba5c5,_0x53d2f3,_0x1bc3e7);}}else _0x18e6f4[_0x110b6e(0xa9)](),_0x18e6f4['addState'](_0x18e6f4[_0x110b6e(0x5b3)]());}_0x18e6f4[_0x110b6e(0x859)]()&&_0x18e6f4[_0x110b6e(0x408)]();}_0x462c5e[_0x110b6e(0x78a)](_0x110b6e(0x869));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x800),_0x559eea=>{const _0x9bade=_0xe55837;if(!SceneManager[_0x9bade(0x1d0)]())return;if(!Imported[_0x9bade(0x39b)])return;VisuMZ[_0x9bade(0x313)](_0x559eea,_0x559eea);const _0x3ae291=VisuMZ[_0x9bade(0x67d)](_0x559eea[_0x9bade(0xa15)]),_0x463560=_0x559eea['ChangeOrderBy'];for(const _0x5bb0c9 of _0x3ae291){if(_0x9bade(0x349)==='PnPHI'){function _0x115690(){const _0x4ffdb2=_0x9bade,_0x410e96=_0x2d4012(_0x1afac1['$1']);return[_0x3aa53c[_0x4ffdb2(0x105)]()['members']()[_0x410e96]];}}else{if(!_0x5bb0c9)continue;_0x5bb0c9['changeTurnOrderByCTB'](_0x463560);}}}),PluginManager[_0xe55837(0x74c)](pluginData['name'],'ActSeq_Mechanics_CtbSpeed',_0x1dc58a=>{const _0xca074b=_0xe55837;if(!SceneManager[_0xca074b(0x1d0)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;VisuMZ[_0xca074b(0x313)](_0x1dc58a,_0x1dc58a);const _0x283416=VisuMZ[_0xca074b(0x67d)](_0x1dc58a['Targets']),_0x5aec0f=_0x1dc58a['ChargeRate'],_0x4302cd=_0x1dc58a[_0xca074b(0x37f)];for(const _0x5f221f of _0x283416){if(!_0x5f221f)continue;if(_0x5f221f[_0xca074b(0x75d)]===_0xca074b(0x242))_0x5f221f[_0xca074b(0x845)](_0x5aec0f);else{if(_0x5f221f[_0xca074b(0x75d)]==='casting'){if(_0xca074b(0x113)==='QphzX')_0x5f221f[_0xca074b(0x51c)](_0x4302cd);else{function _0x1985f9(){const _0xc7d194=_0xca074b;if(!_0x45061f[_0xc7d194(0x1d0)]())return;_0xc40bd7[_0xc7d194(0x313)](_0x302bd3,_0x489416);const _0x3c9102=_0xa9b78f[_0xc7d194(0x815)],_0x1a2897={'criticalHitRate':_0x58a66f[_0xc7d194(0x73a)],'criticalHitFlat':_0x50a645['CriticalHitFlat'],'criticalDmgRate':_0x3fa966[_0xc7d194(0x655)],'criticalDmgFlat':_0xfbce64[_0xc7d194(0x3fa)],'damageRate':_0x4645f1['DamageRate'],'damageFlat':_0xe66d6f['DamageFlat'],'hitRate':_0x381e3e['HitRate'],'hitFlat':_0x57031b['HitFlat']};_0x3c9102['_multipliers']=_0x1a2897;}}}}}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x87a),_0x1f1904=>{const _0x4a3118=_0xe55837;if(!SceneManager[_0x4a3118(0x1d0)]())return;VisuMZ['ConvertParams'](_0x1f1904,_0x1f1904);const _0x580abe=BattleManager[_0x4a3118(0x815)];if(!_0x580abe)return;let _0x3a0d0a=_0x1f1904[_0x4a3118(0x946)];_0x580abe[_0x4a3118(0x867)](_0x3a0d0a);}),PluginManager[_0xe55837(0x74c)](pluginData['name'],'ActSeq_Mechanics_DamagePopup',_0xe89dd9=>{const _0x1f21b2=_0xe55837;if(!SceneManager[_0x1f21b2(0x1d0)]())return;VisuMZ['ConvertParams'](_0xe89dd9,_0xe89dd9);const _0xf00dd3=VisuMZ[_0x1f21b2(0x67d)](_0xe89dd9[_0x1f21b2(0xa15)]);for(const _0x25337a of _0xf00dd3){if(_0x1f21b2(0x1cd)===_0x1f21b2(0x394)){function _0xcd010b(){const _0x50c9cb=_0x1f21b2;this[_0x50c9cb(0x41b)](),this[_0x50c9cb(0xa3c)]();}}else{if(!_0x25337a)continue;if(_0x25337a[_0x1f21b2(0x6ac)]())_0x25337a['startDamagePopup']();}}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x5d5),_0x3a3a92=>{const _0xfb5fb0=_0xe55837;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xfb5fb0(0x313)](_0x3a3a92,_0x3a3a92);const _0x139fb3=$gameTemp[_0xfb5fb0(0x534)](),_0x2ccfa1=BattleManager[_0xfb5fb0(0xec)],_0x33eb32=_0x3a3a92[_0xfb5fb0(0x586)];if(!_0x139fb3)return;if(!_0x2ccfa1)return;_0x2ccfa1&&_0x2ccfa1['isDead']()&&_0x33eb32[_0xfb5fb0(0x448)]()['trim']()!==_0xfb5fb0(0xa1)&&_0x139fb3['command119']([_0x33eb32]);}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0xf6),_0x1bda5b=>{const _0x5b4de5=_0xe55837;if(!SceneManager[_0x5b4de5(0x1d0)]())return;if(!Imported[_0x5b4de5(0xc0)])return;VisuMZ[_0x5b4de5(0x313)](_0x1bda5b,_0x1bda5b);const _0x5f2418=_0x1bda5b[_0x5b4de5(0x3a7)];if(BattleManager['_subject']){if(_0x5b4de5(0x414)===_0x5b4de5(0x7e1)){function _0x5c8aeb(){const _0x5c7bff=_0x5b4de5,_0x18eeea=_0x590664(_0x5cabba['$1'])[_0x5c7bff(0x1ee)](),_0x1394b6=_0x599e35(_0x74ea29['$2']);_0x4488fd[_0x18eeea]=_0x1394b6,_0x2fd720+=_0x1394b6;}}else BattleManager[_0x5b4de5(0xec)]['friendsUnit']()['gainCurrentActionsFTB'](_0x5f2418);}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x310),_0x5e136d=>{const _0x4d4f83=_0xe55837;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4d4f83(0x313)](_0x5e136d,_0x5e136d);const _0x36285b=VisuMZ[_0x4d4f83(0x67d)](_0x5e136d[_0x4d4f83(0xa15)]),_0x58a4c4=_0x5e136d[_0x4d4f83(0x7f2)],_0x2982f1=_0x5e136d['HP_Flat'],_0x3cad09=_0x5e136d['MP_Rate'],_0x3530a7=_0x5e136d['MP_Flat'],_0x15bb4c=_0x5e136d['TP_Rate'],_0x2d2cda=_0x5e136d[_0x4d4f83(0x778)],_0x101c33=_0x5e136d[_0x4d4f83(0x657)];for(const _0x229748 of _0x36285b){if(!_0x229748)continue;const _0x528583=_0x229748[_0x4d4f83(0x453)](),_0x4372c2=Math[_0x4d4f83(0x498)](_0x58a4c4*_0x229748[_0x4d4f83(0x5e4)]+_0x2982f1),_0x4df883=Math[_0x4d4f83(0x498)](_0x3cad09*_0x229748[_0x4d4f83(0xa32)]+_0x3530a7),_0x157703=Math['round'](_0x15bb4c*_0x229748['maxTp']()+_0x2d2cda);if(_0x4372c2!==0x0)_0x229748[_0x4d4f83(0x5ea)](_0x4372c2);if(_0x4df883!==0x0)_0x229748['gainMp'](_0x4df883);if(_0x157703!==0x0)_0x229748[_0x4d4f83(0x6f8)](_0x157703);if(_0x101c33)_0x229748['startDamagePopup']();if(_0x528583&&_0x229748[_0x4d4f83(0xb6)]()){if(_0x4d4f83(0x48b)===_0x4d4f83(0x48b))_0x229748['performCollapse']();else{function _0x111fb2(){const _0x375c1b=_0x4d4f83;_0x244ed6[_0x375c1b(0x278)][_0x375c1b(0x494)][_0x375c1b(0x782)](this,_0x1ea8fc),this[_0x375c1b(0xa0a)]()&&_0x5ca9a8===this[_0x375c1b(0x5b3)]()&&this['isAlive']()&&(this[_0x375c1b(0xbd)]=![]),!this[_0x375c1b(0x5a9)]&&!this[_0x375c1b(0x833)]&&_0x256f2e[_0x375c1b(0x1d0)]()&&this['requestMotionRefresh']();}}}}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x945),_0x387683=>{const _0x29b662=_0xe55837;if(!SceneManager[_0x29b662(0x1d0)]())return;VisuMZ[_0x29b662(0x313)](_0x387683,_0x387683);const _0x270cb5=VisuMZ[_0x29b662(0x67d)](_0x387683['Targets']);for(const _0x5d2e0b of _0x270cb5){if(!_0x5d2e0b)continue;_0x5d2e0b[_0x29b662(0xf0)](_0x387683['Immortal']);}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x440),_0x133a32=>{const _0x23c232=_0xe55837;if(!SceneManager[_0x23c232(0x1d0)]())return;VisuMZ[_0x23c232(0x313)](_0x133a32,_0x133a32);const _0x346d94=BattleManager['_action'],_0x3bfed7={'criticalHitRate':_0x133a32[_0x23c232(0x73a)],'criticalHitFlat':_0x133a32[_0x23c232(0x7cf)],'criticalDmgRate':_0x133a32['CriticalDmgRate'],'criticalDmgFlat':_0x133a32['CriticalDmgFlat'],'damageRate':_0x133a32[_0x23c232(0x475)],'damageFlat':_0x133a32[_0x23c232(0x149)],'hitRate':_0x133a32[_0x23c232(0x95e)],'hitFlat':_0x133a32[_0x23c232(0x40e)]};_0x346d94[_0x23c232(0x95d)]=_0x3bfed7;}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x2c5),_0x33f5df=>{const _0x49174b=_0xe55837;if(!SceneManager[_0x49174b(0x1d0)]())return;if(!Imported[_0x49174b(0x9d7)])return;VisuMZ['ConvertParams'](_0x33f5df,_0x33f5df);const _0x43047e=VisuMZ[_0x49174b(0x67d)](_0x33f5df[_0x49174b(0xa15)]);for(const _0x1550f7 of _0x43047e){if(!_0x1550f7)continue;let _0x2940a2=_0x33f5df[_0x49174b(0x70e)],_0x195995=_0x33f5df['NextTurn'],_0x3e1ff2=_0x33f5df[_0x49174b(0x9dd)];if(BattleManager[_0x49174b(0x7fc)]['includes'](_0x1550f7)){if('vvTnp'!==_0x49174b(0xa69)){function _0x4c9053(){const _0x138eae=_0x49174b;return this[_0x138eae(0xa52)]()[_0x138eae(0x35c)][_0x138eae(0x1c3)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x517e62(_0x52afc8['$1'])[_0x138eae(0x4d1)](/[\r\n]+/):_0x2f4026[_0x138eae(0x278)][_0x138eae(0x108)][_0x138eae(0x350)]['BattleCmdList'];}}else _0x2940a2+=_0x3e1ff2;}else _0x195995+=_0x3e1ff2;BattleManager[_0x49174b(0x3df)](_0x1550f7,-_0x2940a2,![]),BattleManager[_0x49174b(0x3df)](_0x1550f7,-_0x195995,!![]);}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x6fb),_0x259244=>{const _0x2ed94b=_0xe55837;if(!SceneManager[_0x2ed94b(0x1d0)]())return;VisuMZ['ConvertParams'](_0x259244,_0x259244);const _0x46da9f=[_0x2ed94b(0x68e),_0x2ed94b(0x33f),_0x2ed94b(0x2bc),_0x2ed94b(0x62c),_0x2ed94b(0x18d),_0x2ed94b(0x39a),_0x2ed94b(0x4d6),_0x2ed94b(0x3b6)],_0x5020ba=_0x259244[_0x2ed94b(0x5c6)],_0x309fa6=_0x259244[_0x2ed94b(0xa45)],_0x6a6f5b=VisuMZ[_0x2ed94b(0x67d)](_0x259244[_0x2ed94b(0xa15)]);for(const _0x3eb990 of _0x6a6f5b){if('vNiab'==='vNiab'){if(!_0x3eb990)continue;for(const _0x1f033c of _0x5020ba){if(_0x2ed94b(0x9b7)!==_0x2ed94b(0x5f7)){const _0x29076c=_0x46da9f[_0x2ed94b(0x660)](_0x1f033c[_0x2ed94b(0x448)]()['trim']());if(_0x29076c>=0x0&&_0x29076c<=0x7&&_0x3eb990['isBuffAffected'](_0x29076c)){if(_0x2ed94b(0x68f)!==_0x2ed94b(0x215))_0x3eb990[_0x2ed94b(0x262)](_0x29076c);else{function _0x30c8ad(){const _0x193fcb=_0x2ed94b;_0x59727a[_0x193fcb(0x78a)](_0x193fcb(0x312));}}}}else{function _0x5808bd(){const _0x14f0b5=_0x2ed94b;if(this[_0x14f0b5(0x28f)][_0x14f0b5(0x357)]!==_0x1f8429)return this[_0x14f0b5(0x28f)][_0x14f0b5(0x357)];return this['actor']()['note'][_0x14f0b5(0x1c3)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x14f0b5(0x28f)][_0x14f0b5(0x698)]=_0x3cc426(_0x513f74['$1']),this[_0x14f0b5(0x28f)]['svAnchorY']=_0x108dab(_0x501f59['$2'])):this['_cache'][_0x14f0b5(0x357)]=_0x3c7d16['prototype'][_0x14f0b5(0x1f9)][_0x14f0b5(0x782)](this),this[_0x14f0b5(0x28f)][_0x14f0b5(0x357)];}}}for(const _0x5d05fa of _0x309fa6){const _0x1d2b69=_0x46da9f[_0x2ed94b(0x660)](_0x5d05fa[_0x2ed94b(0x448)]()[_0x2ed94b(0x1ee)]());if(_0x1d2b69>=0x0&&_0x1d2b69<=0x7&&_0x3eb990['isDebuffAffected'](_0x1d2b69)){if(_0x2ed94b(0xe3)===_0x2ed94b(0xa68)){function _0x311870(){_0x382498['requestMotion'](_0x5be7c3);}}else _0x3eb990[_0x2ed94b(0x262)](_0x1d2b69);}}}else{function _0x582695(){const _0x827f61=_0x2ed94b,_0x3e364f=_0x2f0a91[_0x827f61(0x278)][_0x827f61(0x108)][_0x827f61(0x6c1)];if(_0x3e364f[_0x827f61(0x437)]>0x0&&_0x3cc413[_0x3e364f[_0x827f61(0x437)]]){const _0x4dcb35=_0x19490e[_0x3e364f['BattleStartEvent']],_0x1df736=_0x4dcb35[_0x827f61(0x656)][_0x827f61(0x4c5)]-0x2,_0x1b6601=_0x4dcb35[_0x827f61(0x656)][_0x1df736];if(_0x1b6601[_0x827f61(0x34f)]!==0xe6){const _0x421685={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x4c7777=_0x4dcb35[_0x827f61(0x656)]['pop']();_0x4dcb35[_0x827f61(0x656)][_0x827f61(0x1a4)](_0x421685),_0x4dcb35[_0x827f61(0x656)][_0x827f61(0x1a4)](_0x4c7777);}}}}}}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x60e),_0x2982a8=>{const _0x397433=_0xe55837;if(!SceneManager[_0x397433(0x1d0)]())return;VisuMZ[_0x397433(0x313)](_0x2982a8,_0x2982a8);const _0x47ca5b=_0x2982a8[_0x397433(0x635)],_0x2607e3=VisuMZ[_0x397433(0x67d)](_0x2982a8[_0x397433(0xa15)]);for(const _0x305c9c of _0x2607e3){if(!_0x305c9c)continue;for(const _0x9e937f of _0x47ca5b){_0x305c9c[_0x397433(0x119)](_0x9e937f);}}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x650),_0x3361d3=>{const _0x5c449e=_0xe55837;if(!SceneManager[_0x5c449e(0x1d0)]())return;if(!Imported[_0x5c449e(0x3af)])return;VisuMZ[_0x5c449e(0x313)](_0x3361d3,_0x3361d3);const _0x20fdfe=_0x3361d3[_0x5c449e(0x28b)],_0x4be9dd=VisuMZ[_0x5c449e(0x67d)](_0x3361d3[_0x5c449e(0xa15)]),_0x287dd5=_0x3361d3[_0x5c449e(0x6db)],_0x30a6c2=_0x3361d3[_0x5c449e(0x6f2)],_0x2b10c8=_0x3361d3['ForceExploiter'],_0x3c0316=BattleManager[_0x5c449e(0x815)];if(_0x20fdfe)for(const _0x499c8a of _0x4be9dd){if(_0x5c449e(0x4a0)!==_0x5c449e(0x4a0)){function _0x5916ec(){const _0x5a9c5f=_0x5c449e,_0x1541f7=_0x58956b['parse']('['+_0x212f0c['$1'][_0x5a9c5f(0x1c3)](/\d+/g)+']');for(const _0x15148c of _0x1541f7){if(_0x21794d[_0x5a9c5f(0x6f4)](_0x15148c))return![];}return!![];}}else{if(!_0x499c8a)continue;if(_0x499c8a===user)continue;if(_0x287dd5)_0x499c8a[_0x5c449e(0x34a)](![]);_0x499c8a['becomeSTBExploited'](BattleManager['_subject'],_0x3c0316);}}if(_0x30a6c2&&BattleManager[_0x5c449e(0xec)]){if(_0x5c449e(0x155)!==_0x5c449e(0x563)){if(_0x2b10c8)BattleManager[_0x5c449e(0xec)][_0x5c449e(0x34a)](![]);const _0x34d4e3=_0x4be9dd[0x0];BattleManager[_0x5c449e(0x5ac)](_0x34d4e3,_0x3c0316);}else{function _0x1bd612(){const _0x31f2e7=_0x5c449e;if(this[_0x31f2e7(0x91)]())_0x88b8c[_0x31f2e7(0x278)][_0x31f2e7(0x259)][_0x31f2e7(0x782)](this);}}}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Mechanics_StbExtraAction',_0x3c1e15=>{const _0x918f4c=_0xe55837;if(!SceneManager[_0x918f4c(0x1d0)]())return;if(!Imported[_0x918f4c(0x3af)])return;VisuMZ[_0x918f4c(0x313)](_0x3c1e15,_0x3c1e15);const _0x579203=_0x3c1e15[_0x918f4c(0x2ee)];if(BattleManager[_0x918f4c(0xec)]){if(_0x918f4c(0x11a)!==_0x918f4c(0x11a)){function _0x3e33e2(){const _0x3fee6a=_0x918f4c;return this['currentAction']()&&this[_0x3fee6a(0x5a3)]()[_0x3fee6a(0xa24)]()&&this['currentAction']()['isMagical']();}}else BattleManager['_subject'][_0x918f4c(0x1ae)](_0x579203);}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x86e),_0x456502=>{const _0x35e398=_0xe55837;if(!SceneManager[_0x35e398(0x1d0)]())return;if(!Imported[_0x35e398(0x3af)])return;VisuMZ[_0x35e398(0x313)](_0x456502,_0x456502);let _0x3116a4=_0x456502['Actions'];if(BattleManager[_0x35e398(0xec)]){if('mRXBX'!==_0x35e398(0x1e8)){BattleManager[_0x35e398(0xec)][_0x35e398(0x3b4)]=BattleManager['_subject'][_0x35e398(0x3b4)]||[];while(_0x3116a4--){if(BattleManager['_subject'][_0x35e398(0x3b4)][_0x35e398(0x4c5)]<=0x0)break;BattleManager[_0x35e398(0xec)][_0x35e398(0x3b4)]['shift']();}}else{function _0x26a315(){const _0x1ce3a6=_0x35e398;if(this['_growDuration']<=0x0)return;if(!this[_0x1ce3a6(0x79d)])return;const _0xc14dd=this[_0x1ce3a6(0x311)],_0x2d60bc=this[_0x1ce3a6(0x9fb)],_0x3ae4cf=this[_0x1ce3a6(0x37e)];_0x1c89e7[_0x1ce3a6(0x209)]?(this['_growX']=this[_0x1ce3a6(0x82d)](this[_0x1ce3a6(0x84b)],this[_0x1ce3a6(0x4ba)],_0xc14dd,_0x2d60bc,_0x3ae4cf),this[_0x1ce3a6(0x7a0)]=this['applyEasing'](this[_0x1ce3a6(0x7a0)],this[_0x1ce3a6(0x5de)],_0xc14dd,_0x2d60bc,_0x3ae4cf)):(this[_0x1ce3a6(0x84b)]=(this[_0x1ce3a6(0x84b)]*(_0xc14dd-0x1)+this[_0x1ce3a6(0x4ba)])/_0xc14dd,this[_0x1ce3a6(0x7a0)]=(this[_0x1ce3a6(0x7a0)]*(_0xc14dd-0x1)+this['_targetGrowY'])/_0xc14dd);this[_0x1ce3a6(0x311)]--;if(this['_growDuration']<=0x0)this[_0x1ce3a6(0x54e)]();}}}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x26c),_0x4cd6f2=>{const _0x59b2fc=_0xe55837;if(!SceneManager[_0x59b2fc(0x1d0)]())return;if(!Imported[_0x59b2fc(0x762)])return;VisuMZ['ConvertParams'](_0x4cd6f2,_0x4cd6f2);const _0x4d3b35=VisuMZ[_0x59b2fc(0x67d)](_0x4cd6f2['Targets']),_0x572e71=_0x4cd6f2[_0x59b2fc(0x83f)];for(const _0x56dd1d of _0x4d3b35){if(_0x59b2fc(0x7d3)===_0x59b2fc(0x7d3)){if(!_0x56dd1d)continue;if(!_0x56dd1d['isActor']())continue;_0x56dd1d['switchToWeaponType'](_0x572e71);}else{function _0x5d39b1(){const _0x1e6292=_0x59b2fc;if(_0x53060a[_0x1e6292(0x341)][_0x1e6292(0x107)]()&&_0x29cbab['_battler'][_0x1e6292(0xa0a)]())return 0x1;else{if(_0x28b514[_0x1e6292(0x341)]['isActor']()&&_0x574909[_0x1e6292(0x341)][_0x1e6292(0xa0a)]())return-0x1;}}}}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x1ab),_0x37f455=>{const _0x58670e=_0xe55837;if(!SceneManager[_0x58670e(0x1d0)]())return;VisuMZ[_0x58670e(0x313)](_0x37f455,_0x37f455);const _0x3696ab=VisuMZ[_0x58670e(0x67d)](_0x37f455['Targets']),_0x569c7f=_0x37f455[_0x58670e(0x68d)],_0x12ed34={'textColor':ColorManager[_0x58670e(0xde)](_0x37f455['TextColor']),'flashColor':_0x37f455[_0x58670e(0x91b)],'flashDuration':_0x37f455[_0x58670e(0x901)]};for(const _0x56f58c of _0x3696ab){if(_0x58670e(0x702)===_0x58670e(0x2b3)){function _0x11e22d(){const _0x4160ef=_0x58670e;_0x5256ea[_0x4160ef(0x5ae)](_0xe49898[_0x444067]);}}else{if(!_0x56f58c)continue;_0x56f58c[_0x58670e(0x63e)](_0x569c7f,_0x12ed34);}}}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x830),_0x3bb09b=>{const _0x22983f=_0xe55837;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x22983f(0x313)](_0x3bb09b,_0x3bb09b);const _0x1032b6=VisuMZ[_0x22983f(0x67d)](_0x3bb09b['Targets']);let _0x452bef=$gameVariables[_0x22983f(0x6f4)](_0x3bb09b['Variable']);Imported[_0x22983f(0x209)]&&_0x3bb09b[_0x22983f(0x504)]&&(_0x452bef=VisuMZ['GroupDigits'](_0x452bef));const _0x47550d=String(_0x452bef),_0x3aace4={'textColor':ColorManager[_0x22983f(0xde)](_0x3bb09b[_0x22983f(0x6ad)]),'flashColor':_0x3bb09b['FlashColor'],'flashDuration':_0x3bb09b[_0x22983f(0x901)]};for(const _0xca30a3 of _0x1032b6){if(!_0xca30a3)continue;_0xca30a3[_0x22983f(0x63e)](_0x47550d,_0x3aace4);}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x13b),_0x4be039=>{const _0x5d93b1=_0xe55837;if(!SceneManager['isSceneBattle']())return;const _0x3f4819=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3f4819)return;_0x3f4819[_0x5d93b1(0x78a)](_0x5d93b1(0x869));}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x3c2),_0x370abe=>{const _0x3b6a81=_0xe55837;if(!SceneManager[_0x3b6a81(0x1d0)]())return;VisuMZ['ConvertParams'](_0x370abe,_0x370abe);const _0x52d31e=VisuMZ[_0x3b6a81(0x67d)](_0x370abe[_0x3b6a81(0xa15)]);for(const _0x42e19a of _0x52d31e){if(!_0x42e19a)continue;_0x42e19a[_0x3b6a81(0x5b7)]();}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x463),_0x47f3c8=>{const _0x5b5315=_0xe55837;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5b5315(0x313)](_0x47f3c8,_0x47f3c8);const _0x2f519a=VisuMZ[_0x5b5315(0x67d)](_0x47f3c8[_0x5b5315(0xa15)]),_0x258eb7=_0x47f3c8[_0x5b5315(0x234)][_0x5b5315(0x8f1)]()[_0x5b5315(0x1ee)](),_0x385679=_0x47f3c8['ShowWeapon'],_0x1a3e40=_0x47f3c8[_0x5b5315(0x2a6)];for(const _0x237d32 of _0x2f519a){if(_0x5b5315(0xf2)!=='UCzCN'){function _0x150380(){const _0x324d7d=_0x5b5315,_0x5db0e7=this[_0x324d7d(0xd3)](_0x5c9314),_0x3c26cb=this[_0x324d7d(0x93f)](_0x364608),_0x1ccaf4=this[_0x324d7d(0x578)](_0x3c26cb)[_0x324d7d(0x124)];this[_0x324d7d(0x322)](this[_0x324d7d(0x571)](_0x1597a2));const _0x4026af=this[_0x324d7d(0x8bf)]();if(_0x4026af==='right')this[_0x324d7d(0x85a)](_0x3c26cb,_0x5db0e7['x']+_0x5db0e7[_0x324d7d(0x124)]-_0x1ccaf4,_0x5db0e7['y'],_0x1ccaf4);else{if(_0x4026af===_0x324d7d(0x89d)){const _0x334cfb=_0x5db0e7['x']+_0x329785[_0x324d7d(0x639)]((_0x5db0e7[_0x324d7d(0x124)]-_0x1ccaf4)/0x2);this[_0x324d7d(0x85a)](_0x3c26cb,_0x334cfb,_0x5db0e7['y'],_0x1ccaf4);}else this['drawTextEx'](_0x3c26cb,_0x5db0e7['x'],_0x5db0e7['y'],_0x1ccaf4);}}}else{if(!_0x237d32)continue;_0x237d32[_0x5b5315(0x884)](_0x258eb7,_0x385679,_0x1a3e40);}}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x873),_0x18c0b2=>{const _0x10f75e=_0xe55837;if(!SceneManager[_0x10f75e(0x1d0)]())return;VisuMZ[_0x10f75e(0x313)](_0x18c0b2,_0x18c0b2);const _0x1de998=VisuMZ[_0x10f75e(0x67d)](_0x18c0b2[_0x10f75e(0xa15)]),_0x31595f=_0x18c0b2[_0x10f75e(0x234)][_0x10f75e(0x8f1)]()[_0x10f75e(0x1ee)](),_0x441e8b=_0x18c0b2[_0x10f75e(0x6c4)];for(const _0x3b7187 of _0x1de998){if('kVuwX'===_0x10f75e(0x16e)){if(!_0x3b7187)continue;if(_0x31595f[_0x10f75e(0x1c3)](/ATTACK[ ](\d+)/i))_0x3b7187[_0x10f75e(0x1b1)](Number(RegExp['$1']));else{if(_0x31595f===_0x10f75e(0x1f4)){if(_0x10f75e(0x9d5)!==_0x10f75e(0xa04))_0x3b7187[_0x10f75e(0x761)]();else{function _0x29beeb(){const _0x3a30fb=_0x10f75e;_0x1300a7[_0x3a30fb(0x278)][_0x3a30fb(0x2ae)]['call'](this),this[_0x3a30fb(0xa6b)]();}}}else{if(_0x10f75e(0x875)!==_0x10f75e(0x3cf))_0x3b7187[_0x10f75e(0x835)](_0x31595f);else{function _0x4deec6(){const _0x3560a3=_0x10f75e;return _0x1b2361['battler']()[_0x3560a3(0xa0)]-_0x3f838e[_0x3560a3(0xe1)]()[_0x3560a3(0xa0)];}}}}if(!_0x441e8b)_0x3b7187[_0x10f75e(0x345)](0x0);else{if(_0x441e8b&&['thrust',_0x10f75e(0x4c8),_0x10f75e(0x92a)]['includes'](_0x31595f)){}}}else{function _0x798372(){const _0x4393a4=_0x10f75e;_0xf51d4d['BattleCore']['Spriteset_Battle_updateActors'][_0x4393a4(0x782)](this),this['updateBattlerContainer']();}}}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0xa70),_0x56343b=>{const _0x7d5821=_0xe55837;if(!SceneManager[_0x7d5821(0x1d0)]())return;VisuMZ[_0x7d5821(0x313)](_0x56343b,_0x56343b);const _0x39e503=BattleManager[_0x7d5821(0x815)];if(!_0x39e503)return;if(!_0x39e503[_0x7d5821(0xa24)]())return;const _0x534bd6=VisuMZ[_0x7d5821(0x67d)](_0x56343b[_0x7d5821(0xa15)]);for(const _0xf3df1b of _0x534bd6){if('lhIfd'===_0x7d5821(0x954)){if(!_0xf3df1b)continue;_0xf3df1b[_0x7d5821(0x2af)](_0x39e503);}else{function _0x2f02b6(){const _0x1b938b=_0x7d5821,_0x2e308d=this[_0x1b938b(0x7f1)]();return _0x2e308d[_0x5216dc[_0x1b938b(0x88a)](_0x2e308d['length'])];}}}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x55d),_0x5397d4=>{const _0x1c69c9=_0xe55837;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1c69c9(0x313)](_0x5397d4,_0x5397d4);const _0x35114a=VisuMZ['CreateActionSequenceTargets'](_0x5397d4[_0x1c69c9(0xa15)]);for(const _0x4f6d95 of _0x35114a){if(_0x1c69c9(0x173)===_0x1c69c9(0x94a)){function _0x90c953(){const _0x16a185=_0x1c69c9;_0x2de4d7[_0x16a185(0x1c8)]['_statusWindow'][_0x16a185(0x381)](_0x29425e);}}else{if(!_0x4f6d95)continue;if(!_0x4f6d95[_0x1c69c9(0xe1)]())continue;_0x4f6d95[_0x1c69c9(0xe1)]()[_0x1c69c9(0x659)]();}}}),PluginManager['registerCommand'](pluginData['name'],_0xe55837(0x511),_0x5312db=>{const _0x2825a3=_0xe55837;if(!SceneManager[_0x2825a3(0x1d0)]())return;VisuMZ[_0x2825a3(0x313)](_0x5312db,_0x5312db);const _0x23f1c6=$gameTemp[_0x2825a3(0x534)](),_0x1899ad=_0x5312db[_0x2825a3(0x96c)]*Sprite_Battler[_0x2825a3(0x850)];_0x23f1c6[_0x2825a3(0xea)](_0x1899ad);}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Movement_BattleStep',_0x3182e4=>{const _0x1cb3bc=_0xe55837;if(!SceneManager[_0x1cb3bc(0x1d0)]())return;VisuMZ[_0x1cb3bc(0x313)](_0x3182e4,_0x3182e4);const _0x4ea8c0=$gameTemp[_0x1cb3bc(0x534)](),_0x3d1210=BattleManager[_0x1cb3bc(0x815)];if(!_0x4ea8c0||!_0x3d1210)return;if(!_0x3d1210[_0x1cb3bc(0xa24)]())return;const _0x2b251d=VisuMZ[_0x1cb3bc(0x67d)](_0x3182e4['Targets']);for(const _0x352d89 of _0x2b251d){if(!_0x352d89)continue;_0x352d89[_0x1cb3bc(0x8a9)](_0x3d1210);}if(_0x3182e4[_0x1cb3bc(0x697)])_0x4ea8c0['setWaitMode'](_0x1cb3bc(0x151));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Movement_FaceDirection',_0x1e213d=>{const _0x28052a=_0xe55837;if(!SceneManager[_0x28052a(0x1d0)]())return;if(!$gameSystem[_0x28052a(0x22a)]())return;VisuMZ[_0x28052a(0x313)](_0x1e213d,_0x1e213d);const _0x50c59b=VisuMZ[_0x28052a(0x67d)](_0x1e213d[_0x28052a(0xa15)]);let _0x324155=_0x1e213d[_0x28052a(0x540)]['match'](/back/i);for(const _0x6218a2 of _0x50c59b){if(!_0x6218a2)continue;if(_0x1e213d[_0x28052a(0x540)][_0x28052a(0x1c3)](/rand/i))_0x324155=Math[_0x28052a(0x88a)](0x2);_0x6218a2[_0x28052a(0x8c2)](!!_0x324155);}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Movement_FacePoint',_0x2dd467=>{const _0x12c8e1=_0xe55837;if(!SceneManager[_0x12c8e1(0x1d0)]())return;if(!$gameSystem[_0x12c8e1(0x22a)]())return;VisuMZ[_0x12c8e1(0x313)](_0x2dd467,_0x2dd467);const _0x11e291=VisuMZ[_0x12c8e1(0x67d)](_0x2dd467['Targets']);let _0x1f2af5=_0x2dd467[_0x12c8e1(0x912)];const _0x45f6db=_0x2dd467['FaceAway'];for(const _0x3ffa71 of _0x11e291){if(!_0x3ffa71)continue;let _0x4ae8ac=_0x3ffa71[_0x12c8e1(0xe1)]()[_0x12c8e1(0xa0)],_0x4c9b42=_0x3ffa71[_0x12c8e1(0xe1)]()['_baseY'];if(_0x1f2af5[_0x12c8e1(0x1c3)](/home/i)){if(_0x12c8e1(0x9ab)==='MILtk')_0x4ae8ac=_0x3ffa71[_0x12c8e1(0xe1)]()[_0x12c8e1(0xbf)],_0x4c9b42=_0x3ffa71['battler']()[_0x12c8e1(0x677)];else{function _0x48723e(){const _0x3e0fbe=_0x12c8e1;return _0xcfc248[_0x3e0fbe(0x7f1)]()[_0x3e0fbe(0x49d)](_0x4e8b27=>_0x4e8b27!==_0xb209f0);}}}else{if(_0x1f2af5['match'](/center/i))_0x4ae8ac=Graphics['boxWidth']/0x2,_0x4c9b42=Graphics[_0x12c8e1(0x5c8)]/0x2;else{if(_0x1f2af5[_0x12c8e1(0x1c3)](/point (\d+), (\d+)/i)){if(_0x12c8e1(0x485)===_0x12c8e1(0x485))_0x4ae8ac=Number(RegExp['$1']),_0x4c9b42=Number(RegExp['$2']);else{function _0x4602ec(){const _0x582ec1=_0x12c8e1;if(!_0x1bf19e[_0x582ec1(0x278)]['Settings']['BattleLog'][_0x582ec1(0x8da)])return;const _0x26ff3c=_0x37d297[_0x582ec1(0x83a)](),_0xe5ee59=_0x26ff3c[_0x582ec1(0x6ee)]();for(const _0x1cd1fa of _0xe5ee59){_0x1cd1fa[_0x582ec1(0x6af)]&&(this[_0x582ec1(0x30a)]('popBaseLine'),this['push'](_0x582ec1(0x3d3)),this[_0x582ec1(0x30a)](_0x582ec1(0x390),_0x1cd1fa['message4'][_0x582ec1(0x11c)](_0x195eaa[_0x582ec1(0x625)]())),this[_0x582ec1(0x30a)](_0x582ec1(0xea)));}}}}}}_0x3ffa71[_0x12c8e1(0xa66)](Math[_0x12c8e1(0x498)](_0x4ae8ac),Math[_0x12c8e1(0x498)](_0x4c9b42),!!_0x45f6db);}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x37d),_0x3664b0=>{const _0x4ceb37=_0xe55837;if(!SceneManager[_0x4ceb37(0x1d0)]())return;if(!$gameSystem[_0x4ceb37(0x22a)]())return;VisuMZ['ConvertParams'](_0x3664b0,_0x3664b0);const _0x4e7fac=VisuMZ[_0x4ceb37(0x67d)](_0x3664b0[_0x4ceb37(0x117)]),_0x5499ef=VisuMZ[_0x4ceb37(0x67d)](_0x3664b0[_0x4ceb37(0x6d8)]),_0x18f760=_0x5499ef['map'](_0x22bce7=>_0x22bce7&&_0x22bce7[_0x4ceb37(0xe1)]()?_0x22bce7[_0x4ceb37(0xe1)]()['_baseX']:0x0)/(_0x5499ef[_0x4ceb37(0x4c5)]||0x1),_0x33e89d=_0x5499ef['map'](_0x3d1e1d=>_0x3d1e1d&&_0x3d1e1d[_0x4ceb37(0xe1)]()?_0x3d1e1d[_0x4ceb37(0xe1)]()[_0x4ceb37(0x937)]:0x0)/(_0x5499ef[_0x4ceb37(0x4c5)]||0x1),_0x5691c8=_0x3664b0['FaceAway'];for(const _0x1a3b71 of _0x4e7fac){if('ygxnh'!==_0x4ceb37(0x19d)){if(!_0x1a3b71)continue;_0x1a3b71['setBattlerFacePoint'](Math[_0x4ceb37(0x498)](_0x18f760),Math[_0x4ceb37(0x498)](_0x33e89d),!!_0x5691c8);}else{function _0x142284(){const _0x123845=_0x4ceb37,_0x171e4e=new _0x1a3e6b();_0x171e4e[_0x123845(0x881)]=_0x2beb47[_0x123845(0x55f)](_0x50bedc['StatusWindowAttachmentBack']),_0x171e4e['x']=_0x4ed040[_0x123845(0x986)]||0x0,_0x171e4e['y']=_0x3ff917[_0x123845(0xa41)]||0x0,this[_0x123845(0x90f)](_0x171e4e),this[_0x123845(0x9b6)]=_0x171e4e;}}}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x638),_0x27488d=>{const _0x50c493=_0xe55837;if(!SceneManager[_0x50c493(0x1d0)]())return;VisuMZ[_0x50c493(0x313)](_0x27488d,_0x27488d);const _0x23b4d1=$gameTemp[_0x50c493(0x534)](),_0x252d3e=VisuMZ['CreateActionSequenceTargets'](_0x27488d[_0x50c493(0xa15)]),_0x278079=_0x27488d[_0x50c493(0x416)],_0x3620c7=_0x27488d[_0x50c493(0x769)],_0x38ef14=_0x27488d['EasingType'],_0x3728e9=_0x27488d['WaitForFloat'];if(!_0x23b4d1)return;for(const _0x5e6291 of _0x252d3e){if(!_0x5e6291)continue;_0x5e6291[_0x50c493(0x41d)](_0x278079,_0x3620c7,_0x38ef14);}if(_0x3728e9)_0x23b4d1[_0x50c493(0x78a)](_0x50c493(0x462));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x5af),_0x5361b0=>{const _0x4ec17e=_0xe55837;if(!SceneManager[_0x4ec17e(0x1d0)]())return;VisuMZ['ConvertParams'](_0x5361b0,_0x5361b0);const _0x357697=$gameTemp[_0x4ec17e(0x534)]();if(!_0x357697)return;const _0x2cb0f3=VisuMZ['CreateActionSequenceTargets'](_0x5361b0[_0x4ec17e(0xa15)]);for(const _0x3d1612 of _0x2cb0f3){if(!_0x3d1612)continue;_0x3d1612[_0x4ec17e(0x9ae)](),_0x3d1612['performActionEndMembers']();}if(_0x5361b0[_0x4ec17e(0x697)])_0x357697[_0x4ec17e(0x78a)](_0x4ec17e(0x151));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0xa1e),_0x209883=>{const _0x511f46=_0xe55837;if(!SceneManager[_0x511f46(0x1d0)]())return;VisuMZ[_0x511f46(0x313)](_0x209883,_0x209883);const _0xdd406d=$gameTemp[_0x511f46(0x534)](),_0x589ce7=VisuMZ[_0x511f46(0x67d)](_0x209883[_0x511f46(0xa15)]),_0x399ecd=_0x209883['Height'],_0x561d72=_0x209883[_0x511f46(0x769)],_0x569707=_0x209883[_0x511f46(0x783)];if(!_0xdd406d)return;for(const _0x3316d5 of _0x589ce7){if(!_0x3316d5)continue;_0x3316d5[_0x511f46(0x227)](_0x399ecd,_0x561d72);}if(_0x569707)_0xdd406d[_0x511f46(0x78a)](_0x511f46(0x801));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x443),_0x10c880=>{const _0x3ed9ca=_0xe55837;if(!SceneManager[_0x3ed9ca(0x1d0)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x3ed9ca(0x313)](_0x10c880,_0x10c880);const _0x2817c2=$gameTemp[_0x3ed9ca(0x534)](),_0x4c2276=VisuMZ[_0x3ed9ca(0x67d)](_0x10c880[_0x3ed9ca(0xa15)]),_0xc2baa7=_0x10c880[_0x3ed9ca(0x7d5)],_0x171478=_0x10c880[_0x3ed9ca(0x297)],_0x57366c=_0x10c880[_0x3ed9ca(0x1ba)],_0x57ec0e=_0x10c880[_0x3ed9ca(0x769)],_0x237eb2=_0x10c880['FaceDirection'],_0x1de3fc=_0x10c880[_0x3ed9ca(0x76f)],_0x522404=_0x10c880[_0x3ed9ca(0x234)],_0x3424e0=_0x10c880[_0x3ed9ca(0x697)];if(!_0x2817c2)return;for(const _0x3d70ec of _0x4c2276){if(!_0x3d70ec)continue;let _0xd0238b=_0x171478,_0x26f43f=_0x57366c;if(_0xc2baa7[_0x3ed9ca(0x1c3)](/horz/i))_0xd0238b*=_0x3d70ec[_0x3ed9ca(0x107)]()?-0x1:0x1;if(_0xc2baa7[_0x3ed9ca(0x1c3)](/vert/i))_0x26f43f*=_0x3d70ec[_0x3ed9ca(0x107)]()?-0x1:0x1;_0x3d70ec[_0x3ed9ca(0x2c4)](_0xd0238b,_0x26f43f,_0x57ec0e,_0x237eb2,_0x1de3fc),_0x3d70ec[_0x3ed9ca(0x835)](_0x522404);}if(_0x3424e0)_0x2817c2[_0x3ed9ca(0x78a)](_0x3ed9ca(0x151));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x8a3),_0x268b39=>{const _0x254df6=_0xe55837;if(!SceneManager[_0x254df6(0x1d0)]())return;if(!$gameSystem[_0x254df6(0x22a)]())return;VisuMZ['ConvertParams'](_0x268b39,_0x268b39);const _0x321f19=$gameTemp[_0x254df6(0x534)](),_0x478233=VisuMZ[_0x254df6(0x67d)](_0x268b39['Targets']),_0x217ac1=_0x268b39[_0x254df6(0x804)],_0x1724c3=_0x268b39[_0x254df6(0xb1)],_0x11c436=_0x268b39['OffsetX'],_0x34026a=_0x268b39[_0x254df6(0x49e)],_0x329a61=_0x268b39['Duration'],_0x11b780=_0x268b39['FaceDirection'],_0x2f514c=_0x268b39[_0x254df6(0x76f)],_0x1c1a61=_0x268b39['MotionType'],_0x4afc41=_0x268b39['WaitForMovement'];if(!_0x321f19)return;for(const _0x1b7bb2 of _0x478233){if(!_0x1b7bb2)continue;let _0x1278e7=_0x1b7bb2[_0x254df6(0xe1)]()[_0x254df6(0xa0)],_0x5ab975=_0x1b7bb2[_0x254df6(0xe1)]()['_baseY'];if(_0x217ac1['match'](/home/i))_0x1278e7=_0x1b7bb2['battler']()[_0x254df6(0xbf)],_0x5ab975=_0x1b7bb2['battler']()[_0x254df6(0x677)];else{if(_0x217ac1[_0x254df6(0x1c3)](/center/i)){if(_0x254df6(0x887)===_0x254df6(0x887))_0x1278e7=Graphics[_0x254df6(0x386)]/0x2,_0x5ab975=Graphics['boxHeight']/0x2;else{function _0x268152(){const _0x4841fe=_0x254df6;this[_0x4841fe(0x418)][_0x4841fe(0x2fa)](),this[_0x4841fe(0xdc)][_0x4841fe(0xa20)](),this[_0x4841fe(0x198)]['activate']();}}}else _0x217ac1['match'](/point (\d+), (\d+)/i)&&(_0x1278e7=Number(RegExp['$1']),_0x5ab975=Number(RegExp['$2']));}if(_0x1724c3['match'](/none/i)){if(_0x254df6(0x823)!==_0x254df6(0xa09))_0x1278e7+=_0x11c436,_0x5ab975+=_0x34026a;else{function _0x91b1f5(){const _0x5a2696=_0x254df6;!_0x527b0c[_0x5a2696(0x278)][_0x5a2696(0x108)]['BattleLog']['ShowMissEvasion']?this['push'](_0x5a2696(0x170),_0x592f31):_0x5a3ba9['BattleCore'][_0x5a2696(0x9aa)]['call'](this,_0xbace0d);}}}else{if(_0x1724c3[_0x254df6(0x1c3)](/horz/i)&&_0x1724c3[_0x254df6(0x1c3)](/vert/i)){if(_0x254df6(0x3fc)!==_0x254df6(0x928))_0x1278e7+=_0x1b7bb2[_0x254df6(0x107)]()?-_0x11c436:_0x11c436,_0x5ab975+=_0x1b7bb2['isActor']()?-_0x34026a:_0x34026a;else{function _0x2c7509(){const _0x3081cc=_0x254df6;this[_0x3081cc(0x8c2)](![]);}}}else{if(_0x1724c3[_0x254df6(0x1c3)](/horz/i))_0x1278e7+=_0x1b7bb2[_0x254df6(0x107)]()?-_0x11c436:_0x11c436,_0x5ab975+=_0x34026a;else _0x1724c3[_0x254df6(0x1c3)](/vert/i)&&(_0x1278e7+=_0x11c436,_0x5ab975+=_0x1b7bb2[_0x254df6(0x107)]()?-_0x34026a:_0x34026a);}}_0x1b7bb2['moveBattlerToPoint'](_0x1278e7,_0x5ab975,_0x329a61,_0x11b780,_0x2f514c,-0x1),_0x1b7bb2['requestMotion'](_0x1c1a61);}if(_0x4afc41)_0x321f19['setWaitMode'](_0x254df6(0x151));}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],'ActSeq_Movement_MoveToTarget',_0x115bd8=>{const _0x119410=_0xe55837;if(!SceneManager[_0x119410(0x1d0)]())return;if(!$gameSystem[_0x119410(0x22a)]())return;VisuMZ[_0x119410(0x313)](_0x115bd8,_0x115bd8);const _0x1fb12a=$gameTemp[_0x119410(0x534)](),_0x25ee82=VisuMZ[_0x119410(0x67d)](_0x115bd8[_0x119410(0x117)]),_0x450e12=VisuMZ['CreateActionSequenceTargets'](_0x115bd8[_0x119410(0x6d8)]),_0x28335d=_0x115bd8['TargetLocation'];let _0x4e31d8=_0x115bd8[_0x119410(0xa3)];const _0x384da7=_0x115bd8[_0x119410(0xb1)],_0x5b4e16=_0x115bd8[_0x119410(0x667)],_0x440bc9=_0x115bd8[_0x119410(0x49e)],_0x13eaac=_0x115bd8[_0x119410(0x769)],_0x24136f=_0x115bd8['FaceDirection'],_0x2ee2db=_0x115bd8[_0x119410(0x76f)],_0x1bd5cc=_0x115bd8[_0x119410(0x234)],_0x4b935e=_0x115bd8[_0x119410(0x697)],_0x39b561=Math[_0x119410(0x6a9)](..._0x450e12[_0x119410(0x584)](_0x4e81ba=>_0x4e81ba[_0x119410(0xe1)]()['_baseX']-_0x4e81ba[_0x119410(0xe1)]()[_0x119410(0x56b)]()/0x2)),_0x55345d=Math['max'](..._0x450e12[_0x119410(0x584)](_0x50ae72=>_0x50ae72['battler']()[_0x119410(0xa0)]+_0x50ae72['battler']()[_0x119410(0x56b)]()/0x2)),_0x39441c=Math[_0x119410(0x6a9)](..._0x450e12[_0x119410(0x584)](_0x4707fa=>_0x4707fa['battler']()[_0x119410(0x937)]-_0x4707fa['battler']()[_0x119410(0x202)]())),_0x1f4945=Math[_0x119410(0x220)](..._0x450e12[_0x119410(0x584)](_0x1dbd57=>_0x1dbd57[_0x119410(0xe1)]()[_0x119410(0x937)])),_0x2ccf15=_0x450e12['filter'](_0x52af56=>_0x52af56[_0x119410(0x107)]())[_0x119410(0x4c5)],_0xa8e260=_0x450e12['filter'](_0x109513=>_0x109513[_0x119410(0xa0a)]())[_0x119410(0x4c5)];let _0xd35937=0x0,_0x1b423d=0x0;if(_0x28335d[_0x119410(0x1c3)](/front/i)){if(_0x119410(0x9f1)!==_0x119410(0x24b))_0xd35937=_0x2ccf15>=_0xa8e260?_0x39b561:_0x55345d;else{function _0x27eae0(){this['addItemCommand']();}}}else{if(_0x28335d[_0x119410(0x1c3)](/middle/i)){if('jvuCz'!==_0x119410(0x189))_0xd35937=(_0x39b561+_0x55345d)/0x2,_0x4e31d8=-0x1;else{function _0x277ed2(){const _0x3b09e1=_0x119410;this[_0x3b09e1(0x7fc)][_0x3b09e1(0x1ad)](_0x4e7bc7);if(_0x164545===this['_subject'])return;const _0x1a62ea=_0x805f['makeDeepCopy'](_0x517f58[_0x3b09e1(0x5a3)]());this['_forcedBattlers'][_0x3b09e1(0x30a)]([_0x1a8ace,_0x1a62ea]);}}}else _0x28335d[_0x119410(0x1c3)](/back/i)&&(_0xd35937=_0x2ccf15>=_0xa8e260?_0x55345d:_0x39b561);}if(_0x28335d['match'](/head/i))_0x1b423d=_0x39441c;else{if(_0x28335d[_0x119410(0x1c3)](/center/i))_0x1b423d=(_0x39441c+_0x1f4945)/0x2;else _0x28335d[_0x119410(0x1c3)](/base/i)&&(_0x1b423d=_0x1f4945);}if(!_0x1fb12a)return;for(const _0x3c1b13 of _0x25ee82){if(_0x119410(0x56f)===_0x119410(0x56f)){if(!_0x3c1b13)continue;let _0x177626=_0xd35937,_0x3f7519=_0x1b423d;if(_0x384da7['match'](/none/i)){if(_0x119410(0x17d)==='ZlTCt'){function _0x3c3ebf(){const _0x29393c=_0x119410,_0x4e9a7a=_0x29393c(0x94b)['format'](_0x39727b);_0x38e1a8[_0x29393c(0x278)]['JS'][_0x109765]=new _0x1dda57(_0x4e9a7a);}}else _0x177626+=_0x5b4e16,_0x3f7519+=_0x440bc9;}else{if(_0x384da7[_0x119410(0x1c3)](/horz/i)&&_0x384da7[_0x119410(0x1c3)](/vert/i)){if('WOzjD'===_0x119410(0x7c2)){function _0x33d1d0(){const _0x574565=_0x119410;this['_motion']=_0xeb9203[_0x574565(0x6e7)][_0x574565(0x11b)];return;}}else _0x177626+=_0x3c1b13['isActor']()?-_0x5b4e16:_0x5b4e16,_0x3f7519+=_0x3c1b13['isActor']()?-_0x440bc9:_0x440bc9;}else{if(_0x384da7['match'](/horz/i))_0x177626+=_0x3c1b13[_0x119410(0x107)]()?-_0x5b4e16:_0x5b4e16,_0x3f7519+=_0x440bc9;else{if(_0x384da7['match'](/vert/i)){if(_0x119410(0x182)!==_0x119410(0x3bd))_0x177626+=_0x5b4e16,_0x3f7519+=_0x3c1b13['isActor']()?-_0x440bc9:_0x440bc9;else{function _0x1a9a72(){const _0x457a3d=_0x119410;if(!_0x3e2eda[_0x457a3d(0x22a)]())return;const _0x4eacd6=this[_0x457a3d(0xe1)]();if(!_0x4eacd6)return;_0x4eacd6['startGrow'](_0x58f341,_0xd56e1,_0x53c7c1,_0x2928d8);}}}}}}_0x3c1b13['moveBattlerToPoint'](_0x177626,_0x3f7519,_0x13eaac,_0x24136f,_0x2ee2db,_0x4e31d8),_0x3c1b13[_0x119410(0x835)](_0x1bd5cc);}else{function _0x16042f(){const _0x25ea88=_0x119410;_0x12eb4e+=_0x1f0c7f[_0x25ea88(0x3dd)];}}}if(_0x4b935e)_0x1fb12a[_0x119410(0x78a)](_0x119410(0x151));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x5eb),_0xe0725a=>{const _0x26cdb7=_0xe55837;if(!SceneManager[_0x26cdb7(0x1d0)]())return;VisuMZ[_0x26cdb7(0x313)](_0xe0725a,_0xe0725a);const _0x446187=$gameTemp[_0x26cdb7(0x534)](),_0x3d8331=VisuMZ['CreateActionSequenceTargets'](_0xe0725a[_0x26cdb7(0xa15)]),_0x33b653=_0xe0725a[_0x26cdb7(0x927)],_0x9c575=_0xe0725a[_0x26cdb7(0x769)],_0x25fcd9=_0xe0725a[_0x26cdb7(0x76f)],_0x34947f=_0xe0725a[_0x26cdb7(0x613)];if(!_0x446187)return;for(const _0xb3c1a7 of _0x3d8331){if(!_0xb3c1a7)continue;_0xb3c1a7[_0x26cdb7(0x7aa)](_0x33b653,_0x9c575,_0x25fcd9);}if(_0x34947f)_0x446187['setWaitMode']('battleOpacity');}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Movement_Scale',_0x24671a=>{const _0x1f4b06=_0xe55837;if(!SceneManager[_0x1f4b06(0x1d0)]())return;VisuMZ[_0x1f4b06(0x313)](_0x24671a,_0x24671a);const _0x406ee9=$gameTemp[_0x1f4b06(0x534)](),_0x3b1051=VisuMZ[_0x1f4b06(0x67d)](_0x24671a[_0x1f4b06(0xa15)]),_0x1e678f=_0x24671a[_0x1f4b06(0x465)],_0x2fe4c2=_0x24671a[_0x1f4b06(0x63a)],_0x46dd48=_0x24671a[_0x1f4b06(0x769)],_0x2c2167=_0x24671a['EasingType'],_0x55ad3c=_0x24671a[_0x1f4b06(0x3fd)];if(!_0x406ee9)return;for(const _0x92ee5 of _0x3b1051){if(!_0x92ee5)continue;_0x92ee5[_0x1f4b06(0x97)](_0x1e678f,_0x2fe4c2,_0x46dd48,_0x2c2167);}if(_0x55ad3c)_0x406ee9['setWaitMode'](_0x1f4b06(0x1bd));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x7c8),_0x4c8cba=>{const _0x26ebea=_0xe55837;if(!SceneManager[_0x26ebea(0x1d0)]())return;VisuMZ['ConvertParams'](_0x4c8cba,_0x4c8cba);const _0x5daff8=$gameTemp[_0x26ebea(0x534)](),_0x48e4aa=VisuMZ['CreateActionSequenceTargets'](_0x4c8cba['Targets']),_0x5d4658=_0x4c8cba[_0x26ebea(0x6ce)],_0x90b529=_0x4c8cba[_0x26ebea(0x379)],_0x3df33c=_0x4c8cba[_0x26ebea(0x769)],_0x11f235=_0x4c8cba[_0x26ebea(0x76f)],_0x33dc24=_0x4c8cba['WaitForSkew'];if(!_0x5daff8)return;for(const _0x49e574 of _0x48e4aa){if(!_0x49e574)continue;_0x49e574[_0x26ebea(0x5c5)](_0x5d4658,_0x90b529,_0x3df33c,_0x11f235);}if(_0x33dc24)_0x5daff8['setWaitMode'](_0x26ebea(0x772));}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x2d1),_0x4edee0=>{const _0x32d2ef=_0xe55837;if(!SceneManager[_0x32d2ef(0x1d0)]())return;VisuMZ[_0x32d2ef(0x313)](_0x4edee0,_0x4edee0);const _0x2286a5=$gameTemp[_0x32d2ef(0x534)](),_0x232117=VisuMZ[_0x32d2ef(0x67d)](_0x4edee0[_0x32d2ef(0xa15)]),_0x3af195=_0x4edee0[_0x32d2ef(0x70b)],_0xb67f0e=_0x4edee0[_0x32d2ef(0x769)],_0x1d40a1=_0x4edee0['EasingType'],_0x4e96c7=_0x4edee0['RevertAngle'],_0x22d753=_0x4edee0['WaitForSpin'];if(!_0x2286a5)return;for(const _0x2d1d49 of _0x232117){if(!_0x2d1d49)continue;_0x2d1d49['spinBattler'](_0x3af195,_0xb67f0e,_0x1d40a1,_0x4e96c7);}if(_0x22d753)_0x2286a5[_0x32d2ef(0x78a)](_0x32d2ef(0x6be));}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x96d),_0x51e36d=>{const _0x5e2a4a=_0xe55837;if(!SceneManager[_0x5e2a4a(0x1d0)]())return;const _0x381e7d=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x381e7d)return;_0x381e7d[_0x5e2a4a(0x78a)]('battleFloat');}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x3d7),_0x2fbc29=>{const _0x108f78=_0xe55837;if(!SceneManager[_0x108f78(0x1d0)]())return;const _0x14aaf5=$gameTemp[_0x108f78(0x534)]();if(!_0x14aaf5)return;_0x14aaf5[_0x108f78(0x78a)](_0x108f78(0x801));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Movement_WaitForMovement',_0x30fd1c=>{const _0x6685c6=_0xe55837;if(!SceneManager[_0x6685c6(0x1d0)]())return;const _0x23c10b=$gameTemp[_0x6685c6(0x534)]();if(!_0x23c10b)return;_0x23c10b[_0x6685c6(0x78a)](_0x6685c6(0x151));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x5aa),_0x56958b=>{const _0x6872c6=_0xe55837;if(!SceneManager[_0x6872c6(0x1d0)]())return;const _0x58ea2f=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x58ea2f)return;_0x58ea2f[_0x6872c6(0x78a)]('battleOpacity');}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x10c),_0xe59df1=>{const _0x32b44a=_0xe55837;if(!SceneManager[_0x32b44a(0x1d0)]())return;const _0x57b9e4=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x57b9e4)return;_0x57b9e4[_0x32b44a(0x78a)](_0x32b44a(0x1bd));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x2b7),_0x471bde=>{const _0x40786d=_0xe55837;if(!SceneManager[_0x40786d(0x1d0)]())return;const _0x2c49eb=$gameTemp[_0x40786d(0x534)]();if(!_0x2c49eb)return;_0x2c49eb[_0x40786d(0x78a)](_0x40786d(0x772));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x560),_0x237c6c=>{const _0x5c6cb5=_0xe55837;if(!SceneManager[_0x5c6cb5(0x1d0)]())return;const _0x4c5ed6=$gameTemp[_0x5c6cb5(0x534)]();if(!_0x4c5ed6)return;_0x4c5ed6[_0x5c6cb5(0x78a)](_0x5c6cb5(0x6be));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0xa22),_0x36e635=>{const _0x3cc33c=_0xe55837;if(!SceneManager[_0x3cc33c(0x1d0)]())return;if(!Imported[_0x3cc33c(0x8ed)])return;VisuMZ['ConvertParams'](_0x36e635,_0x36e635);const _0x428029=$gameTemp[_0x3cc33c(0x534)](),_0x2375b1=_0x36e635[_0x3cc33c(0x63f)];if(!_0x428029)return;const _0x42703c=BattleManager['_spriteset'];if(!_0x42703c)return;_0x42703c['createActionSequenceProjectile'](_0x36e635);if(_0x2375b1)_0x428029[_0x3cc33c(0x78a)](_0x3cc33c(0x77c));}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x84a),_0x2b7d05=>{const _0x55176f=_0xe55837;if(!SceneManager[_0x55176f(0x1d0)]())return;if(!Imported[_0x55176f(0x8ed)])return;VisuMZ['ConvertParams'](_0x2b7d05,_0x2b7d05);const _0x2ae8e6=$gameTemp['getLastPluginCommandInterpreter'](),_0x51ad5c=_0x2b7d05['WaitForProjectile'];if(!_0x2ae8e6)return;const _0x1ee8ec=BattleManager[_0x55176f(0x54d)];if(!_0x1ee8ec)return;_0x1ee8ec[_0x55176f(0x5f8)](_0x2b7d05);if(_0x51ad5c)_0x2ae8e6[_0x55176f(0x78a)]('battleProjectiles');}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Projectile_Picture',_0x2270ed=>{const _0x44689d=_0xe55837;if(!SceneManager[_0x44689d(0x1d0)]())return;if(!Imported[_0x44689d(0x8ed)])return;VisuMZ[_0x44689d(0x313)](_0x2270ed,_0x2270ed);const _0x3aeeab=$gameTemp[_0x44689d(0x534)](),_0x1f6524=_0x2270ed[_0x44689d(0x63f)];if(!_0x3aeeab)return;const _0x3b075d=BattleManager[_0x44689d(0x54d)];if(!_0x3b075d)return;_0x3b075d[_0x44689d(0x5f8)](_0x2270ed);if(_0x1f6524)_0x3aeeab[_0x44689d(0x78a)](_0x44689d(0x77c));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x288),_0x864160=>{const _0x209b6d=_0xe55837;if(!SceneManager[_0x209b6d(0x1d0)]())return;if(!Imported[_0x209b6d(0x187)])return;VisuMZ[_0x209b6d(0x313)](_0x864160,_0x864160);const _0x215a7c=$gameTemp[_0x209b6d(0x534)](),_0x4bf314=_0x864160[_0x209b6d(0x753)];if(!_0x215a7c)return;$gameScreen[_0x209b6d(0x442)](_0x864160['SkewX'],_0x864160[_0x209b6d(0x379)],_0x864160[_0x209b6d(0x769)],_0x864160[_0x209b6d(0x76f)]);if(_0x4bf314)_0x215a7c[_0x209b6d(0x78a)](_0x209b6d(0x591));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Skew_Reset',_0x3c0b98=>{const _0x14b402=_0xe55837;if(!SceneManager[_0x14b402(0x1d0)]())return;if(!Imported[_0x14b402(0x187)])return;VisuMZ[_0x14b402(0x313)](_0x3c0b98,_0x3c0b98);const _0xa8f9f9=$gameTemp[_0x14b402(0x534)](),_0x5bbc82=_0x3c0b98[_0x14b402(0x753)];if(!_0xa8f9f9)return;$gameScreen[_0x14b402(0x442)](0x0,0x0,_0x3c0b98[_0x14b402(0x769)],_0x3c0b98[_0x14b402(0x76f)]);if(_0x5bbc82)_0xa8f9f9['setWaitMode'](_0x14b402(0x591));}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Skew_WaitForSkew',_0x41ce43=>{const _0x56dd3c=_0xe55837;if(!SceneManager[_0x56dd3c(0x1d0)]())return;if(!Imported[_0x56dd3c(0x187)])return;const _0xb3c20b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xb3c20b)return;_0xb3c20b[_0x56dd3c(0x78a)](_0x56dd3c(0x591));}),PluginManager[_0xe55837(0x74c)](pluginData['name'],_0xe55837(0x931),_0x687a77=>{const _0x17a298=_0xe55837;if(!SceneManager[_0x17a298(0x1d0)]())return;VisuMZ[_0x17a298(0x313)](_0x687a77,_0x687a77);const _0x19dfce=$gameTemp['getLastPluginCommandInterpreter'](),_0x37f6f6=_0x687a77[_0x17a298(0x57d)],_0xce9da1=_0x687a77[_0x17a298(0x586)];if(!_0x19dfce)return;BattleManager['_targetIndex']=_0x37f6f6,BattleManager[_0x17a298(0x92e)]=BattleManager['_allTargets']?BattleManager[_0x17a298(0x1ed)][BattleManager[_0x17a298(0x36c)]]||null:null,BattleManager['_target']&&_0xce9da1[_0x17a298(0x448)]()[_0x17a298(0x1ee)]()!==_0x17a298(0xa1)&&_0x19dfce['command119']([_0xce9da1]);}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],_0xe55837(0x6f1),_0x250b6e=>{const _0x3689aa=_0xe55837;if(!SceneManager[_0x3689aa(0x1d0)]())return;VisuMZ['ConvertParams'](_0x250b6e,_0x250b6e);const _0x1efa71=$gameTemp[_0x3689aa(0x534)](),_0x4f109f=_0x250b6e['JumpToLabel'];if(!_0x1efa71)return;BattleManager[_0x3689aa(0x36c)]++,BattleManager[_0x3689aa(0x92e)]=BattleManager[_0x3689aa(0x1ed)][BattleManager[_0x3689aa(0x36c)]]||null,BattleManager[_0x3689aa(0x92e)]&&_0x4f109f[_0x3689aa(0x448)]()[_0x3689aa(0x1ee)]()!=='UNTITLED'&&_0x1efa71['command119']([_0x4f109f]);}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x626),_0xaa080e=>{const _0xb37e98=_0xe55837;if(!SceneManager[_0xb37e98(0x1d0)]())return;VisuMZ['ConvertParams'](_0xaa080e,_0xaa080e);const _0x44532c=$gameTemp[_0xb37e98(0x534)](),_0x2abf5e=_0xaa080e[_0xb37e98(0x586)];if(!_0x44532c)return;BattleManager[_0xb37e98(0x36c)]--,BattleManager[_0xb37e98(0x92e)]=BattleManager[_0xb37e98(0x1ed)][BattleManager['_targetIndex']]||null,BattleManager[_0xb37e98(0x92e)]&&_0x2abf5e[_0xb37e98(0x448)]()[_0xb37e98(0x1ee)]()!==_0xb37e98(0xa1)&&_0x44532c[_0xb37e98(0x4f2)]([_0x2abf5e]);}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],'ActSeq_Target_RandTarget',_0x326870=>{const _0x248b8a=_0xe55837;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x248b8a(0x313)](_0x326870,_0x326870);const _0x34100a=$gameTemp[_0x248b8a(0x534)](),_0xbee799=_0x326870['ForceRandom'],_0x3c76b6=_0x326870[_0x248b8a(0x586)];if(!_0x34100a)return;const _0x3014e3=BattleManager[_0x248b8a(0x36c)];for(;;){if(_0x248b8a(0x69a)!==_0x248b8a(0x158)){BattleManager['_targetIndex']=Math[_0x248b8a(0x88a)](BattleManager['_allTargets'][_0x248b8a(0x4c5)]);if(!_0xbee799)break;if(BattleManager[_0x248b8a(0x36c)]!==_0x3014e3)break;if(BattleManager[_0x248b8a(0x1ed)]['length']<=0x1){if(_0x248b8a(0xa57)!=='dvedw'){function _0x579794(){const _0x5191b2=_0x248b8a,_0x3b1f78=_0x596156[_0x5191b2(0x278)][_0x5191b2(0x108)][_0x5191b2(0x214)];_0x3b1f78['LastSelected']?this['autoSelectLastSelected']():this[_0x5191b2(0x255)]();}}else{BattleManager['_targetIndex']=0x0;break;}}}else{function _0x53039e(){const _0x97affc=_0x248b8a;_0x43b87c['push'](this[_0x97affc(0x3be)]()[_0x97affc(0xa33)]());}}}BattleManager[_0x248b8a(0x92e)]=BattleManager[_0x248b8a(0x1ed)][BattleManager[_0x248b8a(0x36c)]]||null,BattleManager[_0x248b8a(0x92e)]&&_0x3c76b6[_0x248b8a(0x448)]()[_0x248b8a(0x1ee)]()!=='UNTITLED'&&_0x34100a[_0x248b8a(0x4f2)]([_0x3c76b6]);}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x8d5),_0x3c304f=>{const _0x415eb9=_0xe55837;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3c304f,_0x3c304f);const _0x540f39=VisuMZ['CreateActionSequenceTargets'](_0x3c304f[_0x415eb9(0xa15)]);for(const _0x4c7276 of _0x540f39){if(!_0x4c7276)continue;if(!_0x4c7276[_0x415eb9(0x107)]())continue;_0x4c7276[_0x415eb9(0x8f5)]();}}),PluginManager['registerCommand'](pluginData[_0xe55837(0x625)],'ActSeq_Weapon_NextActiveWeapon',_0x4ecf46=>{const _0x521705=_0xe55837;if(!SceneManager[_0x521705(0x1d0)]())return;VisuMZ[_0x521705(0x313)](_0x4ecf46,_0x4ecf46);const _0x5be6c9=$gameTemp[_0x521705(0x534)]();let _0xd285e2=![];const _0x425bc5=_0x4ecf46[_0x521705(0x586)],_0x346710=VisuMZ[_0x521705(0x67d)](_0x4ecf46[_0x521705(0xa15)]);for(const _0x45f91c of _0x346710){if(_0x521705(0x39e)===_0x521705(0x793)){function _0x448724(){const _0x12aea8=_0x521705;return _0x3f8e60[_0x12aea8(0x278)][_0x12aea8(0x108)][_0x12aea8(0x6c1)][_0x12aea8(0x70d)]['call'](this);}}else{if(!_0x45f91c)continue;if(!_0x45f91c[_0x521705(0x107)]())continue;_0x45f91c[_0x521705(0x296)]();if(_0x45f91c[_0x521705(0x577)]()[_0x521705(0x4c5)]>0x0){if(_0x521705(0x2a0)!==_0x521705(0x2a0)){function _0x1e7fd9(){return!![];}}else _0xd285e2=!![];}else _0x45f91c[_0x521705(0x8f5)]();}}_0xd285e2&&_0x425bc5['toUpperCase']()['trim']()!==_0x521705(0xa1)&&_0x5be6c9[_0x521705(0x4f2)]([_0x425bc5]);}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x6e4),_0x5efa9d=>{const _0x2adf03=_0xe55837;if(!SceneManager[_0x2adf03(0x1d0)]())return;VisuMZ[_0x2adf03(0x313)](_0x5efa9d,_0x5efa9d);let _0x218d7c=_0x5efa9d[_0x2adf03(0xa05)];_0x218d7c--,_0x218d7c=Math[_0x2adf03(0x220)](_0x218d7c,0x0);const _0x33742f=VisuMZ[_0x2adf03(0x67d)](_0x5efa9d[_0x2adf03(0xa15)]);for(const _0x3dc62e of _0x33742f){if(!_0x3dc62e)continue;if(!_0x3dc62e[_0x2adf03(0x107)]())continue;_0x3dc62e['setActiveWeaponSlot'](_0x218d7c);}}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0xfd),_0xbc3253=>{const _0x4a91ca=_0xe55837;if(!SceneManager[_0x4a91ca(0x1d0)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x4a91ca(0x313)](_0xbc3253,_0xbc3253);const _0x2ce252=$gameTemp['getLastPluginCommandInterpreter'](),_0x2c3ff0=_0xbc3253['WaitForZoom'];if(!_0x2ce252)return;$gameScreen[_0x4a91ca(0x28c)](_0xbc3253[_0x4a91ca(0x864)],_0xbc3253[_0x4a91ca(0x769)],_0xbc3253[_0x4a91ca(0x76f)]);if(_0x2c3ff0)_0x2ce252['setWaitMode'](_0x4a91ca(0x943));}),PluginManager['registerCommand'](pluginData['name'],_0xe55837(0x6dd),_0x4a4737=>{const _0x49364d=_0xe55837;if(!SceneManager[_0x49364d(0x1d0)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x49364d(0x313)](_0x4a4737,_0x4a4737);const _0x423a93=$gameTemp[_0x49364d(0x534)](),_0x400769=_0x4a4737[_0x49364d(0x327)];if(!_0x423a93)return;$gameScreen[_0x49364d(0x28c)](0x1,_0x4a4737[_0x49364d(0x769)],_0x4a4737['EasingType']);if(_0x400769)_0x423a93[_0x49364d(0x78a)]('battleZoom');}),PluginManager[_0xe55837(0x74c)](pluginData[_0xe55837(0x625)],_0xe55837(0x71d),_0x51a86a=>{const _0x54934a=_0xe55837;if(!SceneManager[_0x54934a(0x1d0)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x2a7fcf=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2a7fcf)return;_0x2a7fcf[_0x54934a(0x78a)](_0x54934a(0x943));}),VisuMZ[_0xe55837(0x278)]['Scene_Boot_onDatabaseLoaded']=Scene_Boot[_0xe55837(0x392)][_0xe55837(0x8fd)],Scene_Boot['prototype'][_0xe55837(0x8fd)]=function(){const _0x10d12e=_0xe55837;this[_0x10d12e(0x95c)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x10d12e(0x50e)](),this[_0x10d12e(0xa11)](),VisuMZ[_0x10d12e(0x278)][_0x10d12e(0x8d2)]['call'](this),this[_0x10d12e(0x81b)](),this[_0x10d12e(0x675)](),this[_0x10d12e(0x53a)]();},Scene_Boot[_0xe55837(0x392)][_0xe55837(0x81b)]=function(){const _0x547d88=_0xe55837;if(VisuMZ[_0x547d88(0x6da)])return;this[_0x547d88(0x399)](),this[_0x547d88(0x3e3)](),this[_0x547d88(0x8e6)]();},Scene_Boot[_0xe55837(0x392)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x23fc3a=_0xe55837,_0x241938=$dataSystem[_0x23fc3a(0x93a)][_0x23fc3a(0x4c5)];for(let _0x32f884=0x0;_0x32f884<_0x241938;_0x32f884++){if(_0x23fc3a(0x96)===_0x23fc3a(0xd8)){function _0xac841a(){const _0x4c9f97=_0x23fc3a;return _0xb14f5[_0x4c9f97(0x209)]?_0x591c1e[_0x4c9f97(0x9c3)](_0x4c9f97(0x8ff)):_0x185a76[_0x4c9f97(0x278)][_0x4c9f97(0x108)][_0x4c9f97(0x193)][_0x4c9f97(0x736)];}}else{const _0x503c01=$dataSystem[_0x23fc3a(0x99c)][_0x32f884];if(_0x503c01)continue;$dataSystem['attackMotions'][_0x32f884]=JsonEx[_0x23fc3a(0x9f8)]($dataSystem[_0x23fc3a(0x99c)][0x0]);}}},Scene_Boot[_0xe55837(0x392)][_0xe55837(0xd9)]=function(){const _0x3ca0f1=_0xe55837,_0x600c2b=VisuMZ[_0x3ca0f1(0x278)][_0x3ca0f1(0x108)];_0x600c2b[_0x3ca0f1(0x9fc)][_0x3ca0f1(0x1b8)]===undefined&&(_0x600c2b[_0x3ca0f1(0x9fc)][_0x3ca0f1(0x1b8)]='base');_0x600c2b['Actor'][_0x3ca0f1(0xd6)]===undefined&&(_0x600c2b['Actor']['SmoothImage']=![]);if(_0x600c2b['Enemy'][_0x3ca0f1(0xd6)]===undefined){if(_0x3ca0f1(0x467)!==_0x3ca0f1(0x467)){function _0x146933(){const _0x52536b=_0x3ca0f1;if(!this['canAttackBattleCore']())return![];return _0x4fa36e[_0x52536b(0x278)][_0x52536b(0x398)]['call'](this);}}else _0x600c2b['Enemy']['SmoothImage']=!![];}_0x600c2b[_0x3ca0f1(0x948)][_0x3ca0f1(0x98d)]===undefined&&(_0x600c2b[_0x3ca0f1(0x948)][_0x3ca0f1(0x98d)]=![]);if(_0x600c2b[_0x3ca0f1(0x948)][_0x3ca0f1(0x77f)]===undefined){if('oxPvG'!==_0x3ca0f1(0x1a9)){function _0xacd79b(){const _0xf3027e=_0x3ca0f1;this['battleStatusWindowAnimationContainer']()[_0xf3027e(0x9e6)](_0xfcae6a);}}else _0x600c2b['Actor'][_0x3ca0f1(0x77f)]=!![];}},VisuMZ[_0xe55837(0x8fc)]={},Scene_Boot[_0xe55837(0x392)][_0xe55837(0x50e)]=function(){const _0x20f852=_0xe55837;for(const _0x29931b of VisuMZ[_0x20f852(0x278)][_0x20f852(0x108)][_0x20f852(0x9fc)][_0x20f852(0x74f)]){if(_0x20f852(0x8d8)===_0x20f852(0x8d8)){if(!_0x29931b)continue;const _0x59261a=_0x29931b[_0x20f852(0x42d)][_0x20f852(0x448)]()['trim']();VisuMZ[_0x20f852(0x8fc)][_0x59261a]=_0x29931b;}else{function _0x146d42(){const _0x3dc360=_0x20f852;this[_0x3dc360(0x8ac)](),this['applyAngleChange']();}}}},VisuMZ[_0xe55837(0x278)]['RegExp']={},Scene_Boot[_0xe55837(0x392)][_0xe55837(0xa11)]=function(){const _0x111491=_0xe55837,_0x592d4d=VisuMZ[_0x111491(0x278)][_0x111491(0x2ed)],_0x3d5481=_0x111491(0x1d1),_0x434b43=[[_0x111491(0x17a),_0x111491(0x7cc)],[_0x111491(0xac),'POST-']],_0x457c30=[[_0x111491(0x971),_0x111491(0x1ca)],[_0x111491(0x966),_0x111491(0x1cf)]],_0x30d7ad=[['',''],[_0x111491(0x3c4),'AS\x20USER'],['AsTarget','AS\x20TARGET']];for(const _0x3ea6a3 of _0x457c30){for(const _0x5d9dbf of _0x30d7ad){for(const _0x567432 of _0x434b43){const _0x5a4941=_0x3ea6a3[0x0]['format'](_0x567432[0x0],_0x5d9dbf[0x0]),_0x18e271=_0x3ea6a3[0x1][_0x111491(0x11c)](_0x567432[0x1],_0x5d9dbf[0x1])[_0x111491(0x1ee)](),_0x121bba=new RegExp(_0x3d5481[_0x111491(0x11c)](_0x18e271),'i');_0x592d4d[_0x5a4941]=_0x121bba;}}}const _0x3e9c91=[['%1StartActionJS',_0x111491(0x7c5)],[_0x111491(0x4fa),_0x111491(0x44e)]];for(const _0xc143ea of _0x3e9c91){if(_0x111491(0x896)===_0x111491(0x61d)){function _0x5ce8be(){_0x3df5c4=_0x10e5d4>=_0xf6e90e?_0x44eac0:_0x535f95;}}else for(const _0x2f03a7 of _0x434b43){const _0x13bbb2=_0xc143ea[0x0]['format'](_0x2f03a7[0x0]),_0x1acc6f=_0xc143ea[0x1][_0x111491(0x11c)](_0x2f03a7[0x1]),_0x48d5c6=new RegExp(_0x3d5481[_0x111491(0x11c)](_0x1acc6f),'i');_0x592d4d[_0x13bbb2]=_0x48d5c6;}}const _0x2ed709=[[_0x111491(0x9a2),_0x111491(0x2b1)],[_0x111491(0x960),_0x111491(0x2cb)],[_0x111491(0x58d),'JS\x20BATTLE\x20VICTORY'],['BattleDefeatJS',_0x111491(0x2f2)],[_0x111491(0x52c),'JS\x20ESCAPE\x20SUCCESS'],[_0x111491(0x895),_0x111491(0x470)],[_0x111491(0x97d),'JS\x20%1START\x20TURN'],[_0x111491(0x219),_0x111491(0x8e8)],[_0x111491(0x1ea),_0x111491(0x15d)]];for(const _0x1780c3 of _0x2ed709){if(_0x111491(0x1d9)===_0x111491(0x13e)){function _0x4aacc5(){const _0x25a5f1=_0x111491,_0xed1e3e=_0x2adba2['x']+_0x10b55c[_0x25a5f1(0x639)]((_0x7eeda2['width']-_0x48f82b)/0x2);this[_0x25a5f1(0x85a)](_0x46f6c2,_0xed1e3e,_0x5f576e['y'],_0x4267fb);}}else for(const _0x3282a7 of _0x434b43){const _0x3ca912=_0x1780c3[0x0][_0x111491(0x11c)](_0x3282a7[0x0]),_0x3eece1=_0x1780c3[0x1][_0x111491(0x11c)](_0x3282a7[0x1]),_0x31c2cb=new RegExp(_0x3d5481[_0x111491(0x11c)](_0x3eece1),'i');_0x592d4d[_0x3ca912]=_0x31c2cb;}}},Scene_Boot['prototype'][_0xe55837(0x399)]=function(){const _0x1a4365=_0xe55837,_0x2c53ca=$dataSkills[_0x1a4365(0xa77)]($dataItems);for(const _0x162211 of _0x2c53ca){if(_0x1a4365(0x282)!==_0x1a4365(0x87e)){if(!_0x162211)continue;VisuMZ[_0x1a4365(0x278)][_0x1a4365(0x681)](_0x162211);}else{function _0x18522a(){const _0x391eeb=_0x1a4365;this[_0x391eeb(0x7ab)]=!![];}}}},Scene_Boot['prototype'][_0xe55837(0x3e3)]=function(){const _0x1860ba=_0xe55837,_0x35c4ed=$dataActors[_0x1860ba(0xa77)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x20ece5 of _0x35c4ed){if(!_0x20ece5)continue;VisuMZ[_0x1860ba(0x278)]['Parse_Notetags_TraitObjects'](_0x20ece5);}},Scene_Boot[_0xe55837(0x392)][_0xe55837(0x675)]=function(){const _0x34c89d=_0xe55837,_0x46f8d5=VisuMZ[_0x34c89d(0x278)][_0x34c89d(0x108)][_0x34c89d(0x6c1)][_0x34c89d(0x100)],_0x1cc673=[];for(const _0x37227c of _0x46f8d5){const _0x2bf2d0=$dataTroops[_0x37227c];if(_0x2bf2d0)_0x1cc673[_0x34c89d(0x30a)](JsonEx[_0x34c89d(0x9f8)](_0x2bf2d0));}for(const _0xc90038 of $dataTroops){if(!_0xc90038)continue;for(const _0xe6d0f3 of _0x1cc673){if(_0x34c89d(0x514)!==_0x34c89d(0x514)){function _0x2e9961(){const _0x10dca5=_0x34c89d;_0x5b5cbe['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x360b5d=_0x47d6ed(_0x212883['$1']),_0x2eb09b=_0x6d63b4(_0x58d9b8['$2']),_0xb9ba43=_0x2eb09b===0x1?this['_regionBattleback1']:this[_0x10dca5(0x195)],_0x189770=_0xd5f016(_0x5d8564['$3']);_0xb9ba43[_0x360b5d]=_0x189770;}}else{if(_0xe6d0f3['id']===_0xc90038['id'])continue;_0xc90038[_0x34c89d(0x7ac)]=_0xc90038[_0x34c89d(0x7ac)][_0x34c89d(0xa77)](_0xe6d0f3[_0x34c89d(0x7ac)]);}}}},Scene_Boot[_0xe55837(0x392)][_0xe55837(0x53a)]=function(){const _0x4c0a73=_0xe55837,_0x52ac11=VisuMZ['BattleCore']['Settings'][_0x4c0a73(0x6c1)];if(_0x52ac11['BattleStartEvent']>0x0&&$dataCommonEvents[_0x52ac11[_0x4c0a73(0x437)]]){if(_0x4c0a73(0x7f8)!==_0x4c0a73(0x7f8)){function _0x381a9a(){return;}}else{const _0x461200=$dataCommonEvents[_0x52ac11[_0x4c0a73(0x437)]],_0xd3627c=_0x461200[_0x4c0a73(0x656)][_0x4c0a73(0x4c5)]-0x2,_0x43bde5=_0x461200[_0x4c0a73(0x656)][_0xd3627c];if(_0x43bde5[_0x4c0a73(0x34f)]!==0xe6){const _0x1057af={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x590001=_0x461200['list'][_0x4c0a73(0x933)]();_0x461200[_0x4c0a73(0x656)][_0x4c0a73(0x1a4)](_0x1057af),_0x461200[_0x4c0a73(0x656)][_0x4c0a73(0x1a4)](_0x590001);}}}},Scene_Boot[_0xe55837(0x392)][_0xe55837(0x8e6)]=function(){const _0x3feaf3=_0xe55837,_0x2b3c05=$dataSkills[_0x3feaf3(0xa77)]($dataItems);for(const _0x37b428 of _0x2b3c05){if(_0x3feaf3(0x707)!=='vabhj'){function _0x724860(){const _0x44b665=_0x3feaf3;this[_0x44b665(0x8f4)]=this[_0x44b665(0xe9)];}}else{if(!_0x37b428)continue;VisuMZ[_0x3feaf3(0x278)]['Parse_Notetags_Targets'](_0x37b428);}}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x502)]=VisuMZ[_0xe55837(0x502)],VisuMZ[_0xe55837(0x502)]=function(_0x335a98){const _0xf7bdb=_0xe55837;if(VisuMZ[_0xf7bdb(0x278)][_0xf7bdb(0x502)]){if('YcYHm'!==_0xf7bdb(0x40d))VisuMZ[_0xf7bdb(0x278)][_0xf7bdb(0x502)][_0xf7bdb(0x782)](this,_0x335a98);else{function _0xe7d787(){const _0x3dc070=_0xf7bdb;if(!this[_0x3dc070(0x6a5)])return;this[_0x3dc070(0x341)]!==this['_linkedSprite'][_0x3dc070(0x341)]&&this[_0x3dc070(0x62b)](this['_linkedSprite'][_0x3dc070(0x341)]);}}}VisuMZ[_0xf7bdb(0x278)][_0xf7bdb(0xed)](_0x335a98);},VisuMZ['BattleCore'][_0xe55837(0x194)]=VisuMZ[_0xe55837(0x194)],VisuMZ[_0xe55837(0x194)]=function(_0x8a6626){const _0x464120=_0xe55837;if(VisuMZ[_0x464120(0x278)][_0x464120(0x194)]){if(_0x464120(0x5e6)===_0x464120(0x5e6))VisuMZ[_0x464120(0x278)][_0x464120(0x194)][_0x464120(0x782)](this,_0x8a6626);else{function _0x2d2e65(){const _0x42a8a1=_0x464120;if(!_0x4897d8)return![];return _0x16cfee[_0x42a8a1(0x3be)]()===this['friendsUnit']();}}}VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x8a6626);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x82b)]=VisuMZ[_0xe55837(0x82b)],VisuMZ[_0xe55837(0x82b)]=function(_0x566850){const _0x4027ad=_0xe55837;VisuMZ['BattleCore']['ParseSkillNotetags']&&VisuMZ[_0x4027ad(0x278)][_0x4027ad(0x82b)][_0x4027ad(0x782)](this,_0x566850),VisuMZ[_0x4027ad(0x278)]['Parse_Notetags_Action'](_0x566850),VisuMZ[_0x4027ad(0x278)][_0x4027ad(0x565)](_0x566850);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x461)]=VisuMZ[_0xe55837(0x461)],VisuMZ[_0xe55837(0x461)]=function(_0xaa0e94){const _0x4a22a5=_0xe55837;VisuMZ[_0x4a22a5(0x278)][_0x4a22a5(0x461)]&&VisuMZ['BattleCore'][_0x4a22a5(0x461)][_0x4a22a5(0x782)](this,_0xaa0e94),VisuMZ[_0x4a22a5(0x278)][_0x4a22a5(0x681)](_0xaa0e94),VisuMZ[_0x4a22a5(0x278)][_0x4a22a5(0x565)](_0xaa0e94);},VisuMZ['BattleCore'][_0xe55837(0x85e)]=VisuMZ[_0xe55837(0x85e)],VisuMZ[_0xe55837(0x85e)]=function(_0x54af02){const _0x4143ad=_0xe55837;VisuMZ[_0x4143ad(0x278)][_0x4143ad(0x85e)]&&VisuMZ[_0x4143ad(0x278)]['ParseWeaponNotetags']['call'](this,_0x54af02),VisuMZ['BattleCore'][_0x4143ad(0xed)](_0x54af02);},VisuMZ[_0xe55837(0x278)][_0xe55837(0xa42)]=VisuMZ['ParseArmorNotetags'],VisuMZ['ParseArmorNotetags']=function(_0x3ab825){const _0x2f78fa=_0xe55837;if(VisuMZ['BattleCore'][_0x2f78fa(0xa42)]){if(_0x2f78fa(0xa35)!=='YUzNS')VisuMZ[_0x2f78fa(0x278)][_0x2f78fa(0xa42)]['call'](this,_0x3ab825);else{function _0xb67d4(){const _0x49b785=_0x2f78fa,_0x437c12=_0xa0d228[_0x49b785(0x35c)];if(_0x437c12[_0x49b785(0x1c3)](/<SIDEVIEW SHADOW SCALE:[ ](\d+)([%％])>/i))return _0x380e3b(_0x200139['$1'])*0.01;else{if(_0x437c12[_0x49b785(0x1c3)](/<SIDEVIEW SHADOW SCALE:[ ](.*)>/i))return _0x4ec8b8(_0x3537eb['$1'])||0x0;}}}}VisuMZ[_0x2f78fa(0x278)]['Parse_Notetags_TraitObjects'](_0x3ab825);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x539)]=VisuMZ[_0xe55837(0x539)],VisuMZ[_0xe55837(0x539)]=function(_0x27dce4){const _0xb0e645=_0xe55837;VisuMZ['BattleCore']['ParseEnemyNotetags']&&VisuMZ[_0xb0e645(0x278)]['ParseEnemyNotetags'][_0xb0e645(0x782)](this,_0x27dce4),VisuMZ[_0xb0e645(0x278)]['Parse_Notetags_TraitObjects'](_0x27dce4);},VisuMZ[_0xe55837(0x278)]['ParseStateNotetags']=VisuMZ['ParseStateNotetags'],VisuMZ['ParseStateNotetags']=function(_0x267c0b){const _0x2863bd=_0xe55837;if(VisuMZ[_0x2863bd(0x278)]['ParseStateNotetags']){if(_0x2863bd(0x197)!==_0x2863bd(0x852))VisuMZ['BattleCore']['ParseStateNotetags'][_0x2863bd(0x782)](this,_0x267c0b);else{function _0xd37e8(){const _0x4a0ce0=_0x2863bd;this['_forcedBattleLayout']=_0x4a0ce0(0x4d5);}}}VisuMZ[_0x2863bd(0x278)][_0x2863bd(0xed)](_0x267c0b);},VisuMZ[_0xe55837(0x278)]['Parse_Notetags_Action']=function(_0x113d85){const _0x10c125=_0xe55837,_0x20f194=['PreApplyJS','PostApplyJS',_0x10c125(0x745),_0x10c125(0x25c),_0x10c125(0x4dd),_0x10c125(0x223),_0x10c125(0x45f),_0x10c125(0x40a)];for(const _0x21b729 of _0x20f194){VisuMZ[_0x10c125(0x278)][_0x10c125(0x104)](_0x113d85,_0x21b729);}const _0x3ee15c=_0x113d85[_0x10c125(0x35c)];if(_0x3ee15c[_0x10c125(0x1c3)](/<ALWAYS CRITICAL/i)){if(_0x10c125(0x25f)===_0x10c125(0x25f))_0x113d85[_0x10c125(0x3ff)][_0x10c125(0x1e6)]=!![];else{function _0x38dc3b(){return _0x32e958(_0x5bf213['$2']);}}}if(_0x3ee15c[_0x10c125(0x1c3)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)){if(_0x10c125(0x851)!=='GjvcS'){function _0x4580fa(){this['autoSelectPriority']();}}else _0x113d85[_0x10c125(0x9b1)]=Math[_0x10c125(0x220)](0x1,Number(RegExp['$1']));}_0x3ee15c[_0x10c125(0x1c3)](/<TARGET:[ ](.*)>/i)&&(_0x113d85[_0x10c125(0x70c)]=String(RegExp['$1'])[_0x10c125(0x448)]()[_0x10c125(0x1ee)]());},VisuMZ['BattleCore']['Parse_Notetags_TraitObjects']=function(_0x33e8cb){const _0x5679e4=_0xe55837,_0x412bfd=[_0x5679e4(0x409),_0x5679e4(0x978),_0x5679e4(0x1f7),_0x5679e4(0x7f4),'PreApplyAsTargetJS','PostApplyAsTargetJS',_0x5679e4(0x3c3),_0x5679e4(0x52f),_0x5679e4(0x4dd),_0x5679e4(0x223),_0x5679e4(0x45f),_0x5679e4(0x40a),_0x5679e4(0x6c9),_0x5679e4(0x614),'PreEndBattleJS','PostEndBattleJS',_0x5679e4(0x58d),_0x5679e4(0x789),_0x5679e4(0x52c),_0x5679e4(0x895),_0x5679e4(0x51a),_0x5679e4(0x9e9),'PreEndTurnJS',_0x5679e4(0x809),_0x5679e4(0x21b),_0x5679e4(0xa54)];for(const _0x4abe23 of _0x412bfd){VisuMZ[_0x5679e4(0x278)]['createJS'](_0x33e8cb,_0x4abe23);}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x565)]=function(_0x778044){const _0x1fee05=_0xe55837,_0x3ed83b=_0x778044[_0x1fee05(0x35c)];if(_0x3ed83b[_0x1fee05(0x1c3)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x5a3c73=String(RegExp['$1']),_0x310890=VisuMZ[_0x1fee05(0x278)]['createKeyJS'](_0x778044,'Targets');VisuMZ[_0x1fee05(0x278)][_0x1fee05(0xb0)](_0x5a3c73,_0x310890);}if(_0x3ed83b[_0x1fee05(0x1c3)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x1520ce=String(RegExp['$1']),_0x15fc88=VisuMZ['BattleCore'][_0x1fee05(0x678)](_0x778044,_0x1fee05(0x3ea));VisuMZ[_0x1fee05(0x278)][_0x1fee05(0x718)](_0x1520ce,_0x15fc88);}},VisuMZ[_0xe55837(0x278)]['JS']={},VisuMZ[_0xe55837(0x278)][_0xe55837(0x104)]=function(_0x466863,_0x259524){const _0x2b6a2c=_0xe55837,_0x294d22=_0x466863['note'];if(_0x294d22['match'](VisuMZ[_0x2b6a2c(0x278)]['RegExp'][_0x259524])){const _0x59e777=RegExp['$1'],_0x4dbaa0=_0x2b6a2c(0x92b)['format'](_0x59e777),_0x38dd17=VisuMZ[_0x2b6a2c(0x278)][_0x2b6a2c(0x678)](_0x466863,_0x259524);VisuMZ['BattleCore']['JS'][_0x38dd17]=new Function(_0x4dbaa0);}},VisuMZ[_0xe55837(0x278)]['createKeyJS']=function(_0x50ec5e,_0x5bbcc7){const _0x55eaf3=_0xe55837;let _0x4b1d7f='';if($dataActors[_0x55eaf3(0x450)](_0x50ec5e))_0x4b1d7f='Actor-%1-%2'[_0x55eaf3(0x11c)](_0x50ec5e['id'],_0x5bbcc7);if($dataClasses['includes'](_0x50ec5e))_0x4b1d7f='Class-%1-%2'[_0x55eaf3(0x11c)](_0x50ec5e['id'],_0x5bbcc7);if($dataSkills[_0x55eaf3(0x450)](_0x50ec5e))_0x4b1d7f=_0x55eaf3(0x4ff)['format'](_0x50ec5e['id'],_0x5bbcc7);if($dataItems['includes'](_0x50ec5e))_0x4b1d7f='Item-%1-%2'[_0x55eaf3(0x11c)](_0x50ec5e['id'],_0x5bbcc7);if($dataWeapons['includes'](_0x50ec5e))_0x4b1d7f=_0x55eaf3(0x8dd)[_0x55eaf3(0x11c)](_0x50ec5e['id'],_0x5bbcc7);if($dataArmors[_0x55eaf3(0x450)](_0x50ec5e))_0x4b1d7f='Armor-%1-%2'['format'](_0x50ec5e['id'],_0x5bbcc7);if($dataEnemies[_0x55eaf3(0x450)](_0x50ec5e))_0x4b1d7f='Enemy-%1-%2'[_0x55eaf3(0x11c)](_0x50ec5e['id'],_0x5bbcc7);if($dataStates[_0x55eaf3(0x450)](_0x50ec5e))_0x4b1d7f='State-%1-%2'['format'](_0x50ec5e['id'],_0x5bbcc7);return _0x4b1d7f;},VisuMZ['BattleCore'][_0xe55837(0xb0)]=function(_0x52d974,_0x2222be){const _0x15fc3c='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'['format'](_0x52d974);VisuMZ['BattleCore']['JS'][_0x2222be]=new Function(_0x15fc3c);},VisuMZ['BattleCore']['createCommandVisibleJS']=function(_0x47ddc4,_0x149f94){const _0x47083a=_0xe55837,_0x19f5f1='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0x47083a(0x11c)](_0x47ddc4);VisuMZ[_0x47083a(0x278)]['JS'][_0x149f94]=new Function(_0x19f5f1);},TextManager['autoBattle']=VisuMZ[_0xe55837(0x278)][_0xe55837(0x108)][_0xe55837(0xa64)][_0xe55837(0x55b)],TextManager[_0xe55837(0x27c)]=VisuMZ[_0xe55837(0x278)]['Settings'][_0xe55837(0x193)][_0xe55837(0x7a8)],TextManager[_0xe55837(0x22c)]=VisuMZ['BattleCore'][_0xe55837(0x108)][_0xe55837(0x193)]['StyleName'],TextManager[_0xe55837(0xaa)]=VisuMZ['BattleCore']['Settings'][_0xe55837(0x670)]['Name'],ColorManager[_0xe55837(0xde)]=function(_0x1b4891){const _0x4127af=_0xe55837;_0x1b4891=String(_0x1b4891);if(_0x1b4891[_0x4127af(0x1c3)](/#(.*)/i))return _0x4127af(0x81e)[_0x4127af(0x11c)](String(RegExp['$1']));else{if(_0x4127af(0x111)!=='fvwAW')return this['textColor'](Number(_0x1b4891));else{function _0x196626(){const _0x12a566=_0x4127af;this[_0x12a566(0x9ca)]=this[_0x12a566(0x779)],this[_0x12a566(0x76c)]&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0);}}}},DataManager[_0xe55837(0x1b2)]=function(_0x3653e7){const _0xc3dd26=_0xe55837;if(_0x3653e7[_0xc3dd26(0x35c)][_0xc3dd26(0x1c3)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x337759=String(RegExp['$1'])['toUpperCase']()['trim']();if(_0x337759==='MANUAL')return _0xc3dd26(0x999);if(VisuMZ[_0xc3dd26(0x8fc)][_0x337759])return _0x337759;}const _0x431024=VisuMZ[_0xc3dd26(0x278)][_0xc3dd26(0x108)][_0xc3dd26(0x9fc)][_0xc3dd26(0x6c3)][_0xc3dd26(0x448)]()[_0xc3dd26(0x1ee)]();if(VisuMZ[_0xc3dd26(0x8fc)][_0x431024])return _0x431024;return _0xc3dd26(0x999);},DataManager['getStypeIdWithName']=function(_0x566317){const _0x3b375b=_0xe55837;_0x566317=_0x566317[_0x3b375b(0x448)]()[_0x3b375b(0x1ee)](),this['_stypeIDs']=this[_0x3b375b(0x633)]||{};if(this[_0x3b375b(0x633)][_0x566317])return this['_stypeIDs'][_0x566317];for(let _0x1eda11=0x1;_0x1eda11<0x64;_0x1eda11++){if(_0x3b375b(0x6b8)!==_0x3b375b(0x6b8)){function _0x1825d3(){const _0x2f05dc=_0x3b375b;_0x501de2+=_0x35f273[_0x2f05dc(0x124)]-_0x19816a;}}else{if(!$dataSystem[_0x3b375b(0x133)][_0x1eda11])continue;let _0x1518cc=$dataSystem[_0x3b375b(0x133)][_0x1eda11][_0x3b375b(0x448)]()['trim']();_0x1518cc=_0x1518cc[_0x3b375b(0x1eb)](/\x1I\[(\d+)\]/gi,''),_0x1518cc=_0x1518cc[_0x3b375b(0x1eb)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x1518cc]=_0x1eda11;}}return this[_0x3b375b(0x633)][_0x566317]||0x0;},DataManager[_0xe55837(0x476)]=function(_0x56b89b){const _0x119e6c=_0xe55837;_0x56b89b=_0x56b89b[_0x119e6c(0x448)]()[_0x119e6c(0x1ee)](),this['_skillIDs']=this[_0x119e6c(0x66a)]||{};if(this['_skillIDs'][_0x56b89b])return this['_skillIDs'][_0x56b89b];for(const _0x5ee1b6 of $dataSkills){if(!_0x5ee1b6)continue;this['_skillIDs'][_0x5ee1b6[_0x119e6c(0x625)][_0x119e6c(0x448)]()[_0x119e6c(0x1ee)]()]=_0x5ee1b6['id'];}return this['_skillIDs'][_0x56b89b]||0x0;},DataManager['getEnemyIdWithName']=function(_0x13d142){const _0x4229e6=_0xe55837;_0x13d142=_0x13d142[_0x4229e6(0x448)]()['trim'](),this['_enemyIDs']=this[_0x4229e6(0x181)]||{};if(this[_0x4229e6(0x181)][_0x13d142])return this[_0x4229e6(0x181)][_0x13d142];for(const _0x4f63d5 of $dataEnemies){if(_0x4229e6(0x7d4)===_0x4229e6(0x871)){function _0x1aa4b9(){const _0x1f7bdf=_0x4229e6;_0x468563['prototype'][_0x1f7bdf(0x33c)][_0x1f7bdf(0x782)](this);}}else{if(!_0x4f63d5)continue;this['_enemyIDs'][_0x4f63d5['name']['toUpperCase']()[_0x4229e6(0x1ee)]()]=_0x4f63d5['id'];}}return this['_enemyIDs'][_0x13d142]||0x0;},DataManager[_0xe55837(0xa55)]=function(_0x3b8999){const _0x1e5d93=_0xe55837;_0x3b8999=_0x3b8999[_0x1e5d93(0x448)]()['trim'](),this[_0x1e5d93(0x43e)]=this[_0x1e5d93(0x43e)]||{};if(this[_0x1e5d93(0x43e)][_0x3b8999])return this['_wtypeIDs'][_0x3b8999];for(let _0x2e6aec=0x1;_0x2e6aec<0x64;_0x2e6aec++){if(!$dataSystem[_0x1e5d93(0x93a)][_0x2e6aec])continue;let _0x3254ee=$dataSystem[_0x1e5d93(0x93a)][_0x2e6aec]['toUpperCase']()['trim']();_0x3254ee=_0x3254ee['replace'](/\x1I\[(\d+)\]/gi,''),_0x3254ee=_0x3254ee[_0x1e5d93(0x1eb)](/\\I\[(\d+)\]/gi,''),this[_0x1e5d93(0x43e)][_0x3254ee]=_0x2e6aec;}return this['_wtypeIDs'][_0x1e5d93(0x968)]=0x0,this['_wtypeIDs'][_0x3b8999]||0x0;},DataManager[_0xe55837(0x162)]=function(_0x249e46){const _0x24d0bd=_0xe55837,_0x22e6fa=_0x24d0bd(0x402);let _0x522110=_0x249e46[_0x24d0bd(0x5c7)],_0x4c1f44=_0x249e46[_0x24d0bd(0x625)];const _0x35351f=_0x249e46['note'];_0x35351f[_0x24d0bd(0x1c3)](/<DISPLAY ICON: (\d+)>/i)&&(_0x522110=Number(RegExp['$1']));if(_0x35351f[_0x24d0bd(0x1c3)](/<DISPLAY TEXT: (.*)>/i)){if(_0x24d0bd(0x6f0)!==_0x24d0bd(0x87f))_0x4c1f44=String(RegExp['$1']);else{function _0x574852(){const _0x6aecbb=_0x24d0bd;_0x325ffd['BattleCore'][_0x6aecbb(0x3d9)][_0x6aecbb(0x782)](this);}}}return _0x22e6fa[_0x24d0bd(0x11c)](_0x522110,_0x4c1f44);},DataManager[_0xe55837(0x385)]=function(_0x30c069){const _0x19d670=_0xe55837;if(_0x30c069[_0x19d670(0x35c)][_0x19d670(0x1c3)](/<COMMAND TEXT: (.*)>/i)){if(_0x19d670(0x307)!=='wIkpD')return String(RegExp['$1']);else{function _0x2295c5(){_0x5a205a+=_0x18729f;}}}else{if('KmgPF'!==_0x19d670(0x4e0))return _0x30c069['name'];else{function _0x19d6bf(){const _0x1b4308=_0x19d670;_0x3f18d4[_0x1b4308(0x278)]['ParseClassNotetags']&&_0x1baa9f[_0x1b4308(0x278)][_0x1b4308(0x194)][_0x1b4308(0x782)](this,_0x4cf6ea),_0x5da9d0[_0x1b4308(0x278)][_0x1b4308(0xed)](_0x271ea1);}}}},DataManager['battleCommandIcon']=function(_0x2b318c){const _0xa295c4=_0xe55837;return _0x2b318c[_0xa295c4(0x35c)][_0xa295c4(0x1c3)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x2b318c[_0xa295c4(0x5c7)];},DataManager[_0xe55837(0x9f2)]=function(_0x963ba){const _0x1929cf=_0xe55837,_0x5bf33f=$dataEnemies[_0x963ba];if(_0x5bf33f){if(_0x5bf33f[_0x1929cf(0x35c)][_0x1929cf(0x1c3)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x25b11f=String(RegExp['$1'])[_0x1929cf(0x4d1)](/[\r\n]+/)[_0x1929cf(0x1ad)](''),_0x18294a=this['processRandomizedData'](_0x25b11f);_0x963ba=this['getEnemyIdWithName'](_0x18294a)||_0x963ba,_0x963ba=DataManager[_0x1929cf(0x9f2)](_0x963ba);}}return _0x963ba;},DataManager[_0xe55837(0x425)]=function(_0x353433){const _0x2a66c8=_0xe55837;let _0x1dbaa1=0x0;const _0x1bde04={};for(const _0x16bca6 of _0x353433){if(_0x2a66c8(0xf4)!=='CtPNR'){if(_0x16bca6['match'](/(.*):[ ](\d+)/i)){const _0x1b918b=String(RegExp['$1'])[_0x2a66c8(0x1ee)](),_0x5bd442=Number(RegExp['$2']);_0x1bde04[_0x1b918b]=_0x5bd442,_0x1dbaa1+=_0x5bd442;}else{if(_0x16bca6[_0x2a66c8(0x1c3)](/(.*):[ ](\d+\.?\d+)/i)){const _0x445a93=String(RegExp['$1'])[_0x2a66c8(0x1ee)](),_0x50406a=Number(RegExp['$2']);_0x1bde04[_0x445a93]=_0x50406a,_0x1dbaa1+=_0x50406a;}else{if(_0x16bca6!==''){if(_0x2a66c8(0x90c)===_0x2a66c8(0x4b3)){function _0x41020d(){const _0x46ce72=_0x2a66c8;if(!_0x141a7b[_0x46ce72(0x1d0)]())return;const _0x9a1427=_0x2286c6[_0x46ce72(0x534)]();if(!_0x9a1427)return;_0x9a1427[_0x46ce72(0x78a)]('battleGrow');}}else _0x1bde04[_0x16bca6]=0x1,_0x1dbaa1++;}}}}else{function _0x578a9a(){const _0x56e618=_0x2a66c8;if(this[_0x56e618(0x2cc)]()==='border')return this['skillItemWindowRectBorderStyle']();else return this['isSkillItemWindowsMiddle']()?this[_0x56e618(0x6fa)]():_0x5aa31d[_0x56e618(0x278)][_0x56e618(0x40b)][_0x56e618(0x782)](this);}}}if(_0x1dbaa1<=0x0)return'';let _0x49755c=Math[_0x2a66c8(0x9ce)]()*_0x1dbaa1;for(const _0x5e86dc in _0x1bde04){_0x49755c-=_0x1bde04[_0x5e86dc];if(_0x49755c<=0x0)return _0x5e86dc;}return'';},DataManager[_0xe55837(0x774)]=function(_0x879327){const _0x7d55ba=_0xe55837;if(!_0x879327)return![];if(!VisuMZ[_0x7d55ba(0x278)][_0x7d55ba(0x108)]['ActionSequence'][_0x7d55ba(0x9ac)])return![];if(_0x879327[_0x7d55ba(0x35c)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x879327['note'][_0x7d55ba(0x1c3)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x52bdde of _0x879327[_0x7d55ba(0x775)]){if('Dskcv'===_0x7d55ba(0x39d)){function _0x4e6872(){const _0x285daf=_0x7d55ba;if(!_0xa7f30b)return![];return _0x43951d[_0x285daf(0x105)]()===this['friendsUnit']();}}else{if(!_0x52bdde)continue;if(_0x52bdde[_0x7d55ba(0x34f)]===Game_Action[_0x7d55ba(0x36d)])return!![];}}return![];},ConfigManager['autoBattleAtStart']=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0xe55837(0x9d2)]=ConfigManager[_0xe55837(0x9d2)]??![],ConfigManager[_0xe55837(0xaa)]=ConfigManager[_0xe55837(0xaa)]??!![],VisuMZ['BattleCore'][_0xe55837(0x6bb)]=ConfigManager['makeData'],ConfigManager[_0xe55837(0x1c5)]=function(){const _0x1197fa=_0xe55837,_0x387ab0=VisuMZ[_0x1197fa(0x278)][_0x1197fa(0x6bb)][_0x1197fa(0x782)](this);return _0x387ab0[_0x1197fa(0x3b3)]=this[_0x1197fa(0x3b3)],_0x387ab0[_0x1197fa(0x9d2)]=this[_0x1197fa(0x9d2)],_0x387ab0[_0x1197fa(0xaa)]=this[_0x1197fa(0xaa)],_0x387ab0;},VisuMZ[_0xe55837(0x278)][_0xe55837(0x7f6)]=ConfigManager[_0xe55837(0x516)],ConfigManager['applyData']=function(_0xf50a53){const _0x116ff7=_0xe55837;VisuMZ['BattleCore']['ConfigManager_applyData'][_0x116ff7(0x782)](this,_0xf50a53);_0x116ff7(0x3b3)in _0xf50a53?this[_0x116ff7(0x3b3)]=_0xf50a53[_0x116ff7(0x3b3)]:this[_0x116ff7(0x3b3)]=![];_0x116ff7(0x9d2)in _0xf50a53?this[_0x116ff7(0x9d2)]=_0xf50a53[_0x116ff7(0x9d2)]:this[_0x116ff7(0x9d2)]=![];if(_0x116ff7(0xaa)in _0xf50a53)this[_0x116ff7(0xaa)]=_0xf50a53[_0x116ff7(0xaa)];else{if('IxEOA'==='eaUFq'){function _0x43257b(){const _0x5bdf76=_0x116ff7;_0x508539[_0x5bdf76(0x392)][_0x5bdf76(0x25b)][_0x5bdf76(0x782)](this);if(this['_commandNameWindow'])this[_0x5bdf76(0x36b)]();}}else this['visualHpGauge']=!![];}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x477)]=BattleManager[_0xe55837(0x120)],BattleManager[_0xe55837(0x120)]=function(){const _0x3db406=_0xe55837;VisuMZ[_0x3db406(0x278)]['BattleManager_initMembers'][_0x3db406(0x782)](this),this[_0x3db406(0x441)]=[];},BattleManager[_0xe55837(0x7da)]=function(){const _0x1924f6=_0xe55837;if(!SceneManager[_0x1924f6(0x1d0)]())return;const _0x4e3903=SceneManager['_scene'][_0x1924f6(0x418)];if(_0x4e3903)_0x4e3903[_0x1924f6(0x6cc)]();},BattleManager['battleSys']=function(){const _0x4a3cd9=_0xe55837;if(BattleManager[_0x4a3cd9(0x6a1)]())return _0x4a3cd9(0x693);return _0x4a3cd9(0x164);},BattleManager[_0xe55837(0x206)]=function(_0x1a17ee){const _0x179760=_0xe55837;return _0x1a17ee=_0x1a17ee[_0x179760(0x448)]()[_0x179760(0x1ee)](),this[_0x179760(0x488)]()===_0x1a17ee;},BattleManager['isDTB']=function(){const _0x234544=_0xe55837;return this[_0x234544(0x206)](_0x234544(0x164));},BattleManager['isTurnBased']=function(){const _0x2c0fea=_0xe55837;return this[_0x2c0fea(0x725)]();},BattleManager['isTickBased']=function(){const _0x2d351e=_0xe55837;return!this[_0x2d351e(0x292)]();},BattleManager[_0xe55837(0x836)]=function(){const _0x26c134=_0xe55837;return!this[_0x26c134(0x292)]()&&!this[_0x26c134(0x471)]();},BattleManager[_0xe55837(0x8e7)]=function(_0x3172c1){const _0x4fbfd8=_0xe55837;$gameParty[_0x4fbfd8(0x8e7)](_0x3172c1),$gameTroop['processBattleCoreJS'](_0x3172c1);},VisuMZ['BattleCore'][_0xe55837(0x5cd)]=BattleManager[_0xe55837(0x290)],BattleManager[_0xe55837(0x290)]=function(){const _0x504f93=_0xe55837;this[_0x504f93(0x4e8)]=![],this[_0x504f93(0x9ed)]=ConfigManager[_0x504f93(0x3b3)],this[_0x504f93(0x8e7)]('PreStartBattleJS'),VisuMZ['BattleCore'][_0x504f93(0x5cd)][_0x504f93(0x782)](this),this[_0x504f93(0x8e7)]('PostStartBattleJS');},BattleManager[_0xe55837(0xa60)]=function(_0x9e6c53){const _0x2785b7=_0xe55837,_0x1c0e8f=VisuMZ[_0x2785b7(0x278)][_0x2785b7(0x108)][_0x2785b7(0x6c1)];if(_0x1c0e8f['BattleEndEvent']&&VisuMZ[_0x2785b7(0x278)][_0x2785b7(0x8ee)](_0x1c0e8f['BattleEndEvent'])){if(_0x2785b7(0x65c)===_0x2785b7(0x96e)){function _0x58ff8f(){const _0x1d4380=_0x2785b7;if(this[_0x1d4380(0x78e)]===_0x4018f0)return;_0xd60a2f[_0x1d4380(0x392)][_0x1d4380(0xa20)][_0x1d4380(0x782)](this);}}else $gameTemp[_0x2785b7(0x5ae)](_0x1c0e8f[_0x2785b7(0x581)]);}const _0x14817c='%1Event'['format'](_0x9e6c53);if(_0x1c0e8f[_0x14817c]&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x1c0e8f[_0x14817c])){if(_0x2785b7(0x8e1)===_0x2785b7(0x8e1))$gameTemp[_0x2785b7(0x5ae)](_0x1c0e8f[_0x14817c]);else{function _0x3fc05d(){const _0x461b27=_0x2785b7;this[_0x461b27(0x3b8)]();}}}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x805)]=BattleManager[_0xe55837(0x338)],BattleManager['processVictory']=function(){const _0x2dd65d=_0xe55837;this[_0x2dd65d(0x8e7)]('BattleVictoryJS'),VisuMZ[_0x2dd65d(0x278)][_0x2dd65d(0x805)][_0x2dd65d(0x782)](this),this[_0x2dd65d(0xa60)](_0x2dd65d(0x7bf));},VisuMZ[_0xe55837(0x278)][_0xe55837(0x61f)]=BattleManager['processDefeat'],BattleManager[_0xe55837(0x2ba)]=function(){const _0x3b2baa=_0xe55837;this[_0x3b2baa(0x8e7)](_0x3b2baa(0x789)),VisuMZ[_0x3b2baa(0x278)]['BattleManager_processDefeat'][_0x3b2baa(0x782)](this),this[_0x3b2baa(0xa60)](_0x3b2baa(0x275));},VisuMZ['BattleCore']['BattleManager_endBattle']=BattleManager[_0xe55837(0x41e)],BattleManager[_0xe55837(0x41e)]=function(_0x5b7c2b){const _0x40bb5d=_0xe55837;this[_0x40bb5d(0x4e8)]=!![],this[_0x40bb5d(0x9ed)]=![],this[_0x40bb5d(0x8e7)](_0x40bb5d(0x8a7)),VisuMZ[_0x40bb5d(0x278)][_0x40bb5d(0x25a)]['call'](this,_0x5b7c2b),this['processBattleCoreJS'](_0x40bb5d(0x8b9));},VisuMZ[_0xe55837(0x278)]['BattleManager_startTurn']=BattleManager['startTurn'],BattleManager[_0xe55837(0x8e5)]=function(){const _0x119b3c=_0xe55837;if(this[_0x119b3c(0x292)]())this[_0x119b3c(0x8e7)](_0x119b3c(0x51a));VisuMZ[_0x119b3c(0x278)][_0x119b3c(0x171)][_0x119b3c(0x782)](this);if(this[_0x119b3c(0x292)]())this[_0x119b3c(0x8e7)](_0x119b3c(0x9e9));},VisuMZ['BattleCore'][_0xe55837(0x77d)]=BattleManager['startAction'],BattleManager[_0xe55837(0x62f)]=function(){const _0x1659b2=_0xe55837,_0x22f316=this[_0x1659b2(0xec)]['currentAction']();if(_0x22f316)_0x22f316[_0x1659b2(0x237)]('PreStartActionJS');VisuMZ[_0x1659b2(0x278)][_0x1659b2(0x77d)][_0x1659b2(0x782)](this);if(_0x22f316)_0x22f316[_0x1659b2(0x237)](_0x1659b2(0x223));},VisuMZ[_0xe55837(0x278)][_0xe55837(0x3e7)]=BattleManager['endAction'],BattleManager[_0xe55837(0x573)]=function(){const _0x5541bd=_0xe55837,_0x59e398=this[_0x5541bd(0x815)];_0x59e398&&_0x59e398[_0x5541bd(0x237)]('PreEndActionJS');VisuMZ['BattleCore']['BattleManager_endAction']['call'](this);if(_0x59e398){if(_0x5541bd(0xdf)===_0x5541bd(0xa28)){function _0x5541f0(){const _0x5ca9a0=_0x5541bd;this['_battleCoreBattleStartEvent']=!![],_0x4e2510['reserveCommonEvent'](_0x3b5547['BattleStartEvent']),_0x5c957e[_0x5ca9a0(0x7e4)](),_0x3b27f5[_0x5ca9a0(0x598)][_0x5ca9a0(0x5e7)]=!![];}}else _0x59e398[_0x5541bd(0x237)](_0x5541bd(0x40a));}this['refreshBattlerMotions'](this['allBattleMembers']());},BattleManager[_0xe55837(0x243)]=function(_0x97d4da){const _0x33ecb2=_0xe55837;for(const _0x1c6e6a of _0x97d4da){if(!_0x1c6e6a)continue;if(!_0x1c6e6a['battler']())continue;_0x1c6e6a['battler']()[_0x33ecb2(0x659)]();}},BattleManager[_0xe55837(0xa78)]=function(){const _0x39518f=_0xe55837;!this[_0x39518f(0xa2)]['isBusy']()&&this[_0x39518f(0x573)]();},Game_Battler[_0xe55837(0x392)][_0xe55837(0x308)]=function(){const _0x2c54b5=_0xe55837;this[_0x2c54b5(0x7d1)]();if(Imported['VisuMZ_1_SkillsStatesCore']){const _0x143d26=VisuMZ[_0x2c54b5(0x5c1)]['Settings']['States'];if(_0x143d26&&_0x143d26[_0x2c54b5(0x1f0)]===![]){if(_0x2c54b5(0x509)==='nycrd'){function _0x57834c(){const _0x8904ff=_0x2c54b5;return _0x6513c7['BattleCore'][_0x8904ff(0x108)][_0x8904ff(0x948)][_0x8904ff(0x98b)];}}else this[_0x2c54b5(0x553)](0x1);}}else this[_0x2c54b5(0x553)](0x1);this[_0x2c54b5(0xa30)]();},BattleManager[_0xe55837(0xa00)]=function(){const _0x5476b4=_0xe55837;this[_0x5476b4(0x59a)]=VisuMZ[_0x5476b4(0x278)]['Settings'][_0x5476b4(0x6c1)][_0x5476b4(0x689)][_0x5476b4(0x782)](this);},VisuMZ[_0xe55837(0x278)]['BattleManager_onEscapeSuccess']=BattleManager[_0xe55837(0x29e)],BattleManager[_0xe55837(0x29e)]=function(){const _0x20fe12=_0xe55837;this[_0x20fe12(0x8e7)]('EscapeSuccessJS'),BattleManager['_spriteset'][_0x20fe12(0xce)](),VisuMZ[_0x20fe12(0x278)][_0x20fe12(0x251)][_0x20fe12(0x782)](this),this[_0x20fe12(0xa60)](_0x20fe12(0x116));},VisuMZ[_0xe55837(0x278)][_0xe55837(0x4ef)]=BattleManager[_0xe55837(0x86b)],BattleManager[_0xe55837(0x86b)]=function(){const _0x91d1d4=_0xe55837;this[_0x91d1d4(0x8e7)](_0x91d1d4(0x895));const _0x15dc3e=this[_0x91d1d4(0x59a)];VisuMZ[_0x91d1d4(0x278)][_0x91d1d4(0x4ef)][_0x91d1d4(0x782)](this),this[_0x91d1d4(0x59a)]=_0x15dc3e+VisuMZ[_0x91d1d4(0x278)][_0x91d1d4(0x108)]['Mechanics'][_0x91d1d4(0x15c)][_0x91d1d4(0x782)](this),this[_0x91d1d4(0xa60)](_0x91d1d4(0x6b3));},BattleManager[_0xe55837(0x713)]=function(){const _0x1ab7bc=_0xe55837;let _0x1e268f=![];if(this[_0x1ab7bc(0x1c1)]())for(const _0x409ac6 of $gameTroop[_0x1ab7bc(0x2d2)]()){if('yHagI'!==_0x1ab7bc(0x5f3))this[_0x1ab7bc(0xa2)][_0x1ab7bc(0x30a)](_0x1ab7bc(0x390),TextManager[_0x1ab7bc(0x1b5)][_0x1ab7bc(0x11c)](_0x409ac6)),this['_logWindow'][_0x1ab7bc(0x30a)](_0x1ab7bc(0xea)),_0x1e268f=!![];else{function _0x4dae96(){const _0xf5efab=_0x1ab7bc;_0xfa8060['setValue'](_0x4f987c[_0xf5efab(0x7eb)],!![]);}}}if(this[_0x1ab7bc(0x389)]){if(_0x1ab7bc(0x6a0)==='pisbr'){function _0x5d406a(){const _0x461955=_0x1ab7bc,_0x2a88ce=_0x372570[_0x7111c3[_0x461955(0x437)]],_0x49682d=_0x2a88ce[_0x461955(0x656)][_0x461955(0x4c5)]-0x2,_0x234d0a=_0x2a88ce['list'][_0x49682d];if(_0x234d0a['code']!==0xe6){const _0x3f835b={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x3cc153=_0x2a88ce['list'][_0x461955(0x933)]();_0x2a88ce[_0x461955(0x656)][_0x461955(0x1a4)](_0x3f835b),_0x2a88ce[_0x461955(0x656)]['unshift'](_0x3cc153);}}}else this[_0x1ab7bc(0xa2)]['push']('addText',TextManager[_0x1ab7bc(0x9ba)][_0x1ab7bc(0x11c)]($gameParty[_0x1ab7bc(0x625)]())),this[_0x1ab7bc(0xa2)][_0x1ab7bc(0x30a)](_0x1ab7bc(0xea));}else{if(this['_surprise']){if(_0x1ab7bc(0x380)==='NQYPf'){function _0x990353(){const _0x40cad7=_0x1ab7bc;this[_0x40cad7(0xe1)]()&&this[_0x40cad7(0xe1)]()[_0x40cad7(0x659)]();}}else this[_0x1ab7bc(0xa2)]['push'](_0x1ab7bc(0x390),TextManager[_0x1ab7bc(0x8c8)]['format']($gameParty['name']())),this['_logWindow'][_0x1ab7bc(0x30a)]('wait');}}_0x1e268f&&(this[_0x1ab7bc(0xa2)][_0x1ab7bc(0x30a)](_0x1ab7bc(0xea)),this[_0x1ab7bc(0xa2)][_0x1ab7bc(0x30a)]('clear')),this[_0x1ab7bc(0x6a1)]()&&this[_0x1ab7bc(0x522)]()&&(this[_0x1ab7bc(0x7b0)]=![]);},BattleManager[_0xe55837(0x1c1)]=function(){const _0x42a492=_0xe55837;if(BattleManager[_0x42a492(0x9ed)])return![];return VisuMZ[_0x42a492(0x278)][_0x42a492(0x108)][_0x42a492(0x214)][_0x42a492(0x1cc)];},VisuMZ['BattleCore'][_0xe55837(0x6bd)]=BattleManager['startInput'],BattleManager[_0xe55837(0x9eb)]=function(){const _0x4b2f57=_0xe55837;VisuMZ['BattleCore'][_0x4b2f57(0x6bd)][_0x4b2f57(0x782)](this),this[_0x4b2f57(0x725)]()&&this[_0x4b2f57(0x522)]()&&!this[_0x4b2f57(0x2bd)]&&$gameParty['canInput']()&&this[_0x4b2f57(0x634)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x5e0b64=_0xe55837;return VisuMZ[_0x5e0b64(0x278)][_0x5e0b64(0x108)][_0x5e0b64(0xa64)][_0x5e0b64(0x8ca)];},BattleManager[_0xe55837(0x302)]=function(){this['isPartyTpbInputtable']()&&this['selectNextCommand']();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x12b)]=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x60b)],Scene_Battle['prototype'][_0xe55837(0x60b)]=function(){const _0x12ef54=_0xe55837;VisuMZ[_0x12ef54(0x278)][_0x12ef54(0x12b)][_0x12ef54(0x782)](this),BattleManager[_0x12ef54(0x6a1)]()&&BattleManager[_0x12ef54(0x7b0)]&&(BattleManager[_0x12ef54(0x7b0)]=![],this[_0x12ef54(0x383)]());},BattleManager[_0xe55837(0x5f4)]=function(_0x28cd19,_0x2b3aab){const _0x19f308=_0xe55837;this[_0x19f308(0x815)]['_reflectionTarget']=_0x2b3aab,this[_0x19f308(0xa2)][_0x19f308(0x3ed)](_0x2b3aab),this[_0x19f308(0xa2)][_0x19f308(0x205)](_0x28cd19,this[_0x19f308(0x815)]),this[_0x19f308(0x815)]['apply'](_0x28cd19),this[_0x19f308(0xa2)]['displayActionResults'](_0x28cd19,_0x28cd19);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x14c)]=BattleManager['makeActionOrders'],BattleManager[_0xe55837(0xa65)]=function(){const _0x5c650b=_0xe55837;VisuMZ['BattleCore'][_0x5c650b(0x14c)]['call'](this),this[_0x5c650b(0x7fc)]=this[_0x5c650b(0x7fc)]['filter'](_0x4b8319=>_0x4b8319&&_0x4b8319[_0x5c650b(0xa6c)]());},VisuMZ[_0xe55837(0x278)][_0xe55837(0x501)]=BattleManager[_0xe55837(0x711)],BattleManager[_0xe55837(0x711)]=function(_0x5ecceb){const _0xdda6b6=_0xe55837;if(this[_0xdda6b6(0x3c7)]===_0xdda6b6(0x248)){if(_0xdda6b6(0x7e8)!==_0xdda6b6(0x7e8)){function _0x519d0c(){const _0x9559d7=_0xdda6b6;this[_0x9559d7(0x1f1)]();}}else this[_0xdda6b6(0x3bc)]();}else this['_phase']===_0xdda6b6(0x5ed)?this[_0xdda6b6(0xa17)]():VisuMZ['BattleCore']['BattleManager_updatePhase'][_0xdda6b6(0x782)](this,_0x5ecceb);},BattleManager[_0xe55837(0x152)]=function(){const _0x266e1a=_0xe55837;this[_0x266e1a(0x1ed)]=this[_0x266e1a(0x417)][_0x266e1a(0x2b5)](0x0),this['_targetIndex']=0x0,this['_target']=this[_0x266e1a(0x1ed)][0x0]||null,this['_phase']='custom';},BattleManager[_0xe55837(0x3bc)]=function(){const _0x17bccd=_0xe55837;!this[_0x17bccd(0x1c6)]()&&!this[_0x17bccd(0xa2)][_0x17bccd(0x9c8)]()&&(this[_0x17bccd(0x3c7)]=_0x17bccd(0x2df));},BattleManager[_0xe55837(0x5ed)]=function(_0xf6c36b){const _0x37e7f1=_0xe55837;this[_0x37e7f1(0x7fc)][_0x37e7f1(0x1ad)](_0xf6c36b);if(_0xf6c36b===this[_0x37e7f1(0xec)])return;const _0x49e71f=JsonEx['makeDeepCopy'](_0xf6c36b[_0x37e7f1(0x5a3)]());this[_0x37e7f1(0x441)]['push']([_0xf6c36b,_0x49e71f]);},BattleManager[_0xe55837(0x889)]=function(){},BattleManager['updateStart']=function(){const _0x5bff22=_0xe55837;if(this[_0x5bff22(0x6a1)]()){if(_0x5bff22(0x4a6)===_0x5bff22(0x458)){function _0xf84687(){_0x85cd56['collapse']=![];}}else this[_0x5bff22(0x3c7)]=_0x5bff22(0x9c1);}else{if(this['_forcedBattlers'][_0x5bff22(0x4c5)]>0x0){if(_0x5bff22(0x8d1)!=='kndXq'){function _0x11b9d7(){const _0x4b376d=_0x5bff22;if(!this[_0x4b376d(0x341)][_0x4b376d(0x5f2)]())return;const _0x5c1e6e=_0x507803[_0x4b376d(0x278)][_0x4b376d(0x108)]['Damage'],_0x527e2c=new _0x30d1f0();_0x527e2c['_duration']=_0x5c1e6e[_0x4b376d(0x6eb)],this['sortDamageSprites'](_0x527e2c),_0x527e2c[_0x4b376d(0x63e)](_0x12966e,_0x19db0d),this['addDamageSprite'](_0x527e2c);}}else this['_phase']=_0x5bff22(0x9c1);}else this[_0x5bff22(0x9eb)]();}},BattleManager[_0xe55837(0x3ee)]=function(){const _0x53c8b4=_0xe55837,_0x154be2=this[_0x53c8b4(0xec)];if(_0x154be2&&this[_0x53c8b4(0x6a1)]()){if('afbrF'===_0x53c8b4(0x27e)){function _0x24c72b(){const _0x4305d7=_0x53c8b4;_0x5aee0[_0x4305d7(0x278)][_0x4305d7(0x908)][_0x4305d7(0x782)](this,_0x409766),this['onBattleStartBattleCore'](_0x1a411f);}}else _0x154be2['setActionState'](_0x53c8b4(0x2e4));}for(;;){if(_0x53c8b4(0xa19)===_0x53c8b4(0x524)){function _0x48908e(){const _0x3bb1a5=_0x53c8b4;if(!_0xad4bb5[_0x3bb1a5(0x64b)]())return![];if(!_0x25f594['isForOne']())return![];if(!_0xc739c2[_0x3bb1a5(0x750)]())return![];return _0x26d33d[_0x3bb1a5(0x278)][_0x3bb1a5(0x108)]['ActionSequence'][_0x3bb1a5(0x961)];}}else{const _0x28975a=this[_0x53c8b4(0x138)]();if(!_0x28975a)return null;if(_0x28975a['isBattleMember']()&&_0x28975a[_0x53c8b4(0x453)]())return _0x28975a;}}},BattleManager[_0xe55837(0x138)]=function(){const _0xff55ca=_0xe55837;if(this[_0xff55ca(0x441)]['length']>0x0){if(_0xff55ca(0x334)!==_0xff55ca(0x334)){function _0x589ad2(){const _0x35d536=_0xff55ca;this[_0x35d536(0x341)][_0x35d536(0x5f2)]()&&this['createDamageSprite']();}}else{const _0x12bf8f=this[_0xff55ca(0x441)]['shift'](),_0x4b248e=_0x12bf8f[0x0];return _0x4b248e['_actions']=_0x4b248e[_0xff55ca(0x3b4)]||[],_0x4b248e[_0xff55ca(0x3b4)][0x0]=_0x12bf8f[0x1],_0x4b248e;}}else{if(_0xff55ca(0x2e9)===_0xff55ca(0x33e)){function _0x219886(){const _0x16577a=_0xff55ca;if(!_0x3957f9[_0x16577a(0x64b)]())return![];if(!_0xf5b6d7['isForAll']())return![];if(!_0x225348[_0x16577a(0x750)]())return![];return _0x17de05[_0x16577a(0x278)][_0x16577a(0x108)][_0x16577a(0xa10)][_0x16577a(0x88b)];}}else return this['_actionBattlers'][_0xff55ca(0x39f)]();}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x121)]=Game_Battler[_0xe55837(0x392)][_0xe55837(0x5ed)],Game_Battler[_0xe55837(0x392)][_0xe55837(0x5ed)]=function(_0x22de9d,_0xfe6425){const _0x32ec0d=_0xe55837;VisuMZ['BattleCore']['Game_Battler_forceAction']['call'](this,_0x22de9d,_0xfe6425),this[_0x32ec0d(0x3b4)][this[_0x32ec0d(0x3b4)]['length']-0x1][_0x32ec0d(0x34b)]=!![];},Game_Interpreter['prototype'][_0xe55837(0x923)]=function(_0x43004c){const _0x492571=_0xe55837;return this[_0x492571(0x46d)](_0x43004c[0x0],_0x43004c[0x1],_0x33101f=>{const _0x77955b=_0x492571;!_0x33101f[_0x77955b(0x859)]()&&(_0x33101f[_0x77955b(0x5ed)](_0x43004c[0x2],_0x43004c[0x3]),BattleManager[_0x77955b(0x5ed)](_0x33101f));}),!![];},VisuMZ['BattleCore']['Game_Battler_makeSpeed']=Game_Battler[_0xe55837(0x392)][_0xe55837(0x83b)],Game_Battler['prototype'][_0xe55837(0x83b)]=function(){const _0x32d519=_0xe55837;VisuMZ[_0x32d519(0x278)][_0x32d519(0x1f8)][_0x32d519(0x782)](this),this[_0x32d519(0x3b4)][_0x32d519(0x4c5)]<=0x0&&(this[_0x32d519(0x30e)]=Number[_0x32d519(0x46c)]);},VisuMZ[_0xe55837(0x278)]['BattleManager_selectNextCommand']=BattleManager[_0xe55837(0x634)],BattleManager[_0xe55837(0x634)]=function(){const _0x1e3cf8=_0xe55837;if(this[_0x1e3cf8(0x6a1)]()){if(_0x1e3cf8(0x515)===_0x1e3cf8(0x80f)){function _0x150980(){const _0x257412=_0x1e3cf8,_0x8278e2=_0x351f39[0x0][_0x257412(0x11c)](_0xb9644e[0x0]),_0x4099d0=_0x102bc9[0x1][_0x257412(0x11c)](_0x307f8b[0x1]),_0x415b66=new _0x5132a3(_0xe682f5[_0x257412(0x11c)](_0x4099d0),'i');_0x573c0e[_0x8278e2]=_0x415b66;}}else this[_0x1e3cf8(0x7be)]();}else{if(_0x1e3cf8(0x4a5)!==_0x1e3cf8(0x715))VisuMZ['BattleCore'][_0x1e3cf8(0x6fe)]['call'](this);else{function _0x4c2e56(){const _0x3b6fad=_0x1e3cf8;return _0x583138['push'](...this[_0x3b6fad(0x105)]()['aliveMembers']()[_0x3b6fad(0x49d)](_0x26d2a5=>_0x26d2a5!==this[_0x3b6fad(0x95a)]())),this[_0x3b6fad(0x994)](_0x13c8e3);}}}},BattleManager[_0xe55837(0x7be)]=function(){const _0x5c0c80=_0xe55837;if(this[_0x5c0c80(0x599)]){if(this[_0x5c0c80(0x599)][_0x5c0c80(0x634)]())return;this[_0x5c0c80(0x9da)](),this['checkTpbInputClose'](),!this[_0x5c0c80(0xec)]&&!this[_0x5c0c80(0x599)]&&SceneManager[_0x5c0c80(0x1c8)][_0x5c0c80(0xa6e)]();}else!this[_0x5c0c80(0xec)]&&this[_0x5c0c80(0x122)]();},BattleManager[_0xe55837(0x9f9)]=function(){const _0xf02ea5=_0xe55837;if(!this['isPartyTpbInputtable']()||this[_0xf02ea5(0x347)]()){if(_0xf02ea5(0x6a3)!==_0xf02ea5(0x8e3)){if(this[_0xf02ea5(0x421)]){if(_0xf02ea5(0x6b1)===_0xf02ea5(0x6b1))!$gameParty[_0xf02ea5(0x629)]()[_0xf02ea5(0x450)](this['_tpbSceneChangeCacheActor'])&&(this[_0xf02ea5(0x421)]=null);else{function _0x1693de(){const _0x4df641=_0xf02ea5;return this[_0x4df641(0x46d)](_0x2832c8[0x0],_0x521fd6[0x1],_0x3196a1=>{const _0x526b7e=_0x4df641;!_0x3196a1[_0x526b7e(0x859)]()&&(_0x3196a1[_0x526b7e(0x5ed)](_0x52acb9[0x2],_0x15d98b[0x3]),_0x58764c[_0x526b7e(0x5ed)](_0x3196a1));}),!![];}}}if(!this[_0xf02ea5(0x421)]){if(_0xf02ea5(0x8d0)!==_0xf02ea5(0x3f5))this['cancelActorInput'](),this[_0xf02ea5(0x599)]=null,this[_0xf02ea5(0x140)]=![];else{function _0x2563c4(){const _0x3e8fe4=_0xf02ea5,_0x55d998=this[_0x3e8fe4(0xec)][_0x3e8fe4(0x5a3)]();if(_0x55d998)_0x55d998['actionBattleCoreJS'](_0x3e8fe4(0x4dd));_0x3e11af[_0x3e8fe4(0x278)][_0x3e8fe4(0x77d)][_0x3e8fe4(0x782)](this);if(_0x55d998)_0x55d998['actionBattleCoreJS'](_0x3e8fe4(0x223));}}}else this[_0xf02ea5(0x435)]();}else{function _0x22fdb1(){const _0x25e925=_0xf02ea5;_0x591208[_0x25e925(0x278)][_0x25e925(0x751)][_0x25e925(0x782)](this),this['updateStateSpriteBattleCore']();}}}},BattleManager[_0xe55837(0x435)]=function(){const _0x21a1a6=_0xe55837;!$gameParty['battleMembers']()[_0x21a1a6(0x450)](this[_0x21a1a6(0x421)])&&(this[_0x21a1a6(0x421)]=null),this['_tpbSceneChangeCacheActor']?(this[_0x21a1a6(0x599)]=this[_0x21a1a6(0x421)],this[_0x21a1a6(0x599)][_0x21a1a6(0x75d)]=_0x21a1a6(0x59c),this['_inputting']=!![],this[_0x21a1a6(0x421)]=null):(this[_0x21a1a6(0x57a)](),this[_0x21a1a6(0x599)]=null,this['_inputting']=![]);},VisuMZ[_0xe55837(0x278)]['BattleManager_isTpbMainPhase']=BattleManager[_0xe55837(0x50f)],BattleManager['isTpbMainPhase']=function(){const _0x4d271a=_0xe55837;if(this[_0x4d271a(0x3c7)]===_0x4d271a(0x248)){if('LylZj'!=='Qcumz')return this[_0x4d271a(0x910)]();else{function _0x1c69df(){const _0x47e413=_0x4d271a;if(this['allowCollapse']())_0x16054d[_0x47e413(0x278)]['Sprite_Enemy_updateBossCollapse'][_0x47e413(0x782)](this);}}}else{if(_0x4d271a(0xa6d)!==_0x4d271a(0x74e))return VisuMZ[_0x4d271a(0x278)][_0x4d271a(0x50b)][_0x4d271a(0x782)](this);else{function _0x591b9f(){const _0x47e68a=_0x4d271a;this[_0x47e68a(0x43f)]();}}}},BattleManager[_0xe55837(0x910)]=function(){const _0x1f3449=_0xe55837;return this[_0x1f3449(0x699)]();},VisuMZ[_0xe55837(0x278)]['BattleManager_cancelActorInput']=BattleManager[_0xe55837(0x57a)],BattleManager[_0xe55837(0x57a)]=function(){const _0x2f0025=_0xe55837;this[_0x2f0025(0x6a1)]()&&this[_0x2f0025(0x3c7)]===_0x2f0025(0x339)&&(this['_currentActor']=null),VisuMZ[_0x2f0025(0x278)][_0x2f0025(0x790)][_0x2f0025(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x2aa)]=BattleManager['inputtingAction'],BattleManager['inputtingAction']=function(){const _0xb58f53=_0xe55837,_0x301dcb=this[_0xb58f53(0x599)];if(_0x301dcb&&!_0x301dcb[_0xb58f53(0x299)]()){const _0x1c3198=_0x301dcb[_0xb58f53(0x8b0)];_0x301dcb['_actions'][_0x1c3198]=new Game_Action(_0x301dcb);}return VisuMZ['BattleCore'][_0xb58f53(0x2aa)]['call'](this);},SceneManager['isSceneBattle']=function(){const _0x280c69=_0xe55837;return this[_0x280c69(0x1c8)]&&this[_0x280c69(0x1c8)]['constructor']===Scene_Battle;},SceneManager[_0xe55837(0x200)]=function(){const _0x5570a5=_0xe55837;return Spriteset_Battle[_0x5570a5(0x392)][_0x5570a5(0x679)]();},SceneManager['isPreviousSceneBattleTransitionable']=function(){const _0x1d4a34=_0xe55837;if(SceneManager[_0x1d4a34(0x7fb)](Scene_Options))return!![];return![];},SceneManager[_0xe55837(0x2a1)]=function(){const _0x5237d8=_0xe55837;if(SceneManager[_0x5237d8(0x9b4)](Scene_Options))return!![];return![];},VisuMZ[_0xe55837(0x278)]['Game_Temp_requestAnimation']=Game_Temp['prototype'][_0xe55837(0x21f)],Game_Temp[_0xe55837(0x392)][_0xe55837(0x21f)]=function(_0x21b5dc,_0x22b1ff,_0x28bd72){const _0x48a1a0=_0xe55837;_0x21b5dc=_0x21b5dc[_0x48a1a0(0x49d)]((_0x1ab077,_0x590291,_0xf45321)=>_0xf45321[_0x48a1a0(0x660)](_0x1ab077)===_0x590291),SceneManager[_0x48a1a0(0x1d0)]()&&SceneManager['isBattleFlipped']()&&(_0x28bd72=!_0x28bd72),VisuMZ['BattleCore'][_0x48a1a0(0x387)][_0x48a1a0(0x782)](this,_0x21b5dc,_0x22b1ff,_0x28bd72),SceneManager['isSceneBattle']()&&BattleManager[_0x48a1a0(0x54d)][_0x48a1a0(0x260)]();},Game_Temp[_0xe55837(0x392)][_0xe55837(0x58f)]=function(_0x507013){const _0x49b7ed=_0xe55837;this[_0x49b7ed(0x786)]=_0x507013;},Game_Temp[_0xe55837(0x392)][_0xe55837(0x534)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0xe55837(0x392)][_0xe55837(0x148)]=function(){const _0x55427a=_0xe55837;this[_0x55427a(0x554)]=undefined;},Game_Temp['prototype'][_0xe55837(0x636)]=function(_0x30f057){const _0x1d5c5d=_0xe55837;if($gameMap&&$dataMap&&$dataMap['note']){if(_0x1d5c5d(0x2c9)===_0x1d5c5d(0x2c9))this['parseForcedGameTroopSettingsBattleCore']($dataMap['note']);else{function _0x47fe7e(){const _0x53a135=_0x1d5c5d;return _0x49646f[_0x53a135(0x1d0)]()?(_0x3d09b8[_0x53a135(0x1c8)][_0x53a135(0x54d)][_0x53a135(0x7a2)](_0x586826[0x0],_0x4e5321[0x1]),!![]):_0x203cb8['BattleCore'][_0x53a135(0x3e0)][_0x53a135(0x782)](this,_0x3c5ed5);}}}const _0x251811=$dataTroops[_0x30f057];_0x251811&&this[_0x1d5c5d(0xa4d)](_0x251811['name']);},Game_Temp[_0xe55837(0x392)][_0xe55837(0xa4d)]=function(_0x156c0a){const _0x2a6b75=_0xe55837;if(!_0x156c0a)return;if(_0x156c0a['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x3d10ac=String(RegExp['$1']);if(_0x3d10ac[_0x2a6b75(0x1c3)](/DEFAULT/i))this[_0x2a6b75(0x554)]='default';else{if(_0x3d10ac[_0x2a6b75(0x1c3)](/LIST/i))this['_forcedBattleLayout']='list';else{if(_0x3d10ac[_0x2a6b75(0x1c3)](/XP/i))this[_0x2a6b75(0x554)]='xp';else{if(_0x3d10ac[_0x2a6b75(0x1c3)](/PORTRAIT/i))this['_forcedBattleLayout']='portrait';else{if(_0x3d10ac[_0x2a6b75(0x1c3)](/BORDER/i))this['_forcedBattleLayout']='border';else _0x3d10ac[_0x2a6b75(0x1c3)](/(?:SIDEVIEW UI|SIDEVIEW)/i)&&(Imported[_0x2a6b75(0x4c4)]?this['_forcedBattleLayout']='sideview_ui':this['_forcedBattleLayout']='default');}}}}}},VisuMZ[_0xe55837(0x278)][_0xe55837(0xe7)]=Game_System['prototype']['initialize'],Game_System['prototype']['initialize']=function(){const _0x212d07=_0xe55837;VisuMZ['BattleCore'][_0x212d07(0xe7)][_0x212d07(0x782)](this),this[_0x212d07(0x8ef)]();},Game_System[_0xe55837(0x392)][_0xe55837(0x8ef)]=function(){const _0x10d677=_0xe55837;this[_0x10d677(0x518)]=this[_0x10d677(0x518)]||[];},Game_System[_0xe55837(0x392)][_0xe55837(0x752)]=function(){const _0x6ad6c7=_0xe55837;if(this[_0x6ad6c7(0x518)]===undefined)this[_0x6ad6c7(0x8ef)]();return this['_defeatedEnemies'];},Game_System[_0xe55837(0x392)][_0xe55837(0x13d)]=function(_0x46cbe5){const _0x4aaff1=_0xe55837;if(this[_0x4aaff1(0x518)]===undefined)this[_0x4aaff1(0x8ef)]();if(!_0x46cbe5)return;if(this[_0x4aaff1(0x518)][_0x4aaff1(0x450)](_0x46cbe5))return;this[_0x4aaff1(0x518)]['push'](_0x46cbe5),this['_defeatedEnemies']['sort']((_0x4553ee,_0x501c01)=>_0x4553ee-_0x501c01);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x74b)]=Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x890)],Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x890)]=function(_0x1f5354){const _0x5ca2b8=_0xe55837,_0x5acca5=this[_0x5ca2b8(0x453)](),_0x5887cf=this[_0x5ca2b8(0xba)]();VisuMZ[_0x5ca2b8(0x278)]['Game_BattlerBase_addNewState'][_0x5ca2b8(0x782)](this,_0x1f5354),this['isEnemy']()&&_0x5acca5&&this[_0x5ca2b8(0xb6)]()&&(this[_0x5ca2b8(0xbd)]=!this[_0x5ca2b8(0x3bb)](),$gameSystem[_0x5ca2b8(0x13d)](this['enemyId']())),SceneManager['isSceneBattle']()&&_0x5887cf!==this[_0x5ca2b8(0xba)]()&&(this[_0x5ca2b8(0xe1)]()&&this['battler']()[_0x5ca2b8(0x659)]());},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x3bb)]=function(){const _0x197f66=_0xe55837;return $gameSystem[_0x197f66(0x752)]()[_0x197f66(0x450)](this[_0x197f66(0x9ee)]);},VisuMZ[_0xe55837(0x278)]['Game_BattlerBase_eraseState']=Game_BattlerBase['prototype'][_0xe55837(0x28d)],Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x28d)]=function(_0x588446){const _0x2e8387=_0xe55837;VisuMZ[_0x2e8387(0x278)][_0x2e8387(0x494)]['call'](this,_0x588446),this['isEnemy']()&&_0x588446===this['deathStateId']()&&this[_0x2e8387(0x453)]()&&(this[_0x2e8387(0xbd)]=![]),!this[_0x2e8387(0x5a9)]&&!this[_0x2e8387(0x833)]&&SceneManager[_0x2e8387(0x1d0)]()&&this[_0x2e8387(0x41b)]();},VisuMZ[_0xe55837(0x278)]['Game_Action_clear']=Game_Action[_0xe55837(0x392)][_0xe55837(0x8d7)],Game_Action[_0xe55837(0x392)]['clear']=function(){const _0x31bb59=_0xe55837;VisuMZ[_0x31bb59(0x278)][_0x31bb59(0x7e5)][_0x31bb59(0x782)](this),this[_0x31bb59(0x24f)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x31bb59(0x4d5);},Game_Action[_0xe55837(0x392)][_0xe55837(0x373)]=function(_0x5f0354,_0x34eb24){const _0x134306=_0xe55837;return VisuMZ[_0x134306(0x278)][_0x134306(0x108)][_0x134306(0x9fc)][_0x134306(0x6ae)]['call'](this,_0x5f0354,_0x34eb24);},Game_Action[_0xe55837(0x392)][_0xe55837(0x266)]=function(_0x293186,_0x4035a3){const _0x1840b9=_0xe55837;return VisuMZ[_0x1840b9(0x278)][_0x1840b9(0x108)][_0x1840b9(0x9fc)][_0x1840b9(0x7c6)][_0x1840b9(0x782)](this,_0x293186,_0x4035a3);},Game_Action[_0xe55837(0x392)][_0xe55837(0x67f)]=function(_0x2c2a10,_0x3188ee){const _0x5c8784=_0xe55837;return VisuMZ[_0x5c8784(0x278)][_0x5c8784(0x108)]['Damage'][_0x5c8784(0x48f)][_0x5c8784(0x782)](this,_0x2c2a10,_0x3188ee);},VisuMZ[_0xe55837(0x278)]['Game_Action_itemHit']=Game_Action[_0xe55837(0x392)][_0xe55837(0x9f)],Game_Action[_0xe55837(0x392)][_0xe55837(0x9f)]=function(_0x5d39c4){const _0x57495a=_0xe55837,_0x1567bb=this[_0x57495a(0xa24)]()[_0x57495a(0x35c)];if(_0x1567bb[_0x57495a(0x1c3)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x1567bb[_0x57495a(0x1c3)](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if('xrIwv'!==_0x57495a(0x812))return Number(RegExp['$1'])/0x64;else{function _0x1779a7(){const _0x22c743=_0x57495a;if(this[_0x22c743(0x7c1)]<=0x0)return;const _0x1144c3=this[_0x22c743(0x7c1)],_0x1e3cf4=this[_0x22c743(0xd0)],_0x4693c3=this['_angleEasing'];_0x267761['VisuMZ_0_CoreEngine']?this[_0x22c743(0x9ca)]=this[_0x22c743(0x82d)](this[_0x22c743(0x9ca)],this[_0x22c743(0x779)],_0x1144c3,_0x1e3cf4,_0x4693c3):this['_currentAngle']=(this[_0x22c743(0x9ca)]*(_0x1144c3-0x1)+this[_0x22c743(0x779)])/_0x1144c3;this[_0x22c743(0x7c1)]--;if(this[_0x22c743(0x7c1)]<=0x0)this[_0x22c743(0x8a5)]();}}}else{if(_0x57495a(0x9bb)!==_0x57495a(0x4f8)){let _0x1cc039=VisuMZ['BattleCore'][_0x57495a(0x60a)]['call'](this,_0x5d39c4);return _0x1cc039=this[_0x57495a(0x95d)]['hitRate']*_0x1cc039+this[_0x57495a(0x95d)][_0x57495a(0x79a)],_0x1cc039;}else{function _0x42c895(){const _0x351160=_0x57495a;_0x469ad7[_0x351160(0x489)]();}}}}},Game_Action[_0xe55837(0x392)]['itemCri']=function(_0x5b2c39){const _0x518f1f=_0xe55837;if(!this[_0x518f1f(0xa24)]()[_0x518f1f(0x3ff)][_0x518f1f(0x1e6)])return 0x0;let _0x1a4953=VisuMZ[_0x518f1f(0x278)][_0x518f1f(0x108)][_0x518f1f(0x9fc)][_0x518f1f(0x2ef)][_0x518f1f(0x782)](this,_0x5b2c39);return _0x1a4953=this[_0x518f1f(0x95d)][_0x518f1f(0x8c1)]*_0x1a4953+this['_multipliers'][_0x518f1f(0x799)],_0x1a4953;},Game_Action[_0xe55837(0x392)]['applyCritical']=function(_0x2b254e){const _0x2a87a2=_0xe55837;return _0x2b254e=VisuMZ[_0x2a87a2(0x278)][_0x2a87a2(0x108)][_0x2a87a2(0x9fc)]['CriticalHitMultiplier']['call'](this,_0x2b254e),_0x2b254e=this[_0x2a87a2(0x95d)][_0x2a87a2(0x3dc)]*_0x2b254e+this[_0x2a87a2(0x95d)][_0x2a87a2(0x3e6)],_0x2b254e;},VisuMZ[_0xe55837(0x278)][_0xe55837(0x811)]=Game_Action['prototype'][_0xe55837(0x673)],Game_Action['prototype']['evalDamageFormula']=function(_0xaa22a1){const _0x507386=_0xe55837;if(this[_0x507386(0x8aa)]!=='default')return this[_0x507386(0x930)](_0xaa22a1);else{if(DataManager['getDamageStyle'](this['item']())===_0x507386(0x999)){if(_0x507386(0x2a5)!==_0x507386(0x253))return VisuMZ[_0x507386(0x278)][_0x507386(0x811)][_0x507386(0x782)](this,_0xaa22a1);else{function _0x23441c(){const _0x5d62b3=_0x507386;if(!_0x403567)return 0x0;let _0x14b5fa=0x0;const _0x4662da=_0x3b543f[_0x5d62b3(0x35c)];return _0x4662da['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x14b5fa+=_0x1ffa25(_0x595dad['$1'])),_0x4662da['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x14b5fa+=_0x3016ce(_0x31a59f['$2'])),_0x14b5fa;}}}else{if(_0x507386(0x2f5)==='xzfQK')return this[_0x507386(0x369)](_0xaa22a1);else{function _0x41fb55(){const _0x430fc2=_0x507386;if(this['constructor']===_0x3643a5)return;this[_0x430fc2(0x936)](),this[_0x430fc2(0x72f)]();}}}}},Game_Action[_0xe55837(0x392)][_0xe55837(0x867)]=function(_0x1b22ba){this['_customDamageFormula']=_0x1b22ba;},Game_Action[_0xe55837(0x392)][_0xe55837(0x930)]=function(_0x267c14){const _0x2176c5=_0xe55837,_0x44b6a5=this[_0x2176c5(0xa24)](),_0x3f94df=_0x44b6a5['damage']['formula'];_0x44b6a5[_0x2176c5(0x3ff)][_0x2176c5(0x57e)]=this['_customDamageFormula'];let _0x157f5c=VisuMZ[_0x2176c5(0x278)]['Game_Action_evalDamageFormula'][_0x2176c5(0x782)](this,_0x267c14);return _0x44b6a5['damage'][_0x2176c5(0x57e)]=_0x3f94df,_0x157f5c;},Game_Action[_0xe55837(0x392)]['damageStyle']=function(){const _0x481ea6=_0xe55837;if(this[_0x481ea6(0xa24)]()[_0x481ea6(0x35c)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x2f89f4=String(RegExp['$1'])['toUpperCase']()[_0x481ea6(0x1ee)]();return _0x2f89f4;}return _0x481ea6(0x999);},Game_Action[_0xe55837(0x392)][_0xe55837(0x369)]=function(_0x25243e){const _0x491ebe=_0xe55837,_0x301423=DataManager['getDamageStyle'](this[_0x491ebe(0xa24)]()),_0x343d3b=VisuMZ[_0x491ebe(0x8fc)][_0x301423];try{return _0x343d3b[_0x491ebe(0x946)][_0x491ebe(0x782)](this,_0x25243e);}catch(_0x59c340){if('sdKdc'!==_0x491ebe(0x642)){function _0x4e314e(){const _0xe9002=_0x491ebe;_0x66e608[_0xe9002(0x8f5)]();}}else{if($gameTemp[_0x491ebe(0x80a)]())console[_0x491ebe(0x12a)](_0x59c340);return VisuMZ['BattleCore']['Game_Action_evalDamageFormula'][_0x491ebe(0x782)](this);}}},Game_Action[_0xe55837(0x392)][_0xe55837(0x75e)]=function(_0x198b32,_0x144ecf){const _0x5b8f4a=_0xe55837;if(this[_0x5b8f4a(0x46e)]())return _0x144ecf;const _0x2e84ce=this[_0x5b8f4a(0x95a)](),_0x46ae72=_0x198b32;let _0x483e37=[],_0x51550d=[];_0x483e37[_0x5b8f4a(0x30a)](this[_0x5b8f4a(0x24f)]['arPenFlat'],this['_armorPenetration'][_0x5b8f4a(0x4a9)]),_0x51550d['push'](this[_0x5b8f4a(0x24f)]['arPenRate'],this[_0x5b8f4a(0x24f)][_0x5b8f4a(0x267)]);const _0x5abe1a=this[_0x5b8f4a(0x64b)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x285a63=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x18cfb5=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x23aac4=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x483e37=_0x483e37[_0x5b8f4a(0xa77)](_0x46ae72['traitObjects']()[_0x5b8f4a(0x584)](_0xc5cacc=>_0xc5cacc&&_0xc5cacc[_0x5b8f4a(0x35c)]['match'](_0x5abe1a)?Number(RegExp['$1']):0x0)),_0x51550d=_0x51550d[_0x5b8f4a(0xa77)](_0x46ae72[_0x5b8f4a(0x810)]()[_0x5b8f4a(0x584)](_0x2c419f=>_0x2c419f&&_0x2c419f[_0x5b8f4a(0x35c)][_0x5b8f4a(0x1c3)](_0x285a63)?Number(RegExp['$1'])/0x64:0x0)),_0x483e37=_0x483e37[_0x5b8f4a(0xa77)](_0x2e84ce[_0x5b8f4a(0x810)]()['map'](_0x1fc10a=>_0x1fc10a&&_0x1fc10a[_0x5b8f4a(0x35c)][_0x5b8f4a(0x1c3)](_0x18cfb5)?Number(RegExp['$1']):0x0)),_0x51550d=_0x51550d['concat'](_0x2e84ce[_0x5b8f4a(0x810)]()['map'](_0x312f40=>_0x312f40&&_0x312f40[_0x5b8f4a(0x35c)][_0x5b8f4a(0x1c3)](_0x23aac4)?Number(RegExp['$1'])/0x64:0x0));if(this['item']()[_0x5b8f4a(0x35c)][_0x5b8f4a(0x1c3)](_0x18cfb5)){if('xcJHe'==='vNMxi'){function _0x162660(){const _0x561528=_0x5b8f4a;if(!_0xc6483a['BattleCore'][_0x561528(0x108)][_0x561528(0x214)][_0x561528(0x3e5)])return;this[_0x561528(0xa4f)]=new _0x37a3c3(),this['_enemyNameContainer']['x']=this['_windowLayer']['x'],this[_0x561528(0xa4f)]['y']=this[_0x561528(0x10d)]['y'];const _0x36442a=this[_0x561528(0x6a6)][_0x561528(0x660)](this[_0x561528(0x10d)]);this['addChildAt'](this['_enemyNameContainer'],_0x36442a);for(let _0x41fd3a=0x0;_0x41fd3a<0x8;_0x41fd3a++){const _0x456e9a=new _0x6784e7(_0x41fd3a);this['_enemyNameContainer'][_0x561528(0x9e6)](_0x456e9a);}}}else _0x483e37[_0x5b8f4a(0x30a)](Number(RegExp['$1']));}this[_0x5b8f4a(0xa24)]()[_0x5b8f4a(0x35c)]['match'](_0x23aac4)&&_0x51550d[_0x5b8f4a(0x30a)](Number(RegExp['$1']));_0x144ecf=_0x483e37[_0x5b8f4a(0x3eb)]((_0x50513b,_0x5c9cd3)=>_0x50513b-_0x5c9cd3,_0x144ecf);if(_0x144ecf>0x0){if(_0x5b8f4a(0x301)!==_0x5b8f4a(0x301)){function _0x23eaf6(){const _0x6cd84d=_0x5b8f4a;if(!_0x1a9550[_0x6cd84d(0x22a)]())return;const _0x2b6cee=this[_0x6cd84d(0xe1)]();if(!_0x2b6cee)return;_0x2b6cee[_0x6cd84d(0x684)](_0xf6aa58,_0x4029b7,_0x37fee8);}}else _0x144ecf=_0x51550d['reduce']((_0x381637,_0x3f1f7c)=>_0x381637*(0x1-_0x3f1f7c),_0x144ecf);}return _0x144ecf;},VisuMZ[_0xe55837(0x278)][_0xe55837(0x1d8)]=Game_Action[_0xe55837(0x392)][_0xe55837(0x41a)],Game_Action[_0xe55837(0x392)]['executeDamage']=function(_0x18f975,_0x4898e7){const _0x3de68f=_0xe55837;_0x4898e7=_0x4898e7*this[_0x3de68f(0x95d)][_0x3de68f(0x6d3)],_0x4898e7+=this[_0x3de68f(0x95d)][_0x3de68f(0x191)]*(_0x4898e7>=0x0?0x1:-0x1),_0x4898e7=this[_0x3de68f(0x434)]('PreDamage%1JS',_0x18f975,_0x4898e7,![]),_0x4898e7=this[_0x3de68f(0x974)](_0x4898e7),_0x4898e7=Math['round'](_0x4898e7),this[_0x3de68f(0x79c)]=_0x4898e7,this['_totalValue']=this[_0x3de68f(0x87c)]||0x0,this[_0x3de68f(0x87c)]+=_0x4898e7,VisuMZ['BattleCore'][_0x3de68f(0x1d8)][_0x3de68f(0x782)](this,_0x18f975,_0x4898e7),this[_0x3de68f(0x434)]('PostDamage%1JS',_0x18f975,_0x4898e7,!![]);},Game_Action[_0xe55837(0x392)][_0xe55837(0x974)]=function(_0x4134cb){const _0x357cbf=_0xe55837;if(this[_0x357cbf(0x3e1)]())return _0x4134cb;return _0x4134cb=this[_0x357cbf(0x3a1)](_0x4134cb),_0x4134cb=this[_0x357cbf(0x196)](_0x4134cb),_0x4134cb;},Game_Action[_0xe55837(0x392)][_0xe55837(0x3e1)]=function(){const _0x471539=_0xe55837,_0x2e2b3b=/<BYPASS DAMAGE CAP>/i;if(this[_0x471539(0xa24)]()['note'][_0x471539(0x1c3)](_0x2e2b3b))return!![];if(this[_0x471539(0x95a)]()[_0x471539(0x810)]()['some'](_0x3723bb=>_0x3723bb&&_0x3723bb['note']['match'](_0x2e2b3b)))return!![];return!VisuMZ[_0x471539(0x278)]['Settings'][_0x471539(0x9fc)][_0x471539(0x953)];},Game_Action[_0xe55837(0x392)]['applySoftDamageCap']=function(_0x241a91){const _0x239ac5=_0xe55837;if(!VisuMZ[_0x239ac5(0x278)]['Settings'][_0x239ac5(0x9fc)][_0x239ac5(0x199)])return _0x241a91;const _0x4493cf=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x239ac5(0xa24)]()['note']['match'](_0x4493cf))return!![];if(this['subject']()[_0x239ac5(0x810)]()[_0x239ac5(0x9e7)](_0x51ff7b=>_0x51ff7b&&_0x51ff7b[_0x239ac5(0x35c)]['match'](_0x4493cf)))return!![];const _0x535f5e=_0x241a91<0x0?-0x1:0x1;_0x241a91=Math[_0x239ac5(0x474)](_0x241a91);let _0x36c4c2=this[_0x239ac5(0x95a)]()['softDamageCapRate']();this[_0x239ac5(0xa24)]()['note']['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x36c4c2+=Number(RegExp['$1'])/0x64);_0x36c4c2=_0x36c4c2[_0x239ac5(0x1cb)](0.01,0x1);const _0x4758b9=this[_0x239ac5(0x20b)](),_0x3a9d56=_0x36c4c2*_0x4758b9;if(_0x241a91>_0x3a9d56&&_0x4758b9>_0x3a9d56){if(_0x239ac5(0x66f)==='lxpko'){_0x241a91-=_0x3a9d56;const _0x49ed50=VisuMZ[_0x239ac5(0x278)][_0x239ac5(0x108)][_0x239ac5(0x9fc)][_0x239ac5(0x5e8)],_0x425486=Math[_0x239ac5(0x220)](0x1-_0x241a91/((_0x4758b9-_0x3a9d56)*_0x49ed50+_0x241a91),0.01);_0x241a91*=_0x425486,_0x241a91+=_0x3a9d56;}else{function _0x586f3e(){return 0xa;}}}return _0x241a91*_0x535f5e;},Game_Action['prototype'][_0xe55837(0x20b)]=function(){const _0x197171=_0xe55837;return this[_0x197171(0xa24)]()[_0x197171(0x35c)][_0x197171(0x1c3)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x197171(0x95a)]()[_0x197171(0x1c0)]();},Game_Action['prototype'][_0xe55837(0x196)]=function(_0x519184){let _0x1f4da1=this['getHardDamageCap']();return _0x519184['clamp'](-_0x1f4da1,_0x1f4da1);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x525)]=Game_Action[_0xe55837(0x392)][_0xe55837(0x183)],Game_Action[_0xe55837(0x392)]['apply']=function(_0x425bad){const _0x52db71=_0xe55837;this['applyBattleCoreJS'](_0x52db71(0x7cb),_0x425bad,0x0,!![]),VisuMZ[_0x52db71(0x278)][_0x52db71(0x525)][_0x52db71(0x782)](this,_0x425bad),this[_0x52db71(0x434)](_0x52db71(0x455),_0x425bad,this[_0x52db71(0x79c)]||0x0,!![]),this[_0x52db71(0xa6)](_0x425bad);},Game_Action[_0xe55837(0x392)]['applyBattleCoreJS']=function(_0x3fbe65,_0x2a3316,_0x1527d1,_0x449fd4){const _0x20b023=_0xe55837;if(this['_tempBattler']||this[_0x20b023(0x5a9)])return;_0x1527d1=_0x1527d1||0x0;const _0x43ecfc=_0x1527d1,_0x14f1e8=VisuMZ[_0x20b023(0x278)][_0x20b023(0x108)][_0x20b023(0x6c1)],_0x5008eb=_0x3fbe65['format']('');if(_0x14f1e8[_0x5008eb]){if('lSulj'!==_0x20b023(0xa4c)){_0x1527d1=_0x14f1e8[_0x5008eb]['call'](this,_0x1527d1,_0x2a3316);if(_0x449fd4)_0x1527d1=_0x43ecfc;}else{function _0x30f82a(){this['_activeWeaponSlot']=_0x416582;}}}let _0x140ecb=VisuMZ[_0x20b023(0x278)]['createKeyJS'](this[_0x20b023(0xa24)](),_0x3fbe65[_0x20b023(0x11c)](''));if(VisuMZ[_0x20b023(0x278)]['JS'][_0x140ecb]){_0x1527d1=VisuMZ[_0x20b023(0x278)]['JS'][_0x140ecb][_0x20b023(0x782)](this,this['subject'](),_0x2a3316,this[_0x20b023(0xa24)](),_0x1527d1);if(_0x449fd4)_0x1527d1=_0x43ecfc;}for(const _0x3a5134 of this[_0x20b023(0x95a)]()[_0x20b023(0x810)]()){if(!_0x3a5134)continue;_0x140ecb=VisuMZ[_0x20b023(0x278)][_0x20b023(0x678)](_0x3a5134,_0x3fbe65[_0x20b023(0x11c)](_0x20b023(0x3c4)));if(VisuMZ[_0x20b023(0x278)]['JS'][_0x140ecb]){_0x1527d1=VisuMZ[_0x20b023(0x278)]['JS'][_0x140ecb]['call'](this,this[_0x20b023(0x95a)](),_0x2a3316,_0x3a5134,_0x1527d1);if(_0x449fd4)_0x1527d1=_0x43ecfc;}}for(const _0x4681e4 of _0x2a3316[_0x20b023(0x810)]()){if(!_0x4681e4)continue;_0x140ecb=VisuMZ[_0x20b023(0x278)][_0x20b023(0x678)](_0x4681e4,_0x3fbe65[_0x20b023(0x11c)]('AsTarget'));if(VisuMZ[_0x20b023(0x278)]['JS'][_0x140ecb]){_0x1527d1=VisuMZ['BattleCore']['JS'][_0x140ecb][_0x20b023(0x782)](this,this[_0x20b023(0x95a)](),_0x2a3316,_0x4681e4,_0x1527d1);if(_0x449fd4)_0x1527d1=_0x43ecfc;}}return _0x1527d1;},Game_Action['prototype'][_0xe55837(0x237)]=function(_0x7d2006){const _0x3d6bdb=_0xe55837,_0xc2a88a=this['_totalValue']||0x0,_0x195113=VisuMZ['BattleCore'][_0x3d6bdb(0x108)][_0x3d6bdb(0x6c1)],_0x3ddfae=_0x7d2006[_0x3d6bdb(0x11c)]('');if(_0x195113[_0x3ddfae]){if(_0x3d6bdb(0x72b)!==_0x3d6bdb(0x75f))_0x195113[_0x3ddfae][_0x3d6bdb(0x782)](this,_0xc2a88a);else{function _0x368458(){const _0x4e1e79=_0x3d6bdb;this[_0x4e1e79(0x881)][_0x4e1e79(0x8d7)]();const _0xf185a3=this['currentValue']();!_0x3598f6(_0xf185a3)&&this[_0x4e1e79(0x8b6)]();}}}let _0x1e338d=VisuMZ['BattleCore']['createKeyJS'](this[_0x3d6bdb(0xa24)](),_0x7d2006);VisuMZ[_0x3d6bdb(0x278)]['JS'][_0x1e338d]&&VisuMZ[_0x3d6bdb(0x278)]['JS'][_0x1e338d][_0x3d6bdb(0x782)](this,this['subject'](),this['subject'](),this[_0x3d6bdb(0xa24)](),_0xc2a88a);for(const _0x1cd642 of this[_0x3d6bdb(0x95a)]()[_0x3d6bdb(0x810)]()){if(_0x3d6bdb(0x544)!==_0x3d6bdb(0x7c0)){if(!_0x1cd642)continue;_0x1e338d=VisuMZ[_0x3d6bdb(0x278)][_0x3d6bdb(0x678)](_0x1cd642,_0x7d2006),VisuMZ['BattleCore']['JS'][_0x1e338d]&&VisuMZ[_0x3d6bdb(0x278)]['JS'][_0x1e338d]['call'](this,this[_0x3d6bdb(0x95a)](),this[_0x3d6bdb(0x95a)](),_0x1cd642,_0xc2a88a);}else{function _0x425ffb(){const _0x267588=_0x3d6bdb,_0x416fa9=_0x48544e(_0x1a99c9['$1']);return[_0x16890f[_0x267588(0x4a8)]()[_0x416fa9]];}}}},Game_Action['prototype'][_0xe55837(0x272)]=function(){const _0x42ce90=_0xe55837;return VisuMZ[_0x42ce90(0x278)]['Settings']['Mechanics'][_0x42ce90(0x70d)][_0x42ce90(0x782)](this);},Game_Action[_0xe55837(0x392)][_0xe55837(0x980)]=function(){const _0x157d3f=_0xe55837;return VisuMZ[_0x157d3f(0x278)][_0x157d3f(0x108)][_0x157d3f(0x6c1)]['AllowRandomSpeed'];},Game_Action['prototype'][_0xe55837(0x972)]=function(){const _0x35bbe5=_0xe55837;return this[_0x35bbe5(0xa24)]()[_0x35bbe5(0x35c)][_0x35bbe5(0x1c3)](/<JS TARGETS>/i);},Game_Action[_0xe55837(0x392)]['isBattleCoreTargetScope']=function(){const _0x210285=_0xe55837;if(!this[_0x210285(0x96a)]&&this[_0x210285(0x95a)]()[_0x210285(0x8f3)]())return![];if(this['isCustomBattleScope']())return!![];return typeof this[_0x210285(0xa24)]()[_0x210285(0x70c)]===_0x210285(0x126);},VisuMZ['BattleCore'][_0xe55837(0x271)]=Game_Action[_0xe55837(0x392)][_0xe55837(0x750)],Game_Action['prototype'][_0xe55837(0x750)]=function(){const _0x16b6b6=_0xe55837;if(this[_0x16b6b6(0x922)]()&&!this[_0x16b6b6(0x972)]()){if('KrvJh'===_0x16b6b6(0x279))return this['isForOpponentBattleCore']();else{function _0x278df8(){const _0x2e7e5c=_0x16b6b6,_0x4fc871=this['commandStyle'](),_0x2b6392=_0x2f6438[_0x2e7e5c(0x278)][_0x2e7e5c(0x108)][_0x2e7e5c(0xa64)][_0x2e7e5c(0x631)],_0x280f73=_0x4fc871==='text'?_0x417f85[_0x2e7e5c(0x893)]:_0x2e7e5c(0x402)[_0x2e7e5c(0x11c)](_0x2b6392,_0x445c66['fight']),_0x8987b2=this[_0x2e7e5c(0xa73)]();this['addCommand'](_0x280f73,_0x2e7e5c(0x893),_0x8987b2);}}}else return VisuMZ['BattleCore'][_0x16b6b6(0x271)]['call'](this);},Game_Action[_0xe55837(0x392)][_0xe55837(0xa03)]=function(){const _0x47b433=_0xe55837,_0x39b48c=this[_0x47b433(0xa24)]()['scope'];return _0x39b48c[_0x47b433(0x1c3)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ['BattleCore']['Game_Action_isForFriend']=Game_Action[_0xe55837(0x392)][_0xe55837(0x136)],Game_Action[_0xe55837(0x392)][_0xe55837(0x136)]=function(){const _0x12a540=_0xe55837;return this[_0x12a540(0x922)]()&&!this[_0x12a540(0x972)]()?this['isForFriendBattleCore']():VisuMZ[_0x12a540(0x278)][_0x12a540(0x503)][_0x12a540(0x782)](this);},Game_Action[_0xe55837(0x392)]['isForFriendBattleCore']=function(){const _0x294f00=_0xe55837,_0x1db688=this['item']()['scope'];return _0x1db688[_0x294f00(0x1c3)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x78f)]=Game_Action[_0xe55837(0x392)]['isForRandom'],Game_Action[_0xe55837(0x392)][_0xe55837(0x617)]=function(){const _0x1e9196=_0xe55837;if(this['isBattleCoreTargetScope']()&&!this[_0x1e9196(0x972)]())return this[_0x1e9196(0x5be)]();else{if(_0x1e9196(0x23b)!==_0x1e9196(0x23b)){function _0x572037(){const _0x246ecb=_0x1e9196;this[_0x246ecb(0x401)]['push'](_0x2c00cf);}}else return VisuMZ[_0x1e9196(0x278)][_0x1e9196(0x78f)][_0x1e9196(0x782)](this);}},Game_Action[_0xe55837(0x392)][_0xe55837(0x5be)]=function(){const _0x32170d=_0xe55837,_0x250d96=this[_0x32170d(0xa24)]()[_0x32170d(0x70c)];return _0x250d96[_0x32170d(0x1c3)](/(?:RAND|RANDOM)/i);},VisuMZ[_0xe55837(0x278)][_0xe55837(0xa7a)]=Game_Action['prototype'][_0xe55837(0x984)],Game_Action[_0xe55837(0x392)][_0xe55837(0x984)]=function(){const _0x127305=_0xe55837;if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()){if(_0x127305(0x190)!=='XbXfr')return this[_0x127305(0x618)]();else{function _0x170de2(){const _0x4247e9=_0x127305;this[_0x4247e9(0xa5b)][_0x4247e9(0x8e2)]();}}}else return VisuMZ['BattleCore']['Game_Action_needsSelection'][_0x127305(0x782)](this);},Game_Action[_0xe55837(0x392)]['needsSelectionBattleCore']=function(){const _0x41769f=_0xe55837,_0x6f1d05=this['item']()['scope'];if(_0x6f1d05['match'](/RANDOM/i))return![];if(_0x6f1d05['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x6f1d05[_0x41769f(0x1c3)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x41769f(0x278)][_0x41769f(0xa7a)][_0x41769f(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x178)]=Game_Action[_0xe55837(0x392)]['makeTargets'],Game_Action[_0xe55837(0x392)][_0xe55837(0x2a3)]=function(){const _0x71ca6a=_0xe55837;let _0x1f6ef0=[];return this['isBattleCoreTargetScope']()?_0x1f6ef0=this[_0x71ca6a(0x1de)]():_0x1f6ef0=VisuMZ['BattleCore'][_0x71ca6a(0x178)][_0x71ca6a(0x782)](this),_0x1f6ef0=this['applyTargetFilters'](_0x1f6ef0),_0x1f6ef0;},Game_Action[_0xe55837(0x392)][_0xe55837(0x1de)]=function(){const _0x4e0935=_0xe55837;let _0x2261b7=[];const _0x37c3f2=String(this['item']()[_0x4e0935(0x70c)]),_0x2242b3=VisuMZ[_0x4e0935(0x278)][_0x4e0935(0x678)](this['item'](),'Targets');if(VisuMZ[_0x4e0935(0x278)]['JS'][_0x2242b3]){if('bJDPv'===_0x4e0935(0x55a)){function _0x5b5068(){_0x2490f0+=_0x3281f8['isActor']()?-_0x14c32c:_0x30758a,_0x552206+=_0x162be;}}else{_0x2261b7=VisuMZ[_0x4e0935(0x278)][_0x4e0935(0x178)]['call'](this);const _0x5adc96=VisuMZ[_0x4e0935(0x278)][_0x4e0935(0x678)](this[_0x4e0935(0xa24)](),'Targets');return _0x2261b7=VisuMZ['BattleCore']['JS'][_0x5adc96]['call'](this,this['subject'](),_0x2261b7),this[_0x4e0935(0x994)](_0x2261b7);}}if(_0x37c3f2[_0x4e0935(0x1c3)](/(\d+) RANDOM ANY/i)){let _0x68b074=Number(RegExp['$1']);while(_0x68b074--){if(_0x4e0935(0x27f)!==_0x4e0935(0x27f)){function _0x2db3e0(){const _0x177a6f=_0x4e0935;let _0x48183e=_0x408b1c['BattleCore'][_0x177a6f(0x60a)][_0x177a6f(0x782)](this,_0x8f295e);return _0x48183e=this[_0x177a6f(0x95d)][_0x177a6f(0x646)]*_0x48183e+this[_0x177a6f(0x95d)][_0x177a6f(0x79a)],_0x48183e;}}else{const _0x2cd5e0=Math[_0x4e0935(0x88a)](0x2)===0x0?this[_0x4e0935(0x3be)]():this[_0x4e0935(0x105)]();_0x2261b7[_0x4e0935(0x30a)](_0x2cd5e0[_0x4e0935(0xa33)]());}}return this[_0x4e0935(0x994)](_0x2261b7);}if(_0x37c3f2[_0x4e0935(0x1c3)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if(_0x4e0935(0x530)==='PMvij'){let _0x5bf282=Number(RegExp['$1']);while(_0x5bf282--){_0x2261b7[_0x4e0935(0x30a)](this[_0x4e0935(0x3be)]()[_0x4e0935(0xa33)]());}return this[_0x4e0935(0x994)](_0x2261b7);}else{function _0x436a8a(){const _0x317e5b=_0x4e0935,_0x531ab1=_0xced619(_0x26fd9a['$1'])[_0x317e5b(0x4d1)](/[\r\n]+/)['remove']('');_0x41f8ba[_0x317e5b(0x625)]=_0x1d6baf[_0x317e5b(0x425)](_0x531ab1);}}}if(_0x37c3f2[_0x4e0935(0x1c3)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x4e0935(0x8eb)===_0x4e0935(0x8eb)){let _0x1d99e7=Number(RegExp['$1']);while(_0x1d99e7--){_0x2261b7['push'](this[_0x4e0935(0x105)]()[_0x4e0935(0xa33)]());}return this[_0x4e0935(0x994)](_0x2261b7);}else{function _0x4a8f39(){const _0x319115=_0x4e0935;_0x3c8bb2=_0x175a0f[_0x319115(0x278)]['JS'][_0x3fba83][_0x319115(0x782)](this,this[_0x319115(0x95a)](),_0x2ac441,this[_0x319115(0xa24)](),_0x1b6d56);if(_0x1f71ee)_0x106439=_0x223329;}}}if(_0x37c3f2['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if('IPTac'!==_0x4e0935(0x277))return _0x2261b7[_0x4e0935(0x30a)](...this[_0x4e0935(0x105)]()[_0x4e0935(0x7f1)]()['filter'](_0x2259b2=>_0x2259b2!==this[_0x4e0935(0x95a)]())),this[_0x4e0935(0x994)](_0x2261b7);else{function _0x374a5b(){const _0x2623c1=_0x4e0935,_0x2a3dfd=_0x259381[_0x1ac8cd];if(_0x2a3dfd)_0x408c6c[_0x2623c1(0x30a)](_0x8e6321[_0x2623c1(0x9f8)](_0x2a3dfd));}}}return VisuMZ['BattleCore'][_0x4e0935(0x178)][_0x4e0935(0x782)](this);},Game_Action['prototype'][_0xe55837(0x362)]=function(_0x230620){const _0x4c9612=_0xe55837,_0x2760ce=[];for(let _0x5b6c98=0x0;_0x5b6c98<this[_0x4c9612(0x728)]();_0x5b6c98++){_0x2760ce[_0x4c9612(0x30a)](_0x230620[_0x4c9612(0xa33)]());}return _0x2760ce;},Game_Action[_0xe55837(0x392)][_0xe55837(0xc8)]=function(_0x40b0cd){const _0x3d534e=_0xe55837;if(!this[_0x3d534e(0xa24)]())return _0x40b0cd;const _0x30be67=this[_0x3d534e(0xa24)]()[_0x3d534e(0x35c)];return _0x30be67[_0x3d534e(0x1c3)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x40b0cd['remove'](this[_0x3d534e(0x95a)]()),_0x40b0cd;},VisuMZ[_0xe55837(0x278)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0xe55837(0x392)][_0xe55837(0x351)],Game_Action[_0xe55837(0x392)]['itemEffectAddAttackState']=function(_0x15ec13,_0x50c3dd){const _0xbafbc6=_0xe55837,_0x5393ed=_0x15ec13['isImmortal']();this[_0xbafbc6(0x95a)]()['attackStates']()[_0xbafbc6(0x450)](_0x15ec13[_0xbafbc6(0x5b3)]())&&_0x15ec13[_0xbafbc6(0xf0)](![]),VisuMZ[_0xbafbc6(0x278)]['Game_Action_itemEffectAddAttackState']['call'](this,_0x15ec13,_0x50c3dd),_0x15ec13[_0xbafbc6(0xf0)](_0x5393ed);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x609)]=Game_Action[_0xe55837(0x392)][_0xe55837(0x16c)],Game_Action['prototype']['itemEffectAddNormalState']=function(_0x24285b,_0x44a7de){const _0x4cddcb=_0xe55837,_0x1e878c=_0x24285b['isImmortal']();if(_0x44a7de['dataId']===_0x24285b[_0x4cddcb(0x5b3)]()){if(_0x4cddcb(0xa02)===_0x4cddcb(0x135)){function _0x40c5ab(){const _0x592485=_0x4cddcb,_0x45b6de=this[_0x592485(0x453)](),_0x1d2ed4=this[_0x592485(0xba)]();_0x22107b[_0x592485(0x278)][_0x592485(0x74b)][_0x592485(0x782)](this,_0x104911),this['isEnemy']()&&_0x45b6de&&this[_0x592485(0xb6)]()&&(this[_0x592485(0xbd)]=!this[_0x592485(0x3bb)](),_0x28f848[_0x592485(0x13d)](this[_0x592485(0x2fb)]())),_0x32c863[_0x592485(0x1d0)]()&&_0x1d2ed4!==this[_0x592485(0xba)]()&&(this['battler']()&&this[_0x592485(0xe1)]()[_0x592485(0x659)]());}}else _0x24285b[_0x4cddcb(0xf0)](![]);}VisuMZ[_0x4cddcb(0x278)][_0x4cddcb(0x609)][_0x4cddcb(0x782)](this,_0x24285b,_0x44a7de),_0x24285b['setImmortal'](_0x1e878c);},VisuMZ[_0xe55837(0x278)][_0xe55837(0xa50)]=Game_Action['prototype'][_0xe55837(0x1a3)],Game_Action[_0xe55837(0x392)][_0xe55837(0x1a3)]=function(){const _0x582174=_0xe55837;VisuMZ['BattleCore'][_0x582174(0xa50)][_0x582174(0x782)](this),this[_0x582174(0x1a0)](),this[_0x582174(0x94d)]();},Game_Action[_0xe55837(0x392)][_0xe55837(0x1a0)]=function(){const _0x5728b5=_0xe55837;if(!SceneManager['isSceneBattle']())return;const _0x397137=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0xb76d7=this['item']()['note'][_0x5728b5(0x1c3)](_0x397137);if(_0xb76d7)for(const _0x252af0 of _0xb76d7){if(_0x5728b5(0x328)!=='fahho'){if(!_0x252af0)continue;_0x252af0['match'](_0x397137);const _0x5e5b7d=String(RegExp['$1'])[_0x5728b5(0x4d1)](',')['map'](_0x403451=>String(_0x403451)[_0x5728b5(0x1ee)]()),_0x26bb40=_0x5e5b7d['map'](_0x229bf6=>DataManager['getCommonEventIdWithName'](_0x229bf6));for(const _0x44f267 of _0x26bb40){const _0x4cf297=$dataCommonEvents[_0x44f267];_0x4cf297&&$gameTemp['reserveCommonEvent'](_0x44f267);}}else{function _0x44d11e(){const _0x2d7a69=_0x5728b5;_0x50fb2d['BattleCore'][_0x2d7a69(0x539)]&&_0x286bee['BattleCore'][_0x2d7a69(0x539)]['call'](this,_0xc023da),_0x2b1ae6['BattleCore'][_0x2d7a69(0xed)](_0x5bb027);}}}},DataManager[_0xe55837(0x962)]=function(_0x215e85){const _0x2d8ff7=_0xe55837;_0x215e85=_0x215e85['toUpperCase']()['trim'](),this[_0x2d8ff7(0x132)]=this[_0x2d8ff7(0x132)]||{};if(this['_commonEventIDs'][_0x215e85])return this[_0x2d8ff7(0x132)][_0x215e85];for(const _0x5c6630 of $dataCommonEvents){if(!_0x5c6630)continue;let _0x4d2835=_0x5c6630[_0x2d8ff7(0x625)];_0x4d2835=_0x4d2835[_0x2d8ff7(0x1eb)](/\x1I\[(\d+)\]/gi,''),_0x4d2835=_0x4d2835[_0x2d8ff7(0x1eb)](/\\I\[(\d+)\]/gi,''),this[_0x2d8ff7(0x132)][_0x4d2835[_0x2d8ff7(0x448)]()[_0x2d8ff7(0x1ee)]()]=_0x5c6630['id'];}return this[_0x2d8ff7(0x132)][_0x215e85]||0x0;},Game_Action[_0xe55837(0x392)][_0xe55837(0x94d)]=function(){const _0x351e21=_0xe55837;if(!SceneManager[_0x351e21(0x1d0)]())return;const _0x572ea1=VisuMZ['BattleCore'][_0x351e21(0x108)][_0x351e21(0x6c1)];if(_0x572ea1[_0x351e21(0x1b9)]){if(_0x351e21(0x256)===_0x351e21(0x2c8)){function _0x181dd1(){this['_activeWeaponSlot']=_0x15e62b||0x0;}}else $gameSwitches['setValue'](_0x572ea1[_0x351e21(0x1b9)],![]);}_0x572ea1[_0x351e21(0x7eb)]&&$gameSwitches[_0x351e21(0x649)](_0x572ea1[_0x351e21(0x7eb)],![]);_0x572ea1[_0x351e21(0x6d1)]&&$gameVariables['setValue'](_0x572ea1['VariableDmg'],0x0);if(_0x572ea1[_0x351e21(0x240)]){if(_0x351e21(0x620)===_0x351e21(0x620))$gameVariables[_0x351e21(0x649)](_0x572ea1[_0x351e21(0x240)],0x0);else{function _0x20c3d9(){const _0x852ff2=_0x351e21;return _0x38e8ea[_0x852ff2(0x49d)](_0x3c2abc=>_0x3c2abc[_0x852ff2(0x453)]()&&_0x3c2abc!==_0x2b0f57);}}}},Game_Action[_0xe55837(0x392)]['applyResultSwitches']=function(_0x19db9d){const _0x239333=_0xe55837;if(!SceneManager[_0x239333(0x1d0)]())return;if(!_0x19db9d)return;const _0x3c2f82=_0x19db9d[_0x239333(0x83a)](),_0x3c26fa=VisuMZ['BattleCore']['Settings'][_0x239333(0x6c1)];_0x3c26fa[_0x239333(0x1b9)]&&_0x3c2f82[_0x239333(0x1e6)]&&$gameSwitches[_0x239333(0x649)](_0x3c26fa[_0x239333(0x1b9)],!![]);_0x3c26fa['SwitchMissEvade']&&(_0x3c2f82[_0x239333(0x7a6)]||_0x3c2f82['evaded'])&&$gameSwitches[_0x239333(0x649)](_0x3c26fa[_0x239333(0x7eb)],!![]);if(_0x3c26fa['VariableDmg']){let _0x438afd=$gameVariables[_0x239333(0x6f4)](_0x3c26fa[_0x239333(0x6d1)]);_0x3c2f82['hpDamage']>0x0&&(_0x438afd+=Math[_0x239333(0x474)](_0x3c2f82[_0x239333(0x42b)])),$gameVariables[_0x239333(0x649)](_0x3c26fa[_0x239333(0x6d1)],_0x438afd);}if(_0x3c26fa['VariableHeal']){if('ImAuS'!==_0x239333(0x802)){let _0x4f2b2d=$gameVariables[_0x239333(0x6f4)](_0x3c26fa['VariableHeal']);if(_0x3c2f82[_0x239333(0x42b)]<0x0){if('RXNHw'===_0x239333(0x6e5))_0x4f2b2d+=Math[_0x239333(0x474)](_0x3c2f82['hpDamage']);else{function _0x384765(){const _0x5df4d8=_0x239333,_0x33da65=_0x2d46ef['parse']('['+_0x20b8be['$1'][_0x5df4d8(0x1c3)](/\d+/g)+']');for(const _0x571a41 of _0x33da65){if(!_0x616d80[_0x5df4d8(0x6f4)](_0x571a41))return![];}return!![];}}}$gameVariables['setValue'](_0x3c26fa['VariableHeal'],_0x4f2b2d);}else{function _0x180325(){const _0x5e3d78=_0x239333;this[_0x5e3d78(0x30a)](_0x5e3d78(0x1df)),this[_0x5e3d78(0x30a)](_0x5e3d78(0x3d3)),this[_0x5e3d78(0x30a)](_0x5e3d78(0x390),_0x1b516a[_0x5e3d78(0x6af)]['format'](_0x33455f[_0x5e3d78(0x625)]())),this['push'](_0x5e3d78(0xea));}}}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x269)]=Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x120)],Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x120)]=function(){const _0x4d73ee=_0xe55837;VisuMZ[_0x4d73ee(0x278)][_0x4d73ee(0x269)][_0x4d73ee(0x782)](this),this['initMembersBattleCore']();},Game_BattlerBase[_0xe55837(0x392)]['initMembersBattleCore']=function(){const _0x108e34=_0xe55837;this[_0x108e34(0x99e)]=![];},VisuMZ[_0xe55837(0x278)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0xe55837(0x392)]['refresh'],Game_BattlerBase['prototype'][_0xe55837(0x597)]=function(){const _0x3e7a1f=_0xe55837;this[_0x3e7a1f(0x28f)]={},VisuMZ[_0x3e7a1f(0x278)]['Game_BattlerBase_refresh'][_0x3e7a1f(0x782)](this);},Game_BattlerBase[_0xe55837(0x392)]['checkCacheKey']=function(_0x1c6f33){const _0x413b15=_0xe55837;return this[_0x413b15(0x28f)]=this['_cache']||{},this['_cache'][_0x1c6f33]!==undefined;},Game_BattlerBase['prototype'][_0xe55837(0x1c0)]=function(){const _0x109bc2=_0xe55837;if(this[_0x109bc2(0x28f)][_0x109bc2(0x1c0)]!==undefined)return this[_0x109bc2(0x28f)][_0x109bc2(0x1c0)];const _0x1162f1=/<DAMAGE CAP:[ ](\d+)>/i,_0x31c5a5=this[_0x109bc2(0x810)]()[_0x109bc2(0x584)](_0x246394=>_0x246394&&_0x246394[_0x109bc2(0x35c)][_0x109bc2(0x1c3)](_0x1162f1)?Number(RegExp['$1']):0x0);let _0x2fb8a4=_0x31c5a5['length']>0x0?Math['max'](..._0x31c5a5):0x0;if(_0x2fb8a4<=0x0)_0x2fb8a4=VisuMZ[_0x109bc2(0x278)][_0x109bc2(0x108)]['Damage']['DefaultHardCap'];return this[_0x109bc2(0x28f)][_0x109bc2(0x1c0)]=_0x2fb8a4,this['_cache'][_0x109bc2(0x1c0)];},Game_BattlerBase['prototype'][_0xe55837(0x9f6)]=function(){const _0x590702=_0xe55837;if(this[_0x590702(0x28f)][_0x590702(0x4d7)]!==undefined)return this[_0x590702(0x28f)][_0x590702(0x4d7)];let _0xe720ce=VisuMZ[_0x590702(0x278)][_0x590702(0x108)][_0x590702(0x9fc)][_0x590702(0x2ec)];const _0x1d75ce=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x587552=this[_0x590702(0x810)]()[_0x590702(0x584)](_0x444c0f=>_0x444c0f&&_0x444c0f[_0x590702(0x35c)][_0x590702(0x1c3)](_0x1d75ce)?Number(RegExp['$1'])/0x64:0x0);return _0xe720ce=_0x587552[_0x590702(0x3eb)]((_0x16e724,_0x2faf50)=>_0x16e724+_0x2faf50,_0xe720ce),this[_0x590702(0x28f)][_0x590702(0x4d7)]=_0xe720ce,this[_0x590702(0x28f)][_0x590702(0x4d7)][_0x590702(0x1cb)](0.01,0x1);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x34c)]=Game_BattlerBase[_0xe55837(0x392)]['die'],Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x226)]=function(){const _0x481a36=_0xe55837;VisuMZ['BattleCore'][_0x481a36(0x34c)][_0x481a36(0x782)](this),SceneManager[_0x481a36(0x1d0)]()&&this['requestMotion']('dead');},Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0xe1)]=function(){const _0x41e55b=_0xe55837;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager[_0x41e55b(0x1c8)][_0x41e55b(0x54d)])return null;return SceneManager[_0x41e55b(0x1c8)][_0x41e55b(0x54d)][_0x41e55b(0xa1b)](this);},Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x3fe)]=function(){const _0x2d2982=_0xe55837;return VisuMZ[_0x2d2982(0x278)][_0x2d2982(0x108)][_0x2d2982(0x948)][_0x2d2982(0x637)];},Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x1f9)]=function(){const _0xbf49c=_0xe55837;return VisuMZ['BattleCore'][_0xbf49c(0x108)][_0xbf49c(0x948)][_0xbf49c(0x98b)];},Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x925)]=function(){const _0x2e91e8=_0xe55837;return this[_0x2e91e8(0x107)]&&this[_0x2e91e8(0x107)]()?VisuMZ[_0x2e91e8(0x278)][_0x2e91e8(0x108)][_0x2e91e8(0x948)]['Shadow']:VisuMZ['BattleCore'][_0x2e91e8(0x108)][_0x2e91e8(0x214)][_0x2e91e8(0x492)];},Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x1c9)]=function(){return!![];},Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x1bc)]=function(){return 0x0;},Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x8a1)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0xe55837(0x5ab)]=function(_0x4dac24){const _0x1ba4ef=_0xe55837;if(!_0x4dac24)return 0x0;let _0x2ce9b3=0x0;const _0x4bb3ad=_0x4dac24[_0x1ba4ef(0x35c)];return _0x4bb3ad[_0x1ba4ef(0x1c3)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x2ce9b3+=Number(RegExp['$1'])),_0x4bb3ad[_0x1ba4ef(0x1c3)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x2ce9b3+=Number(RegExp['$1'])),_0x2ce9b3;},Game_BattlerBase['prototype'][_0xe55837(0x826)]=function(_0x5b3442){const _0x4cb7f5=_0xe55837;if(!_0x5b3442)return 0x0;let _0x275220=0x0;const _0x180298=_0x5b3442[_0x4cb7f5(0x35c)];return _0x180298['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x275220+=Number(RegExp['$1'])),_0x180298[_0x4cb7f5(0x1c3)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x275220+=Number(RegExp['$2'])),_0x275220;},VisuMZ['BattleCore'][_0xe55837(0x951)]=Game_BattlerBase['prototype'][_0xe55837(0x568)],Game_BattlerBase[_0xe55837(0x392)]['isStateResist']=function(_0x4330df){const _0x3a88a8=_0xe55837;if(_0x4330df===this[_0x3a88a8(0x5b3)]()&&this[_0x3a88a8(0x473)]())return!![];return VisuMZ[_0x3a88a8(0x278)]['Game_BattlerBase_isStateResist'][_0x3a88a8(0x782)](this,_0x4330df);},Game_BattlerBase['prototype'][_0xe55837(0x473)]=function(){const _0x4acc7f=_0xe55837;return this[_0x4acc7f(0x99e)];},Game_BattlerBase['prototype'][_0xe55837(0xf0)]=function(_0x409a42){_0x409a42?this['addImmortal']():this['removeImmortal']();},Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x42e)]=function(){const _0x2c557f=_0xe55837;if(this['isDead']())return;this[_0x2c557f(0x99e)]=!![];},Game_BattlerBase[_0xe55837(0x392)]['removeImmortal']=function(){const _0x2e0339=_0xe55837,_0x134571=this[_0x2e0339(0x453)]();this[_0x2e0339(0x99e)]=![],this['refresh']();if(this[_0x2e0339(0xb6)]()&&_0x134571){if(_0x2e0339(0x13c)===_0x2e0339(0x13c))this[_0x2e0339(0x408)](),this[_0x2e0339(0x41b)]();else{function _0x33431b(){const _0x4c1a74=_0x2e0339;_0x321d49[_0x4c1a74(0x7af)](_0x54149e,_0xa39c83);}}}},VisuMZ[_0xe55837(0x278)]['Game_BattlerBase_canAttack']=Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x216)],Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x216)]=function(){const _0x518802=_0xe55837;if(!this[_0x518802(0xa0c)]())return![];return VisuMZ[_0x518802(0x278)]['Game_BattlerBase_canAttack']['call'](this);},Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0xa0c)]=function(){const _0x5ea7fa=_0xe55837;for(const _0x527f30 of this[_0x5ea7fa(0x810)]()){if('hXIPF'===_0x5ea7fa(0x942)){if(!_0x527f30)continue;if(_0x527f30[_0x5ea7fa(0x35c)][_0x5ea7fa(0x1c3)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}else{function _0x5451b0(){const _0x5b6f44=_0x5ea7fa;this[_0x5b6f44(0x28f)]['svShadow']=!![];}}}return!![];},VisuMZ[_0xe55837(0x278)][_0xe55837(0x3b7)]=Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x49c)],Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x49c)]=function(){const _0x2bc487=_0xe55837;if(!this[_0x2bc487(0x46f)]())return![];return VisuMZ[_0x2bc487(0x278)]['Game_BattlerBase_canGuard'][_0x2bc487(0x782)](this);},Game_BattlerBase[_0xe55837(0x392)][_0xe55837(0x46f)]=function(){const _0x29fc5f=_0xe55837;for(const _0x362b1 of this[_0x29fc5f(0x810)]()){if(!_0x362b1)continue;if(_0x362b1[_0x29fc5f(0x35c)][_0x29fc5f(0x1c3)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype'][_0xe55837(0x9e3)]=function(){const _0x2514d2=_0xe55837;for(const _0x438227 of this[_0x2514d2(0x810)]()){if(!_0x438227)continue;if(_0x438227[_0x2514d2(0x35c)]['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0xe55837(0x55c)]=Game_Battler[_0xe55837(0x392)][_0xe55837(0x59d)],Game_Battler[_0xe55837(0x392)]['regenerateAll']=function(){const _0x9a5b91=_0xe55837;if(SceneManager[_0x9a5b91(0x1d0)]()&&$gameTroop[_0x9a5b91(0x2c6)]()<=0x0)return;this['processBattleCoreJS'](_0x9a5b91(0x21b)),VisuMZ[_0x9a5b91(0x278)]['Game_Battler_regenerateAll'][_0x9a5b91(0x782)](this),this[_0x9a5b91(0x295)](),this[_0x9a5b91(0x8e7)](_0x9a5b91(0xa54));},Game_Battler['prototype'][_0xe55837(0x295)]=function(){const _0x5216c9=_0xe55837;if(SceneManager[_0x5216c9(0x1d0)]())for(const _0x331a8c of this[_0x5216c9(0x810)]()){if(!_0x331a8c)continue;this['onRegeneratePlayStateAnimation'](_0x331a8c);}},Game_Battler['prototype'][_0xe55837(0x210)]=function(_0x4ef304){const _0x3af454=_0xe55837;if(!Imported[_0x3af454(0x209)])return;if(!SceneManager[_0x3af454(0x1d0)]())return;if(this[_0x3af454(0xb6)]())return;if(this['isHidden']())return;if(_0x4ef304[_0x3af454(0x35c)][_0x3af454(0x1c3)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if('RVJTA'===_0x3af454(0x7e2)){const _0x509db9=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x509db9,![],![]);}else{function _0x171510(){const _0x3eccb0=_0x3af454;_0x1f810f['BattleCore'][_0x3eccb0(0x400)][_0x3eccb0(0x782)](this),this[_0x3eccb0(0x4cf)]();}}}},VisuMZ[_0xe55837(0x278)][_0xe55837(0xcd)]=Game_Battler[_0xe55837(0x392)][_0xe55837(0x6e2)],Game_Battler[_0xe55837(0x392)][_0xe55837(0x6e2)]=function(){const _0x6661b1=_0xe55837;this[_0x6661b1(0x8e7)](_0x6661b1(0x51a)),VisuMZ[_0x6661b1(0x278)]['Game_Battler_startTpbTurn']['call'](this),this[_0x6661b1(0x8e7)]('PostStartTurnJS');},VisuMZ['BattleCore'][_0xe55837(0x161)]=Game_Battler[_0xe55837(0x392)][_0xe55837(0x8bb)],Game_Battler[_0xe55837(0x392)][_0xe55837(0x8bb)]=function(){const _0x165fce=_0xe55837;this[_0x165fce(0x8e7)](_0x165fce(0x4bd)),VisuMZ[_0x165fce(0x278)]['Game_Battler_onTurnEnd'][_0x165fce(0x782)](this),this[_0x165fce(0x8e7)](_0x165fce(0x809));},Game_Battler['prototype'][_0xe55837(0x8e7)]=function(_0x74bf6e){const _0x504536=_0xe55837;if(this[_0x504536(0x833)]||this[_0x504536(0x5a9)])return;const _0x4bb652=VisuMZ['BattleCore'][_0x504536(0x108)]['Mechanics'];if(_0x4bb652[_0x74bf6e])_0x4bb652[_0x74bf6e]['call'](this);for(const _0x27aa2b of this[_0x504536(0x810)]()){if(!_0x27aa2b)continue;key=VisuMZ[_0x504536(0x278)][_0x504536(0x678)](_0x27aa2b,_0x74bf6e);if(VisuMZ[_0x504536(0x278)]['JS'][key]){if('ijhts'==='ijhts')VisuMZ[_0x504536(0x278)]['JS'][key][_0x504536(0x782)](this,this,this,_0x27aa2b,0x0);else{function _0x3b3366(){const _0x5b7405=_0x504536,_0x1163fb=this[_0x5b7405(0x2cc)]();if(['xp'][_0x5b7405(0x450)](_0x1163fb)&&!_0x138dba[_0x5b7405(0x22a)]()){this[_0x5b7405(0x8e9)](0x0,0x0,0x0,0x0);return;}_0x373f1d[_0x5b7405(0x392)]['refreshCursor'][_0x5b7405(0x782)](this);}}}}},Game_Battler[_0xe55837(0x392)][_0xe55837(0x20c)]=function(){const _0x3e3910=_0xe55837;return VisuMZ[_0x3e3910(0x278)]['Settings'][_0x3e3910(0x948)][_0x3e3910(0x5d6)]||![];},Game_Battler[_0xe55837(0x392)][_0xe55837(0x28a)]=function(){const _0x4d0718=_0xe55837;if(this[_0x4d0718(0x84c)]()){if(this['chantStyle']()){if(this[_0x4d0718(0x3b4)][_0x4d0718(0x9e7)](_0x46a6b5=>_0x46a6b5[_0x4d0718(0xa24)]()&&_0x46a6b5[_0x4d0718(0x456)]())){if(_0x4d0718(0x6f6)===_0x4d0718(0x6f6))return!![];else{function _0x50d46d(){const _0x3f7aef=_0x4d0718;if(!_0x30dc83[_0x3f7aef(0x1d0)]())return null;if(!_0xa6c9a9[_0x3f7aef(0x1c8)][_0x3f7aef(0x54d)])return null;return _0x23e459[_0x3f7aef(0x1c8)][_0x3f7aef(0x54d)][_0x3f7aef(0xa1b)](this);}}}}else{if(this[_0x4d0718(0x3b4)]['some'](_0x318363=>_0x318363[_0x4d0718(0xa24)]()&&_0x318363[_0x4d0718(0x42c)]()))return!![];}}if(BattleManager[_0x4d0718(0x6a1)]()&&this[_0x4d0718(0x75d)]===_0x4d0718(0x63b)){if(this[_0x4d0718(0x20c)]()){if(_0x4d0718(0x5f5)!=='Ewsfv')return this[_0x4d0718(0x5a3)]()&&this[_0x4d0718(0x5a3)]()[_0x4d0718(0xa24)]()&&this[_0x4d0718(0x5a3)]()['isMagical']();else{function _0x479f28(){const _0x243a21=_0x4d0718;this['_currentActor']=this[_0x243a21(0x421)],this['_currentActor'][_0x243a21(0x75d)]=_0x243a21(0x59c),this[_0x243a21(0x140)]=!![],this['_tpbSceneChangeCacheActor']=null;}}}else return this['currentAction']()&&this['currentAction']()[_0x4d0718(0xa24)]()&&this[_0x4d0718(0x5a3)]()[_0x4d0718(0x42c)]();}return![];},Game_Battler[_0xe55837(0x392)][_0xe55837(0x958)]=function(){const _0x3be3cd=_0xe55837;if(BattleManager[_0x3be3cd(0x6a1)]()&&this[_0x3be3cd(0x75d)]===_0x3be3cd(0x63b)){if('wIYoo'===_0x3be3cd(0x538))return this[_0x3be3cd(0x20c)]()?this[_0x3be3cd(0x5a3)]()&&this[_0x3be3cd(0x5a3)]()['item']()&&!this[_0x3be3cd(0x5a3)]()['isMagical']():this['currentAction']()&&this[_0x3be3cd(0x5a3)]()[_0x3be3cd(0xa24)]()&&!this['currentAction']()['isMagicSkill']();else{function _0x50b188(){const _0x1a5ac6=_0x3be3cd;this[_0x1a5ac6(0x1bf)]['x']=this['x'],this[_0x1a5ac6(0x1bf)]['y']=this['y'];}}}return![];},VisuMZ[_0xe55837(0x278)][_0xe55837(0x9d8)]=Game_Battler['prototype'][_0xe55837(0x99f)],Game_Battler[_0xe55837(0x392)][_0xe55837(0x99f)]=function(){const _0xe7a20c=_0xe55837;VisuMZ[_0xe7a20c(0x278)][_0xe7a20c(0x9d8)][_0xe7a20c(0x782)](this),this['_damagePopupArray']=[];},Game_Battler[_0xe55837(0x392)]['isDamagePopupRequested']=function(){const _0x3cff13=_0xe55837;if(!this[_0x3cff13(0x77a)])this[_0x3cff13(0x99f)]();return this[_0x3cff13(0x77a)]['length']>0x0;},Game_Battler[_0xe55837(0x392)][_0xe55837(0x376)]=function(){const _0x1ce31d=_0xe55837;if(!SceneManager[_0x1ce31d(0x1d0)]())return;if(!this[_0x1ce31d(0x77a)])this[_0x1ce31d(0x99f)]();this['createSeparateDamagePopups']();const _0x542a6e=this[_0x1ce31d(0xe1)]();if(_0x542a6e)_0x542a6e[_0x1ce31d(0x1fb)]();},Game_Battler['prototype'][_0xe55837(0x5ce)]=function(){const _0x23b784=_0xe55837,_0x2635a6=this[_0x23b784(0x83a)]();if(_0x2635a6[_0x23b784(0x7a6)]||_0x2635a6[_0x23b784(0x68b)]){const _0xa109bf=JsonEx[_0x23b784(0x9f8)](_0x2635a6);_0xa109bf[_0x23b784(0x746)]=![],_0xa109bf[_0x23b784(0x672)]=0x0,this['_damagePopupArray'][_0x23b784(0x30a)](_0xa109bf);}if(_0x2635a6['hpAffected']){const _0x867f9f=JsonEx[_0x23b784(0x9f8)](_0x2635a6);_0x867f9f[_0x23b784(0x7a6)]=![],_0x867f9f[_0x23b784(0x68b)]=![],_0x867f9f[_0x23b784(0x672)]=0x0,this[_0x23b784(0x77a)]['push'](_0x867f9f);}if(_0x2635a6[_0x23b784(0x672)]!==0x0){if(_0x23b784(0x6b4)===_0x23b784(0x6b4)){const _0x4ce23e=JsonEx['makeDeepCopy'](_0x2635a6);_0x4ce23e[_0x23b784(0x7a6)]=![],_0x4ce23e['evaded']=![],_0x4ce23e[_0x23b784(0x746)]=![],this[_0x23b784(0x77a)]['push'](_0x4ce23e);}else{function _0x33a98d(){const _0x2c89e9=_0x23b784;this[_0x2c89e9(0x270)]();}}}},Game_Battler[_0xe55837(0x392)][_0xe55837(0x7b7)]=function(){const _0x15c1b7=_0xe55837;if(!this[_0x15c1b7(0x77a)])this['clearDamagePopup']();if(VisuMZ['BattleCore'][_0x15c1b7(0x108)][_0x15c1b7(0x9fc)][_0x15c1b7(0xa2a)])return this[_0x15c1b7(0x77a)][_0x15c1b7(0x39f)]();else{if(_0x15c1b7(0x48d)===_0x15c1b7(0xa0e)){function _0x383da2(){const _0x564987=_0x15c1b7;_0xe04065[_0x564987(0x278)][_0x564987(0x4d3)][_0x564987(0x782)](this);}}else return this['_damagePopupArray']['pop']();}},Game_Battler['prototype']['setupTextPopup']=function(_0x14cbc9,_0x56e38b){const _0x2a0199=_0xe55837;if(!SceneManager[_0x2a0199(0x1d0)]())return;if(!this[_0x2a0199(0xe1)]())return;if(_0x14cbc9[_0x2a0199(0x4c5)]<=0x0)return;_0x56e38b=_0x56e38b||{},_0x56e38b[_0x2a0199(0x733)]=_0x56e38b[_0x2a0199(0x733)]||_0x2a0199(0x5a4),_0x56e38b[_0x2a0199(0x529)]=_0x56e38b[_0x2a0199(0x529)]||[0x0,0x0,0x0,0x0],_0x56e38b[_0x2a0199(0x5c3)]=_0x56e38b[_0x2a0199(0x5c3)]||0x0,this[_0x2a0199(0xe1)]()[_0x2a0199(0x63e)](_0x14cbc9,_0x56e38b);},Game_Battler[_0xe55837(0x392)]['setupIconTextPopup']=function(_0x416f11,_0x24d352,_0x258081){const _0x10d83e=_0xe55837;if(!SceneManager[_0x10d83e(0x1d0)]())return;if(!this[_0x10d83e(0xe1)]())return;if(_0x24d352[_0x10d83e(0x4c5)]<=0x0)return;_0x258081=_0x258081||{},_0x258081[_0x10d83e(0x733)]=_0x258081[_0x10d83e(0x733)]||'#ffffff',_0x258081['flashColor']=_0x258081[_0x10d83e(0x529)]||[0x0,0x0,0x0,0x0],_0x258081[_0x10d83e(0x5c3)]=_0x258081[_0x10d83e(0x5c3)]||0x0,this[_0x10d83e(0xe1)]()[_0x10d83e(0x56c)](_0x416f11,_0x24d352,_0x258081);},Game_Battler['prototype']['notFocusValid']=function(){const _0x16ff61=_0xe55837;if(this[_0x16ff61(0x1a6)]())return![];if(this[_0x16ff61(0x453)]()&&this[_0x16ff61(0xa6c)]())return!![];if(this['isEnemy']()&&this[_0x16ff61(0x674)]()){if(_0x16ff61(0x141)===_0x16ff61(0x1e1)){function _0x5e52ac(){const _0x2b50c8=_0x16ff61;this[_0x2b50c8(0x5e9)]['bitmap']=_0x23fc0f[_0x2b50c8(0x26a)];return;}}else{if(this['isDead']()&&this['allowCollapse']())return![];}}else{if(this[_0x16ff61(0xb6)]())return![];}return!![];},VisuMZ['BattleCore']['Game_Battler_clearMotion']=Game_Battler['prototype'][_0xe55837(0x8be)],Game_Battler['prototype'][_0xe55837(0x8be)]=function(){const _0x530699=_0xe55837;VisuMZ[_0x530699(0x278)]['Game_Battler_clearMotion'][_0x530699(0x782)](this),this['clearFreezeMotion']();},Game_Battler[_0xe55837(0x392)][_0xe55837(0x5f9)]=function(){return!![];},Game_Battler[_0xe55837(0x392)][_0xe55837(0x156)]=function(){return![];},VisuMZ[_0xe55837(0x278)][_0xe55837(0x908)]=Game_Battler[_0xe55837(0x392)][_0xe55837(0x367)],Game_Battler['prototype'][_0xe55837(0x367)]=function(_0x36acc8){const _0x228185=_0xe55837;VisuMZ[_0x228185(0x278)][_0x228185(0x908)][_0x228185(0x782)](this,_0x36acc8),this[_0x228185(0x70a)](_0x36acc8);},Game_Battler[_0xe55837(0x392)][_0xe55837(0x70a)]=function(_0x161d4e){const _0x3f23be=_0xe55837;this[_0x3f23be(0x8c2)](![]);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x7ce)]=Game_Battler['prototype'][_0xe55837(0x8a9)],Game_Battler[_0xe55837(0x392)]['performActionStart']=function(_0x222ddc){const _0x349087=_0xe55837;VisuMZ['BattleCore']['Game_Battler_performActionStart'][_0x349087(0x782)](this,_0x222ddc);if(!_0x222ddc[_0x349087(0x87d)]()){const _0x3c4b03=this[_0x349087(0xe1)]();_0x3c4b03&&_0x3c4b03[_0x349087(0x489)]();}this[_0x349087(0x8c2)](![]);},Game_Battler[_0xe55837(0x392)]['performActionEndMembers']=function(){const _0xcb826=_0xe55837,_0x8acf4e=this[_0xcb826(0x496)];this['_flinched']=![];if(BattleManager['isActiveTpb']()&&this[_0xcb826(0xa79)]()){const _0xa967ea=this[_0xcb826(0xe1)]();if(_0xa967ea&&_0x8acf4e)_0xa967ea['stepForward']();return;}const _0x495921=this[_0xcb826(0xe1)]();if(_0x495921)_0x495921['stepBack']();this[_0xcb826(0x8c2)](![]),this[_0xcb826(0x41b)]();},Game_Battler[_0xe55837(0x392)][_0xe55837(0x819)]=function(_0x5dc412){const _0x36a7b5=_0xe55837;if(_0x5dc412[_0x36a7b5(0x4ea)]())this['performAttack']();else{if(_0x5dc412[_0x36a7b5(0x87d)]()){if(_0x36a7b5(0x4cb)!==_0x36a7b5(0x4cb)){function _0x449ecc(){const _0x192803=_0x36a7b5;_0x4ed547+=_0x30cbd1[_0x192803(0x474)](_0x2a9ed1['hpDamage']);}}else this['requestMotion']('guard');}else{if(_0x5dc412['isMagical']()){if('byTeW'!==_0x36a7b5(0x4ee)){function _0x3dd543(){const _0x3cd57e=_0x36a7b5;return this['item']()['note'][_0x3cd57e(0x1c3)](/<DAMAGE CAP:[ ](\d+)>/i)?_0x41a1df(_0x302a79['$1']):this['subject']()['hardDamageCap']();}}else this['requestMotion'](_0x36a7b5(0x703));}else{if(_0x5dc412[_0x36a7b5(0x831)]()){if(_0x36a7b5(0x7ad)===_0x36a7b5(0x7ad))_0x5dc412[_0x36a7b5(0xa24)]()[_0x36a7b5(0x3ff)]['type']>0x0?this[_0x36a7b5(0x761)]():this[_0x36a7b5(0x835)]('skill');else{function _0x3c426d(){const _0x41e22c=_0x36a7b5;_0x57115b[_0x41e22c(0x622)]();}}}else _0x5dc412[_0x36a7b5(0x6b7)]()&&this[_0x36a7b5(0x835)]('item');}}}},Game_Battler[_0xe55837(0x392)][_0xe55837(0x495)]=function(){const _0x332f3a=_0xe55837;return $dataSystem[_0x332f3a(0x99c)][0x0];},Game_Battler[_0xe55837(0x392)]['getAttackWeaponAnimationId']=function(){const _0x4935ae=_0xe55837,_0x317ec1=this['getAttackMotion']();return _0x317ec1?_0x317ec1[_0x4935ae(0x5ad)]:0x0;},Game_Battler[_0xe55837(0x392)][_0xe55837(0x2dc)]=function(_0x2164e1){const _0x1a8cc7=_0xe55837;if(!$gameSystem[_0x1a8cc7(0x22a)]())return;const _0xad54ab=this[_0x1a8cc7(0xe1)](),_0x3c1dce=_0x2164e1[_0x1a8cc7(0xe1)]();if(!_0xad54ab||!_0x3c1dce)return;const _0x44ddf9=_0x3c1dce[_0x1a8cc7(0xa0)],_0x2aff5e=_0x3c1dce[_0x1a8cc7(0x937)];this[_0x1a8cc7(0x355)](_0x44ddf9,_0x2aff5e,0x0,![],'Linear',-0x1),_0xad54ab[_0x1a8cc7(0x9d4)]();const _0x301d48=VisuMZ[_0x1a8cc7(0x278)][_0x1a8cc7(0x108)][_0x1a8cc7(0xa10)];let _0x242dab=(_0x3c1dce[_0x1a8cc7(0x124)]+_0xad54ab[_0x1a8cc7(0x124)])/0x2;_0x242dab*=this['isActor']()?0x1:-0x1;let _0x21f202=_0x301d48[_0x1a8cc7(0x71b)]*(this[_0x1a8cc7(0x107)]()?0x1:-0x1);_0x2164e1['moveBattlerDistance'](_0x242dab,_0x21f202,0x0,![],_0x1a8cc7(0x837)),_0x3c1dce[_0x1a8cc7(0x9d4)]();},Game_Battler[_0xe55837(0x392)]['requestMotion']=function(_0x328e95){const _0x134db5=_0xe55837;if(SceneManager['isSceneBattle']()){const _0x2ccc5c=this['battler']();_0x2ccc5c&&(_0x2ccc5c['forceMotion'](_0x328e95),[_0x134db5(0x4c8),_0x134db5(0x354),_0x134db5(0x406)]['includes'](_0x328e95)&&this['performWeaponAnimation']());}this[_0x134db5(0x5b7)]();},Game_Battler[_0xe55837(0x392)]['performWeaponAnimation']=function(){},Game_Battler[_0xe55837(0x392)][_0xe55837(0x345)]=function(_0x5521aa){const _0x310530=_0xe55837;if(SceneManager[_0x310530(0x1d0)]()){if('EMuQh'!==_0x310530(0x2b2)){const _0x5e8473=this[_0x310530(0xe1)]();if(_0x5e8473)_0x5e8473[_0x310530(0x8df)](_0x5521aa);}else{function _0x165d5b(){const _0x515f1f=_0x310530,_0x1fa210=_0x7ee4b7['inputtingAction']();_0x1fa210[_0x515f1f(0x317)](this['_actorCommandWindow'][_0x515f1f(0xa4)]()),this['onSelectAction']();}}}},Game_Battler['prototype'][_0xe55837(0x2d9)]=function(){const _0x5e0636=_0xe55837;if(SceneManager[_0x5e0636(0x1d0)]()){const _0x2b127a=this[_0x5e0636(0xa71)]();this['startWeaponAnimation'](_0x2b127a);}},Game_Battler[_0xe55837(0x392)][_0xe55837(0x932)]=function(_0x40eb45,_0x21fa23){const _0x44b9de=_0xe55837;if(!_0x40eb45)return;if(!_0x40eb45[_0x44b9de(0xa24)]())return;if(_0x40eb45['isAttack']())return;if(_0x40eb45[_0x44b9de(0x87d)]())return;if(_0x40eb45[_0x44b9de(0x6b7)]())return;let _0x48b254=0x0;const _0x38990b=VisuMZ[_0x44b9de(0x278)][_0x44b9de(0x108)]['ActionSequence'],_0xea8d89=_0x40eb45['item']()[_0x44b9de(0x35c)];if(_0xea8d89[_0x44b9de(0x1c3)](/<CAST ANIMATION: (\d+)>/i)){if(_0x44b9de(0x55e)!==_0x44b9de(0x55e)){function _0x2f32c3(){const _0x45b43f=_0x44b9de;return _0x47a32a['_scene'][_0x45b43f(0x2cc)]()===_0x45b43f(0x1bb)?_0x3e04d3[_0x45b43f(0x278)]['Settings']['BattleLayout'][_0x45b43f(0x64e)]:_0x116655['BattleCore']['Settings'][_0x45b43f(0x22d)][_0x45b43f(0x276)];}}else _0x48b254=Number(RegExp['$1']);}else{if(_0xea8d89[_0x44b9de(0x1c3)](/<NO CAST ANIMATION>/i))return;else{if(_0x40eb45[_0x44b9de(0x46e)]()){if('uYfgm'===_0x44b9de(0x2c1))_0x48b254=_0x38990b['CastCertain'];else{function _0xae86b5(){const _0x1b2ecc=_0x44b9de;_0x46e67e[_0x1b2ecc(0x4f2)]([_0xc16157]);}}}else{if(_0x40eb45[_0x44b9de(0x64b)]())_0x48b254=_0x38990b['CastPhysical'];else{if(_0x40eb45[_0x44b9de(0x456)]()){if(_0x44b9de(0xa2f)!==_0x44b9de(0xa49))_0x48b254=_0x38990b['CastMagical'];else{function _0x316112(){const _0x5cf00c=_0x44b9de;return _0x848c9a['friendsUnit']()[_0x5cf00c(0x5ca)]();}}}}}}}_0x48b254>0x0&&$gameTemp[_0x44b9de(0x21f)]([this],_0x48b254,!!_0x21fa23);},Game_Battler[_0xe55837(0x392)][_0xe55837(0x726)]=function(){const _0x1e542f=_0xe55837;SoundManager[_0x1e542f(0x2e0)]();let _0x5a2567=VisuMZ['BattleCore']['Settings'][_0x1e542f(0xa10)][_0x1e542f(0x52a)];_0x5a2567>0x0&&$gameTemp[_0x1e542f(0x21f)]([this],_0x5a2567);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x400)]=Game_Battler['prototype']['performDamage'],Game_Battler[_0xe55837(0x392)]['performDamage']=function(){const _0x74f76=_0xe55837;VisuMZ[_0x74f76(0x278)][_0x74f76(0x400)]['call'](this),this[_0x74f76(0x4cf)]();},VisuMZ['BattleCore']['Game_Battler_performMiss']=Game_Battler[_0xe55837(0x392)][_0xe55837(0x170)],Game_Battler[_0xe55837(0x392)][_0xe55837(0x170)]=function(){const _0x1b2ef8=_0xe55837;VisuMZ['BattleCore'][_0x1b2ef8(0x9df)]['call'](this),this['performFlinch']();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x53f)]=Game_Battler[_0xe55837(0x392)][_0xe55837(0x5ec)],Game_Battler['prototype'][_0xe55837(0x5ec)]=function(){const _0x87f137=_0xe55837;VisuMZ[_0x87f137(0x278)][_0x87f137(0x53f)]['call'](this),this[_0x87f137(0x4cf)]();},Game_Battler['prototype'][_0xe55837(0x4cf)]=function(){const _0x2cb398=_0xe55837;if(!$gameSystem[_0x2cb398(0x22a)]())return;if(this['_flinched'])return;this[_0x2cb398(0x496)]=!![];const _0x21ba87=this[_0x2cb398(0xe1)]();if(_0x21ba87)_0x21ba87['stepFlinch']();},Game_Battler['prototype']['requestMotionRefresh']=function(){const _0x23df9d=_0xe55837;if(this[_0x23df9d(0xb6)]()&&this[_0x23df9d(0x61c)]!=='dead'){if(_0x23df9d(0x8f6)===_0x23df9d(0x8f6)){this[_0x23df9d(0x835)](_0x23df9d(0x11b));return;}else{function _0x65f703(){const _0x2e3b1b=_0x23df9d;_0x1d1802[_0x2e3b1b(0x9fc)][_0x2e3b1b(0x1b8)]='base';}}}if(this[_0x23df9d(0xb6)]()&&this[_0x23df9d(0x61c)]===_0x23df9d(0x11b))return;if(!!this['_freezeMotionData'])return;if(this[_0x23df9d(0xa0a)]()){if(!this[_0x23df9d(0x43c)]()&&this!==BattleManager[_0x23df9d(0xec)]){if(_0x23df9d(0x8dc)!==_0x23df9d(0x8dc)){function _0x3fff91(){_0xb6ae3a=_0x5822fb>=_0x468bc4?_0x33b8d5:_0x351c13;}}else{if(this[_0x23df9d(0xe1)]())this[_0x23df9d(0xe1)]()[_0x23df9d(0x659)]();}}this[_0x23df9d(0x5b7)]();return;}if(this[_0x23df9d(0x61c)]==='victory')return;if(this[_0x23df9d(0x61c)]===_0x23df9d(0x366)&&!BattleManager[_0x23df9d(0xa79)]())return;if(this['_motionType']===_0x23df9d(0x23e)&&!BattleManager['isInputting']())return;this[_0x23df9d(0x8be)]();if(this[_0x23df9d(0xe1)]()&&BattleManager['isInputting']()){this[_0x23df9d(0xe1)]()[_0x23df9d(0x659)](),this[_0x23df9d(0x5b7)]();return;}},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x43c)]=function(){const _0xd09ea=_0xe55837;if(!this['hasSvBattler']())return![];const _0x4ff74a=this[_0xd09ea(0xe1)]();if(!_0x4ff74a)return![];const _0x2681e6=_0x4ff74a[_0xd09ea(0x8ec)];if(!_0x2681e6)return![];const _0x11754c=_0x2681e6[_0xd09ea(0x8a6)];return _0x11754c&&!_0x11754c[_0xd09ea(0x941)];},Game_Battler[_0xe55837(0x392)][_0xe55837(0x479)]=function(){return this['_isBattlerFlipped'];},Game_Battler['prototype'][_0xe55837(0x8c2)]=function(_0x11169d){const _0x56a43d=_0xe55837;if(!$gameSystem[_0x56a43d(0x22a)]())return;this[_0x56a43d(0x844)]=_0x11169d;const _0x362de7=this[_0x56a43d(0xe1)]();if(_0x362de7)_0x362de7['updateFlip']();},Game_Battler[_0xe55837(0x392)]['setBattlerFacePoint']=function(_0x1f5bb5,_0x88aa2d,_0x3c05a2){const _0x2398b4=_0xe55837;if(!$gameSystem[_0x2398b4(0x22a)]())return;const _0x1f17e1=this[_0x2398b4(0xe1)]();if(!_0x1f17e1)return;if(_0x1f5bb5===_0x1f17e1[_0x2398b4(0xa0)])return;let _0xa507af=![];if(this['isActor']()){if(_0x2398b4(0x5f6)==='hbaem'){if(_0x1f5bb5>_0x1f17e1[_0x2398b4(0xa0)])_0xa507af=!![];if(_0x1f5bb5<_0x1f17e1[_0x2398b4(0xa0)])_0xa507af=![];}else{function _0x20469a(){return;}}}else{if(this[_0x2398b4(0xa0a)]()){if(_0x1f5bb5>_0x1f17e1[_0x2398b4(0xa0)])_0xa507af=![];if(_0x1f5bb5<_0x1f17e1['_baseX'])_0xa507af=!![];}};this[_0x2398b4(0x8c2)](_0x3c05a2?!_0xa507af:_0xa507af),_0x1f17e1['updateFlip']();},Game_Battler[_0xe55837(0x392)][_0xe55837(0x2c4)]=function(_0x391cbd,_0x31061e,_0x240f40,_0x1d23d,_0x35bd9f){const _0x4242a3=_0xe55837;if(!$gameSystem[_0x4242a3(0x22a)]())return;const _0x526ced=this[_0x4242a3(0xe1)]();if(!_0x526ced)return;if(_0x1d23d)this[_0x4242a3(0xa66)](_0x391cbd+_0x526ced['_baseX'],_0x31061e+_0x526ced[_0x4242a3(0x937)],![]);_0x391cbd+=_0x526ced[_0x4242a3(0xa0)]-_0x526ced['_homeX'],_0x31061e+=_0x526ced['_baseY']-_0x526ced['_homeY'],_0x526ced[_0x4242a3(0x5fa)](_0x391cbd,_0x31061e,_0x240f40);if(Imported['VisuMZ_0_CoreEngine'])_0x526ced[_0x4242a3(0xb2)](_0x35bd9f||_0x4242a3(0x837));},Game_Battler[_0xe55837(0x392)][_0xe55837(0x355)]=function(_0x21beee,_0x4016ca,_0x3c13e5,_0x429596,_0x4ca02c,_0x3b1017){const _0x543a05=_0xe55837;if(!$gameSystem[_0x543a05(0x22a)]())return;const _0x2ab4e=this[_0x543a05(0xe1)]();if(!_0x2ab4e)return;_0x3b1017=_0x3b1017||0x0;if(_0x3b1017>0x0){if(_0x2ab4e[_0x543a05(0xa0)]>_0x21beee)_0x21beee+=_0x2ab4e[_0x543a05(0x124)]/0x2+_0x3b1017;if(_0x2ab4e[_0x543a05(0xa0)]<_0x21beee)_0x21beee-=_0x2ab4e[_0x543a05(0x124)]/0x2+_0x3b1017;}if(_0x429596)this['setBattlerFacePoint'](_0x21beee,_0x4016ca,![]);_0x21beee-=_0x2ab4e[_0x543a05(0xbf)],_0x4016ca-=_0x2ab4e[_0x543a05(0x677)],_0x2ab4e['startMove'](_0x21beee,_0x4016ca,_0x3c13e5);if(Imported[_0x543a05(0x209)])_0x2ab4e[_0x543a05(0xb2)](_0x4ca02c||_0x543a05(0x837));},Game_Battler['prototype'][_0xe55837(0x41d)]=function(_0x59e619,_0x51c18e,_0x1e1631){const _0x4cda41=_0xe55837;if(!$gameSystem[_0x4cda41(0x22a)]())return;const _0x19ea1e=this[_0x4cda41(0xe1)]();if(!_0x19ea1e)return;_0x19ea1e['startFloat'](_0x59e619,_0x51c18e,_0x1e1631);},Game_Battler[_0xe55837(0x392)][_0xe55837(0x227)]=function(_0x19d158,_0x397891){const _0x16beb9=_0xe55837;if(!$gameSystem['isSideView']())return;const _0x3248b3=this[_0x16beb9(0xe1)]();if(!_0x3248b3)return;_0x3248b3[_0x16beb9(0x5fe)](_0x19d158,_0x397891);},Game_Battler[_0xe55837(0x392)][_0xe55837(0x375)]=function(_0x476312,_0x5677ee,_0x1519f3,_0x5631d9){const _0x288685=_0xe55837;if(!$gameSystem[_0x288685(0x22a)]())return;const _0x287453=this[_0x288685(0xe1)]();if(!_0x287453)return;_0x287453[_0x288685(0x31c)](_0x476312,_0x5677ee,_0x1519f3,_0x5631d9);},Game_Battler[_0xe55837(0x392)][_0xe55837(0x5c5)]=function(_0x3c5917,_0x3b0c6e,_0x37fd83,_0x515766){const _0x40181a=_0xe55837;if(!$gameSystem[_0x40181a(0x22a)]())return;const _0x1156e4=this[_0x40181a(0xe1)]();if(!_0x1156e4)return;if(this['isActor']()){if(_0x40181a(0x388)===_0x40181a(0x549)){function _0x6d3f27(){const _0x170cbf=_0x40181a;_0x2df7ae[_0x170cbf(0xa9)](),_0x5c1bc0[_0x170cbf(0x947)](_0x210efe[_0x170cbf(0x5b3)]());}}else _0x3c5917*=-0x1,_0x3b0c6e*=-0x1;}_0x1156e4[_0x40181a(0x47d)](_0x3c5917,_0x3b0c6e,_0x37fd83,_0x515766);},Game_Battler[_0xe55837(0x392)]['growBattler']=function(_0x3fc652,_0x5a3e24,_0x4e7925,_0xf27d8b){const _0x5f2aa3=_0xe55837;if(!$gameSystem['isSideView']())return;const _0x280103=this[_0x5f2aa3(0xe1)]();if(!_0x280103)return;_0x280103[_0x5f2aa3(0x548)](_0x3fc652,_0x5a3e24,_0x4e7925,_0xf27d8b);},Game_Battler[_0xe55837(0x392)]['changeBattlerOpacity']=function(_0x4b3ddd,_0x48a0df,_0x2607bb){const _0x4b1a63=_0xe55837;if(!$gameSystem[_0x4b1a63(0x22a)]())return;const _0x5e7da5=this['battler']();if(!_0x5e7da5)return;_0x5e7da5[_0x4b1a63(0x6c0)](_0x4b3ddd,_0x48a0df,_0x2607bb);},Game_Battler[_0xe55837(0x392)][_0xe55837(0x5b7)]=function(){const _0x332b2a=_0xe55837,_0x51c3b6=!!this[_0x332b2a(0x58a)];this[_0x332b2a(0x58a)]=undefined,_0x51c3b6&&(this[_0x332b2a(0x41b)](),this[_0x332b2a(0xa3c)]());},Game_Battler[_0xe55837(0x392)][_0xe55837(0xa3c)]=function(){const _0x4c7451=_0xe55837;if(!SceneManager[_0x4c7451(0x1d0)]())return;const _0x17ee9a=this[_0x4c7451(0xe1)]();if(!_0x17ee9a)return;let _0x574c64=this['isActor']()?_0x17ee9a[_0x4c7451(0x51f)]:_0x17ee9a[_0x4c7451(0x8ec)][_0x4c7451(0x51f)];_0x574c64&&_0x574c64[_0x4c7451(0x62b)](0x0);},Game_Battler[_0xe55837(0x392)][_0xe55837(0x884)]=function(_0x3e6c00,_0x37a12d,_0x3c425e){const _0x5ed54f=_0xe55837;if(this['isEnemy']()&&!this[_0x5ed54f(0x674)]())return;let _0x1d9e49=0x0,_0x189d97=0x0;_0x3e6c00[_0x5ed54f(0x1c3)](/ATTACK[ ](\d+)/i)&&(_0x189d97=Number(RegExp['$1']),_0x189d97--);if(this[_0x5ed54f(0x107)]()){const _0x3d99b5=this[_0x5ed54f(0x577)]();_0x1d9e49=_0x3d99b5[_0x189d97]?_0x3d99b5[_0x189d97][_0x5ed54f(0x959)]:0x0;}else{if(this[_0x5ed54f(0xa0a)]()){if('xLAsv'===_0x5ed54f(0x580)){function _0xe78bd9(){this['repositionCancelButtonBorderStyle']();}}else _0x1d9e49=this[_0x5ed54f(0x6b9)]()[_0x5ed54f(0x959)]||0x0;}}const _0x2c2f35=$dataSystem[_0x5ed54f(0x99c)][_0x1d9e49];_0x3e6c00[_0x5ed54f(0x1c3)](/attack/i)&&(_0x3e6c00=[_0x5ed54f(0x354),'swing',_0x5ed54f(0x406)][_0x2c2f35['type']]||_0x5ed54f(0x4c8)),this[_0x5ed54f(0x58a)]={'motionType':_0x3e6c00,'weaponImageId':_0x37a12d?_0x2c2f35[_0x5ed54f(0x5ad)]:0x0,'pattern':_0x3c425e};},Game_Battler[_0xe55837(0x392)][_0xe55837(0xb3)]=function(_0x91ddc2){const _0x4af685=_0xe55837;if(!_0x91ddc2)return![];return _0x91ddc2[_0x4af685(0x105)]()===this[_0x4af685(0x105)]();},Game_Battler[_0xe55837(0x392)][_0xe55837(0x714)]=function(_0x2e190c){const _0x3da5ee=_0xe55837;if(!_0x2e190c)return![];return _0x2e190c[_0x3da5ee(0x3be)]()===this[_0x3da5ee(0x105)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x2da)]=Game_Actor[_0xe55837(0x392)][_0xe55837(0x62b)],Game_Actor[_0xe55837(0x392)][_0xe55837(0x62b)]=function(_0x59cc57){const _0x44e1b5=_0xe55837;VisuMZ['BattleCore'][_0x44e1b5(0x2da)][_0x44e1b5(0x782)](this,_0x59cc57),this[_0x44e1b5(0x419)]();},Game_Actor[_0xe55837(0x392)][_0xe55837(0x419)]=function(){const _0x509730=_0xe55837;this[_0x509730(0x212)]='';if(this[_0x509730(0x3b1)]()&&this[_0x509730(0x3b1)]()['note'][_0x509730(0x1c3)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)){if(_0x509730(0x6a8)===_0x509730(0x590)){function _0x395bca(){const _0x4a2384=_0x509730,_0x35ef74=_0x1c8668[_0x4a2384(0x278)][_0x4a2384(0x108)]['Damage'],_0x491bae=new _0x5d26b5();_0x491bae[_0x4a2384(0x569)]=_0x35ef74['PopupDuration'],this[_0x4a2384(0x888)](_0x491bae),_0x491bae['setup'](this[_0x4a2384(0x341)]),_0x491bae['setupBattleCore'](this['_battler']),this[_0x4a2384(0x9a)](_0x491bae);}}else this[_0x509730(0x212)]=String(RegExp['$1']);}},Game_Actor[_0xe55837(0x392)][_0xe55837(0x147)]=function(){const _0x789113=_0xe55837;if(this[_0x789113(0x5ef)]()!=='')return this[_0x789113(0x5ef)]();else{if(Imported[_0x789113(0x68c)]&&this[_0x789113(0x160)]()!=='')return this[_0x789113(0x160)]();}return'';},Game_Actor['prototype'][_0xe55837(0x5ef)]=function(){const _0x229c89=_0xe55837;if(this[_0x229c89(0x212)]===undefined)this[_0x229c89(0x419)]();return this['_battlePortrait'];},Game_Actor[_0xe55837(0x392)][_0xe55837(0x45a)]=function(_0x2aaee3){const _0x1fa7f0=_0xe55837;if(this[_0x1fa7f0(0x212)]===undefined)this[_0x1fa7f0(0x419)]();this[_0x1fa7f0(0x212)]=_0x2aaee3;if(SceneManager[_0x1fa7f0(0x1d0)]()&&$gameParty[_0x1fa7f0(0x629)]()[_0x1fa7f0(0x450)](this)){const _0x2e896f=SceneManager[_0x1fa7f0(0x1c8)][_0x1fa7f0(0x418)];if(_0x2e896f)_0x2e896f[_0x1fa7f0(0xa6a)](this);}},Game_Actor['prototype'][_0xe55837(0x5f2)]=function(){return!![];},Game_Actor[_0xe55837(0x392)][_0xe55837(0x5a7)]=function(){const _0x3b98b7=_0xe55837;if(!this[_0x3b98b7(0x8f3)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0x3b98b7(0x392)][_0x3b98b7(0x5a7)][_0x3b98b7(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x7b9)]=Game_Actor[_0xe55837(0x392)]['makeActionList'],Game_Actor[_0xe55837(0x392)]['makeActionList']=function(){const _0x5040ef=_0xe55837;if(BattleManager[_0x5040ef(0x9ed)]&&!ConfigManager[_0x5040ef(0x9d2)]){if(_0x5040ef(0x847)===_0x5040ef(0x1dd)){function _0x296370(){const _0x5c0c9e=_0x5040ef;this[_0x5c0c9e(0x835)](_0x5c0c9e(0x4c8));}}else return this['makeActionListAutoAttack']();}else{if(_0x5040ef(0x1ff)!==_0x5040ef(0x92c)){return VisuMZ[_0x5040ef(0x278)][_0x5040ef(0x7b9)][_0x5040ef(0x782)](this);;}else{function _0x2d4fdc(){const _0x124293=_0x5040ef;_0x38a7b6[_0x124293(0x499)]=!![];}}}},Game_Actor[_0xe55837(0x392)][_0xe55837(0x587)]=function(){const _0x33f67d=_0xe55837,_0x440e58=[],_0x476d64=new Game_Action(this);return _0x476d64[_0x33f67d(0x663)](),_0x440e58[_0x33f67d(0x30a)](_0x476d64),_0x440e58;},Game_Actor['prototype']['battleCommands']=function(){const _0x1d4530=_0xe55837;return this[_0x1d4530(0xa52)]()[_0x1d4530(0x35c)][_0x1d4530(0x1c3)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x1d4530(0x4d1)](/[\r\n]+/):VisuMZ['BattleCore'][_0x1d4530(0x108)][_0x1d4530(0x350)]['BattleCmdList'];},Game_Actor['prototype'][_0xe55837(0x3fe)]=function(){const _0x32e5f9=_0xe55837;if(this[_0x32e5f9(0x28f)]['svAnchorX']!==undefined)return this['_cache'][_0x32e5f9(0x698)];return this[_0x32e5f9(0x3b1)]()[_0x32e5f9(0x35c)][_0x32e5f9(0x1c3)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x32e5f9(0x28f)][_0x32e5f9(0x698)]=eval(RegExp['$1']),this[_0x32e5f9(0x28f)][_0x32e5f9(0x357)]=eval(RegExp['$2'])):this[_0x32e5f9(0x28f)][_0x32e5f9(0x698)]=Game_Battler[_0x32e5f9(0x392)][_0x32e5f9(0x3fe)][_0x32e5f9(0x782)](this),this[_0x32e5f9(0x28f)][_0x32e5f9(0x698)];},Game_Actor[_0xe55837(0x392)][_0xe55837(0x1f9)]=function(){const _0xcd1968=_0xe55837;if(this[_0xcd1968(0x28f)][_0xcd1968(0x357)]!==undefined)return this[_0xcd1968(0x28f)][_0xcd1968(0x357)];if(this[_0xcd1968(0x3b1)]()[_0xcd1968(0x35c)][_0xcd1968(0x1c3)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0xcd1968(0x56a)!==_0xcd1968(0x56a)){function _0x5ae2dd(){const _0x5df1ae=_0xcd1968;if(_0x13cb10['ParseAllNotetags'])return;this[_0x5df1ae(0x399)](),this[_0x5df1ae(0x3e3)](),this[_0x5df1ae(0x8e6)]();}}else this[_0xcd1968(0x28f)][_0xcd1968(0x698)]=eval(RegExp['$1']),this[_0xcd1968(0x28f)][_0xcd1968(0x357)]=eval(RegExp['$2']);}else{if(_0xcd1968(0x858)!=='WOHKr'){function _0x518acd(){const _0x35fa92=_0xcd1968;if(!_0x52899f[_0x35fa92(0x22a)]())return;const _0x2c89b5=this[_0x35fa92(0xe1)]();if(!_0x2c89b5)return;this[_0x35fa92(0x107)]()&&(_0x21cf38*=-0x1,_0x575319*=-0x1),_0x2c89b5[_0x35fa92(0x47d)](_0x1c2601,_0x2ebeb4,_0x2065cb,_0x290a41);}}else this['_cache'][_0xcd1968(0x357)]=Game_Battler[_0xcd1968(0x392)][_0xcd1968(0x1f9)]['call'](this);}return this[_0xcd1968(0x28f)][_0xcd1968(0x357)];},Game_Actor[_0xe55837(0x392)][_0xe55837(0x925)]=function(){const _0x12c619=_0xe55837;if(this[_0x12c619(0x28f)][_0x12c619(0x62d)]!==undefined)return this[_0x12c619(0x28f)][_0x12c619(0x62d)];if(this[_0x12c619(0x3b1)]()[_0x12c619(0x35c)][_0x12c619(0x1c3)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x12c619(0x28f)][_0x12c619(0x62d)]=!![];else this[_0x12c619(0x3b1)]()[_0x12c619(0x35c)]['match'](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x12c619(0x28f)]['svShadow']=![]:this[_0x12c619(0x28f)][_0x12c619(0x62d)]=Game_Battler[_0x12c619(0x392)][_0x12c619(0x925)][_0x12c619(0x782)](this);return this['_cache']['svShadow'];},Game_Actor[_0xe55837(0x392)][_0xe55837(0x1c9)]=function(){const _0x24c810=_0xe55837;return VisuMZ['BattleCore']['Settings']['Actor'][_0x24c810(0xd6)];},Game_Actor[_0xe55837(0x392)]['performWeaponAnimation']=function(){const _0x3a3fd2=_0xe55837,_0xa2a9f8=this[_0x3a3fd2(0x577)](),_0x31f1c1=_0xa2a9f8[0x0]?_0xa2a9f8[0x0]['wtypeId']:0x0,_0x5da9bc=$dataSystem[_0x3a3fd2(0x99c)][_0x31f1c1];if(_0x5da9bc){if(_0x3a3fd2(0x564)!=='BlNeQ'){function _0x44615d(){const _0xe0814d=_0x3a3fd2;if(_0xbdcf7c===this[_0xe0814d(0x5b3)]()&&this[_0xe0814d(0x473)]())return!![];return _0x240a46[_0xe0814d(0x278)][_0xe0814d(0x951)]['call'](this,_0x23ff33);}}else this['startWeaponAnimation'](_0x5da9bc['weaponImageId']);}},Game_Actor[_0xe55837(0x392)][_0xe55837(0x2af)]=function(_0x307c7a){const _0x1d1259=_0xe55837;Game_Battler[_0x1d1259(0x392)][_0x1d1259(0x2af)][_0x1d1259(0x782)](this,_0x307c7a),this[_0x1d1259(0x819)](_0x307c7a);},Game_Actor['prototype'][_0xe55837(0x495)]=function(){const _0x267f37=_0xe55837,_0x21c589=this['weapons'](),_0x1f1013=_0x21c589[0x0]?_0x21c589[0x0][_0x267f37(0x959)]:0x0;return $dataSystem['attackMotions'][_0x1f1013];},Game_Actor['prototype'][_0xe55837(0x9a1)]=function(_0x3bb8ea){const _0x4e29d0=_0xe55837;_0x3bb8ea=_0x3bb8ea||0x1,_0x3bb8ea--;const _0x4f06a4=this[_0x4e29d0(0x577)]();return _0x4f06a4[_0x3bb8ea]?_0x4f06a4[_0x3bb8ea]['animationId']:0x0;},Game_Actor['prototype'][_0xe55837(0x207)]=function(_0x2c519e){const _0x2bf09a=_0xe55837;_0x2c519e=_0x2c519e||0x1,_0x2c519e--;const _0x321a8a=this[_0x2bf09a(0x577)](),_0x3b97c4=_0x321a8a[_0x2c519e]?_0x321a8a[_0x2c519e]['wtypeId']:0x0;return $dataSystem[_0x2bf09a(0x99c)][_0x3b97c4];},Game_Actor['prototype'][_0xe55837(0x1b1)]=function(_0x50debd){const _0x110153=_0xe55837;_0x50debd=_0x50debd||0x1,_0x50debd--;const _0x2b8226=this[_0x110153(0x577)](),_0x436ec3=_0x2b8226[_0x50debd]?_0x2b8226[_0x50debd][_0x110153(0x959)]:0x0,_0x3ff63a=$dataSystem[_0x110153(0x99c)][_0x436ec3];if(_0x3ff63a){if(_0x3ff63a[_0x110153(0x695)]===0x0)this['requestMotion']('thrust');else{if(_0x3ff63a[_0x110153(0x695)]===0x1){if(_0x110153(0x9f7)!==_0x110153(0x9f7)){function _0x4ba6bf(){const _0x67dc98=_0x110153;if(this[_0x67dc98(0x1a6)]())return![];if(this[_0x67dc98(0x453)]()&&this['isAppeared']())return!![];if(this['isEnemy']()&&this['hasSvBattler']()){if(this['isDead']()&&this[_0x67dc98(0x91)]())return![];}else{if(this[_0x67dc98(0xb6)]())return![];}return!![];}}else this[_0x110153(0x835)](_0x110153(0x4c8));}else _0x3ff63a[_0x110153(0x695)]===0x2&&this['requestMotion'](_0x110153(0x406));}this[_0x110153(0x345)](_0x3ff63a[_0x110153(0x5ad)]);}},Game_Battler[_0xe55837(0x392)][_0xe55837(0x5e1)]=function(_0x133cef){const _0x5957d0=_0xe55837;this[_0x5957d0(0x559)]=_0x133cef||0x0;},Game_Battler[_0xe55837(0x392)]['nextActiveWeaponSlot']=function(){const _0x30a727=_0xe55837;this[_0x30a727(0x559)]=this[_0x30a727(0x559)]||0x0,this['_activeWeaponSlot']++;},Game_Battler[_0xe55837(0x392)][_0xe55837(0x8f5)]=function(){const _0x5361ae=_0xe55837;this[_0x5361ae(0x559)]=undefined;},VisuMZ[_0xe55837(0x278)]['Game_Actor_equips']=Game_Actor[_0xe55837(0x392)]['equips'],Game_Actor['prototype'][_0xe55837(0x90e)]=function(){const _0x3462b8=_0xe55837;let _0x1d6e68=VisuMZ[_0x3462b8(0x278)]['Game_Actor_equips'][_0x3462b8(0x782)](this);if(this[_0x3462b8(0x532)])return _0x1d6e68;if(this['_activeWeaponSlot']!==undefined){if(_0x3462b8(0x911)==='lYvEJ'){function _0x8668ae(){const _0x27a47e=_0x3462b8;this[_0x27a47e(0x6f3)]()?(this[_0x27a47e(0x418)][_0x27a47e(0x2fa)](),this[_0x27a47e(0x165)][_0x27a47e(0xa20)](),this[_0x27a47e(0x198)][_0x27a47e(0xa47)]()):_0x1f8494[_0x27a47e(0x278)][_0x27a47e(0x3d9)]['call'](this),this[_0x27a47e(0x9af)]();}}else{this['_tempEquipCheck']=!![];const _0x5b5a19=this[_0x3462b8(0x7c9)]();for(let _0x533fac=0x0;_0x533fac<_0x5b5a19[_0x3462b8(0x4c5)];_0x533fac++){if(_0x3462b8(0x508)===_0x3462b8(0x508))_0x5b5a19[_0x533fac]===0x1&&this[_0x3462b8(0x559)]!==_0x533fac&&(_0x1d6e68[_0x533fac]=null);else{function _0x7536e3(){const _0x185fe6=_0x3462b8;this['_svBattlerSprite'][_0x185fe6(0x468)][_0x185fe6(0x23d)]['x']=-0x1/(this[_0x185fe6(0x23d)]['x']||0.001),this[_0x185fe6(0x8ec)][_0x185fe6(0x468)][_0x185fe6(0x23d)]['y']=0x1/(this[_0x185fe6(0x23d)]['y']||0.001);}}}this[_0x3462b8(0x532)]=undefined;}}return _0x1d6e68;},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x95b)]=function(_0x23c0d3){const _0x10f455=_0xe55837;if(_0x23c0d3[_0x10f455(0x107)]()){if(_0x10f455(0x19c)===_0x10f455(0x19c))return _0x23c0d3[_0x10f455(0x577)]()[_0x10f455(0x4c5)]||0x1;else{function _0x3a91df(){const _0x1e4d84=_0x10f455;if(!_0x5a1c41[_0x1e4d84(0x1d0)]())return;const _0x5d2db1=_0x108a71[_0x1e4d84(0x534)]();if(!_0x5d2db1)return;_0x5d2db1[_0x1e4d84(0x78a)]('battleJump');}}}else return 0x1;},Window_BattleLog['prototype'][_0xe55837(0x95f)]=function(_0x3ba8d1,_0x54f9b1){const _0x4e8bf8=_0xe55837;if(_0x3ba8d1&&_0x3ba8d1[_0x4e8bf8(0x107)]()){if('QSgwo'===_0x4e8bf8(0x239)){function _0x1c6e82(){const _0x424e50=_0x4e8bf8;if(!this[_0x424e50(0x8f9)])return;this[_0x424e50(0x8f9)]['y']=this[_0x424e50(0x937)]-this['y']-0x2;}}else _0x3ba8d1[_0x4e8bf8(0x5e1)](_0x54f9b1);}this[_0x4e8bf8(0x996)]();},Window_BattleLog['prototype'][_0xe55837(0x3a4)]=function(_0x1fe96b){const _0x304901=_0xe55837;if(_0x1fe96b&&_0x1fe96b[_0x304901(0x107)]()){if(_0x304901(0x336)===_0x304901(0x336))_0x1fe96b[_0x304901(0x8f5)]();else{function _0x2d4871(){const _0x40b671=_0x304901;this[_0x40b671(0x79d)]=new _0x274415(),this[_0x40b671(0x79d)][_0x40b671(0x5dc)]['x']=0.5,this[_0x40b671(0x79d)]['anchor']['y']=0.5,this['addChild'](this[_0x40b671(0x79d)]);}}}this[_0x304901(0x996)]();},Game_Actor['prototype'][_0xe55837(0x1bc)]=function(){const _0x5e2d6b=_0xe55837;let _0x4dad9e=_0x5e2d6b(0x1bc);if(this[_0x5e2d6b(0x45d)](_0x4dad9e))return this['_cache'][_0x4dad9e];return this[_0x5e2d6b(0x28f)][_0x4dad9e]=this['createBattleUIOffsetX'](this[_0x5e2d6b(0x3b1)]()),this[_0x5e2d6b(0x28f)][_0x4dad9e];},Game_Actor[_0xe55837(0x392)][_0xe55837(0x8a1)]=function(){const _0x5e91d7=_0xe55837;let _0x28a44b=_0x5e91d7(0x8a1);if(this[_0x5e91d7(0x45d)](_0x28a44b))return this[_0x5e91d7(0x28f)][_0x28a44b];return this[_0x5e91d7(0x28f)][_0x28a44b]=this[_0x5e91d7(0x826)](this[_0x5e91d7(0x3b1)]()),this[_0x5e91d7(0x28f)][_0x28a44b];},VisuMZ[_0xe55837(0x278)][_0xe55837(0x6c8)]=Game_Enemy[_0xe55837(0x392)]['setup'],Game_Enemy[_0xe55837(0x392)][_0xe55837(0x62b)]=function(_0x5582c1,_0x3866de,_0x4771ae){const _0x4ad3bc=_0xe55837;_0x5582c1=DataManager['swapEnemyIDs'](_0x5582c1),VisuMZ[_0x4ad3bc(0x278)][_0x4ad3bc(0x6c8)][_0x4ad3bc(0x782)](this,_0x5582c1,_0x3866de,_0x4771ae);if(Imported[_0x4ad3bc(0x53d)]){if(_0x4ad3bc(0xfc)!=='BaIfF')this[_0x4ad3bc(0x1f1)]();else{function _0x5cbb28(){const _0xe72acb=_0x4ad3bc;_0x42de88['BattleCore'][_0xe72acb(0x842)][_0xe72acb(0x782)](this,_0x403b3a);}}}this[_0x4ad3bc(0x480)](),this[_0x4ad3bc(0x90a)]();if(Imported['VisuMZ_1_ElementStatusCore']){if(_0x4ad3bc(0x89f)!==_0x4ad3bc(0x284))this[_0x4ad3bc(0x708)]();else{function _0xbe6c2f(){const _0x544ed0=_0x4ad3bc;if(!_0x5778ba[_0x544ed0(0x278)]['Settings'][_0x544ed0(0x22d)][_0x544ed0(0x63c)])return![];if(_0x3f8c3[_0x544ed0(0x5ef)]())return!![];return _0x5d192b['VisuMZ_1_MainMenuCore']&&_0x2a9133[_0x544ed0(0x160)]();}}}},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x480)]=function(){const _0x431335=_0xe55837,_0x3dad8b=VisuMZ[_0x431335(0x278)]['Settings'][_0x431335(0x214)];this[_0x431335(0x329)]=_0x3dad8b[_0x431335(0x6a7)],this[_0x431335(0x9c6)]={};},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x90a)]=function(){const _0x4111a6=_0xe55837,_0x1f610b=VisuMZ[_0x4111a6(0x278)]['Settings'][_0x4111a6(0x214)],_0x5b9edf=this['enemy']()[_0x4111a6(0x35c)];this[_0x4111a6(0x9c6)]={'name':'','wtypeId':_0x1f610b['WtypeId'],'collapse':_0x1f610b[_0x4111a6(0x4b7)],'motionIdle':_0x1f610b[_0x4111a6(0x64f)],'width':_0x1f610b[_0x4111a6(0xa08)]||0x40,'height':_0x1f610b[_0x4111a6(0x416)]||0x40,'anchorX':_0x1f610b['AnchorX']||0x0,'anchorY':_0x1f610b[_0x4111a6(0x98b)]||0x0,'shadow':_0x1f610b[_0x4111a6(0x492)]};if(_0x5b9edf[_0x4111a6(0x1c3)](/<ATTACK ANIMATION:[ ](\d+)>/i)){if(_0x4111a6(0x4db)!==_0x4111a6(0x5bb))this[_0x4111a6(0x329)]=Number(RegExp['$1']);else{function _0x35bbc2(){const _0x56fbe6=_0x4111a6,_0x1155e4=this[_0x56fbe6(0x20e)](_0x44ca80);if(_0x1155e4===_0x56fbe6(0x42f))this['drawItemStyleIconText'](_0x25caa5);else _0x1155e4===_0x56fbe6(0x7b3)?this[_0x56fbe6(0x76a)](_0x488e38):_0x2c6a47[_0x56fbe6(0x392)][_0x56fbe6(0x423)]['call'](this,_0x4bd423);this[_0x56fbe6(0x33b)](_0x2b0cb5);}}}const _0x2a4f21=this['_svBattlerData'];if(_0x5b9edf['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x2a4f21[_0x4111a6(0x625)]=String(RegExp['$1']);else{if(_0x5b9edf['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if(_0x4111a6(0x9ea)===_0x4111a6(0x865)){function _0x57edda(){const _0x8dde97=_0x4111a6;return _0x31d68b['BattleCore']['Settings'][_0x8dde97(0xa64)][_0x8dde97(0x757)];}}else{const _0x711352=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x4111a6(0x1ad)]('');_0x2a4f21[_0x4111a6(0x625)]=DataManager[_0x4111a6(0x425)](_0x711352);}}}_0x5b9edf[_0x4111a6(0x1c3)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x2a4f21[_0x4111a6(0x32f)]=eval(RegExp['$1']),_0x2a4f21[_0x4111a6(0x8c3)]=eval(RegExp['$2']));if(_0x5b9edf[_0x4111a6(0x1c3)](/<SIDEVIEW COLLAPSE>/i))_0x2a4f21['collapse']=!![];else{if(_0x5b9edf[_0x4111a6(0x1c3)](/<SIDEVIEW NO COLLAPSE>/i)){if(_0x4111a6(0x748)!=='NoALK'){function _0x424b2a(){const _0x528f2f=_0x4111a6;if(!_0x176067[_0x528f2f(0x6f4)](_0x1b6080))return![];}}else _0x2a4f21[_0x4111a6(0x499)]=![];}}if(_0x5b9edf['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x2a4f21[_0x4111a6(0x4c9)]=!![];else _0x5b9edf['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x2a4f21[_0x4111a6(0x4c9)]=![]);if(_0x5b9edf[_0x4111a6(0x1c3)](/<SIDEVIEW IDLE MOTION: (.*)>/i)){if('jUvBb'!==_0x4111a6(0x439)){function _0x3d1f93(){const _0x4e0a05=_0x4111a6;this[_0x4e0a05(0x16d)][_0x4e0a05(0x331)]=![];}}else _0x2a4f21[_0x4111a6(0xa0f)]=String(RegExp['$1'])[_0x4111a6(0x8f1)]()[_0x4111a6(0x1ee)]();}else{if(_0x5b9edf['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x87f80f=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x4111a6(0x1ad)]('');_0x2a4f21['motionIdle']=DataManager[_0x4111a6(0x425)](_0x87f80f);}}_0x5b9edf[_0x4111a6(0x1c3)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x2a4f21[_0x4111a6(0x124)]=Number(RegExp['$1']),_0x2a4f21[_0x4111a6(0x97c)]=Number(RegExp['$2']));if(_0x5b9edf[_0x4111a6(0x1c3)](/<SIDEVIEW WEAPON: (.*)>/i))_0x2a4f21[_0x4111a6(0x959)]=DataManager[_0x4111a6(0xa55)](RegExp['$1']);else{if(_0x5b9edf[_0x4111a6(0x1c3)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0xc4d294=String(RegExp['$1'])[_0x4111a6(0x4d1)](/[\r\n]+/)[_0x4111a6(0x1ad)](''),_0x132d46=DataManager[_0x4111a6(0x425)](_0xc4d294);_0x2a4f21[_0x4111a6(0x959)]=DataManager[_0x4111a6(0xa55)](_0x132d46);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x20d5cb=this[_0x4111a6(0x855)]();for(const _0x1938c7 of _0x20d5cb){if('SLIVd'==='SLIVd'){const _0x76c599=this[_0x4111a6(0x5fc)](_0x1938c7)[_0x4111a6(0x42d)][_0x4111a6(0x448)]()[_0x4111a6(0x1ee)](),_0x2fef27=_0x1938c7[_0x4111a6(0x448)]()[_0x4111a6(0x1ee)]();if(_0x5b9edf[_0x4111a6(0x1c3)](VisuMZ[_0x4111a6(0x145)][_0x4111a6(0x2ed)][_0x4111a6(0x4a3)[_0x4111a6(0x11c)](_0x2fef27,_0x76c599)]))_0x2a4f21[_0x4111a6(0x625)]=String(RegExp['$1']);else{if(_0x5b9edf[_0x4111a6(0x1c3)](VisuMZ['ElementStatusCore'][_0x4111a6(0x2ed)][_0x4111a6(0x17f)[_0x4111a6(0x11c)](_0x2fef27,_0x76c599)])){const _0x4439d4=String(RegExp['$1'])[_0x4111a6(0x4d1)](/[\r\n]+/)[_0x4111a6(0x1ad)]('');_0x2a4f21[_0x4111a6(0x625)]=DataManager[_0x4111a6(0x425)](_0x4439d4);}}if(_0x5b9edf[_0x4111a6(0x1c3)](VisuMZ[_0x4111a6(0x145)]['RegExp'][_0x4111a6(0x3db)[_0x4111a6(0x11c)](_0x2fef27,_0x76c599)])){if('mXNDX'===_0x4111a6(0x73b)){function _0x3e503e(){return!![];}}else _0x2a4f21[_0x4111a6(0x959)]=DataManager[_0x4111a6(0xa55)](RegExp['$1']);}else{if(_0x5b9edf[_0x4111a6(0x1c3)](VisuMZ[_0x4111a6(0x145)][_0x4111a6(0x2ed)][_0x4111a6(0x2fe)['format'](_0x2fef27,_0x76c599)])){if(_0x4111a6(0x8cb)==='zkrpo'){const _0x56f4ee=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x4111a6(0x1ad)](''),_0x5b2a91=DataManager[_0x4111a6(0x425)](_0x56f4ee);_0x2a4f21[_0x4111a6(0x959)]=DataManager['getWtypeIdWithName'](_0x5b2a91);}else{function _0x58802a(){const _0x57261b=_0x4111a6;return _0x3c7364[_0x57261b(0x278)][_0x57261b(0x271)][_0x57261b(0x782)](this);}}}}if(_0x5b9edf[_0x4111a6(0x1c3)](VisuMZ[_0x4111a6(0x145)]['RegExp'][_0x4111a6(0x250)['format'](_0x2fef27,_0x76c599)]))_0x2a4f21[_0x4111a6(0xa0f)]=String(RegExp['$1'])['toLowerCase']()[_0x4111a6(0x1ee)]();else{if(_0x5b9edf[_0x4111a6(0x1c3)](VisuMZ[_0x4111a6(0x145)][_0x4111a6(0x2ed)][_0x4111a6(0x4a7)[_0x4111a6(0x11c)](_0x2fef27,_0x76c599)])){if('ucKuJ'===_0x4111a6(0x651)){function _0x19559f(){const _0x131131=_0x4111a6;_0x38d5a5[_0x131131(0x9b1)]=_0xa3ad94['max'](0x1,_0x596c48(_0x4bb3ec['$1']));}}else{const _0x1e58aa=String(RegExp['$1'])[_0x4111a6(0x4d1)](/[\r\n]+/)[_0x4111a6(0x1ad)]('');_0x2a4f21[_0x4111a6(0xa0f)]=DataManager[_0x4111a6(0x425)](_0x1e58aa);}}}}else{function _0x3fe033(){const _0x3530a8=_0x4111a6;this[_0x3530a8(0x996)]();}}}}},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x39c)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy['prototype'][_0xe55837(0xfb)]=function(){return this['attackAnimationId1']();},Game_Enemy[_0xe55837(0x392)]['attackAnimationIdSlot']=function(_0x35a4ea){const _0x56699c=_0xe55837;return this[_0x56699c(0x39c)]();},Game_Enemy['prototype'][_0xe55837(0x5f9)]=function(){const _0x11274c=_0xe55837;if(this[_0x11274c(0x67b)]()[_0x11274c(0x35c)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x11274c(0x392)][_0x11274c(0x5f9)][_0x11274c(0x782)](this);},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x156)]=function(){const _0x54bbe2=_0xe55837;if(this[_0x54bbe2(0x67b)]()[_0x54bbe2(0x35c)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x201)]=function(){const _0x1e6be5=_0xe55837,_0x33215b=[];for(const _0x54ebe6 of this[_0x1e6be5(0x67b)]()[_0x1e6be5(0x32a)]){const _0x1e13bf=$dataSkills[_0x54ebe6[_0x1e6be5(0x20f)]];if(_0x1e13bf&&!_0x33215b[_0x1e6be5(0x450)](_0x1e13bf))_0x33215b[_0x1e6be5(0x30a)](_0x1e13bf);}return _0x33215b;},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x1bc)]=function(){const _0x50663c=_0xe55837;let _0x4dba4b='battleUIOffsetX';if(this[_0x50663c(0x45d)](_0x4dba4b))return this[_0x50663c(0x28f)][_0x4dba4b];return this[_0x50663c(0x28f)][_0x4dba4b]=this[_0x50663c(0x5ab)](this[_0x50663c(0x67b)]()),this['_cache'][_0x4dba4b];},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x8a1)]=function(){const _0x1a08ea=_0xe55837;let _0x343c65=_0x1a08ea(0x8a1);if(this[_0x1a08ea(0x45d)](_0x343c65))return this[_0x1a08ea(0x28f)][_0x343c65];return this[_0x1a08ea(0x28f)][_0x343c65]=this[_0x1a08ea(0x826)](this['enemy']()),this[_0x1a08ea(0x28f)][_0x343c65];},Game_Enemy[_0xe55837(0x392)]['svBattlerData']=function(){const _0x3701ba=_0xe55837;if(this['_svBattlerData']!==undefined)return this[_0x3701ba(0x9c6)];return this[_0x3701ba(0x90a)](),this[_0x3701ba(0x9c6)];},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x674)]=function(){const _0x58ac5c=_0xe55837;return this[_0x58ac5c(0x6b9)]()[_0x58ac5c(0x625)]!=='';},Game_Enemy['prototype']['svBattlerName']=function(){return this['svBattlerData']()['name'];},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x1c9)]=function(){const _0x5d7331=_0xe55837;if(this[_0x5d7331(0x674)]()){if(_0x5d7331(0x431)!=='kOkMV'){function _0x341e42(){const _0x440881=_0x5d7331;if(!_0x570d53[_0x440881(0x1d0)]())return;const _0x365105=_0x35ba05[_0x440881(0xa2)];_0x365105[_0x440881(0x3d3)]();}}else return VisuMZ[_0x5d7331(0x278)]['Settings'][_0x5d7331(0x948)][_0x5d7331(0xd6)];}else return VisuMZ[_0x5d7331(0x278)][_0x5d7331(0x108)][_0x5d7331(0x214)][_0x5d7331(0xd6)];},Game_Enemy[_0xe55837(0x392)]['performAction']=function(_0x348924){const _0x461bd6=_0xe55837;Game_Battler[_0x461bd6(0x392)]['performAction']['call'](this,_0x348924);if(this['hasSvBattler']())this['performActionMotions'](_0x348924);},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x761)]=function(){const _0x564307=_0xe55837,_0x4ba75f=this[_0x564307(0x6b9)]()[_0x564307(0x959)]||0x0,_0x54bb6b=$dataSystem[_0x564307(0x99c)][_0x4ba75f];if(_0x54bb6b){if(_0x54bb6b['type']===0x0)this['requestMotion'](_0x564307(0x354));else{if(_0x54bb6b[_0x564307(0x695)]===0x1){if(_0x564307(0x298)!==_0x564307(0x97a))this[_0x564307(0x835)](_0x564307(0x4c8));else{function _0x39dbd9(){_0xdaa5c4=_0x171d13>=_0x29bb64?_0x4a1534:_0x7fff09;}}}else _0x54bb6b[_0x564307(0x695)]===0x2&&this['requestMotion'](_0x564307(0x406));}}},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x93)]=function(){const _0x1d2a5e=_0xe55837,_0x122bff=this[_0x1d2a5e(0x6b9)]()[_0x1d2a5e(0x959)]||0x0,_0x59d17c=$dataSystem[_0x1d2a5e(0x99c)][_0x122bff];_0x59d17c&&this['startWeaponAnimation'](_0x59d17c[_0x1d2a5e(0x5ad)]);},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x495)]=function(){const _0x214c9a=_0xe55837,_0x540fb5=this['svBattlerData']()['wtypeId']||0x0;return $dataSystem[_0x214c9a(0x99c)][_0x540fb5];},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x207)]=function(_0x1d8b28){const _0x21cf0f=_0xe55837;return this[_0x21cf0f(0x495)]();},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x4a4)]=function(){const _0x2f18e6=_0xe55837;Game_Battler[_0x2f18e6(0x392)]['performDamage'][_0x2f18e6(0x782)](this),this['isSpriteVisible']()&&this[_0x2f18e6(0x674)]()&&this['requestMotion']('damage'),SoundManager[_0x2f18e6(0x25e)]();},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x5ec)]=function(){const _0x43d016=_0xe55837;Game_Battler[_0x43d016(0x392)][_0x43d016(0x5ec)]['call'](this),this[_0x43d016(0x835)](_0x43d016(0x53c));},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x730)]=function(){const _0x567f25=_0xe55837;Game_Battler['prototype'][_0x567f25(0x730)][_0x567f25(0x782)](this),this[_0x567f25(0x835)](_0x567f25(0x53c));},Game_Enemy['prototype'][_0xe55837(0xcc)]=function(){const _0x1d2cff=_0xe55837;Game_Battler[_0x1d2cff(0x392)][_0x1d2cff(0xcc)]['call'](this),this[_0x1d2cff(0x761)]();},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x91)]=function(){const _0x56878f=_0xe55837;if(this['hasSvBattler']()){if(_0x56878f(0xc6)!==_0x56878f(0x98)){if(this[_0x56878f(0x230)]()>=0x1)return!![];return this[_0x56878f(0x6b9)]()['collapse'];}else{function _0x466b1e(){const _0x102f8b=_0x56878f;this['startWeaponAnimation'](_0x345984[_0x102f8b(0x5ad)]);}}}else return!![];},Game_Enemy[_0xe55837(0x392)][_0xe55837(0x3fe)]=function(){const _0x40b893=_0xe55837;return this[_0x40b893(0x6b9)]()['anchorX'];},Game_Enemy['prototype'][_0xe55837(0x1f9)]=function(){const _0x484a2d=_0xe55837;return this[_0x484a2d(0x6b9)]()['anchorY'];},Game_Enemy['prototype'][_0xe55837(0x925)]=function(){const _0x2fa8b4=_0xe55837;return this[_0x2fa8b4(0x6b9)]()[_0x2fa8b4(0x4c9)];},VisuMZ[_0xe55837(0x278)][_0xe55837(0x825)]=Game_Enemy[_0xe55837(0x392)]['transform'],Game_Enemy[_0xe55837(0x392)]['transform']=function(_0x4127b4){const _0x520210=_0xe55837;VisuMZ[_0x520210(0x278)][_0x520210(0x825)]['call'](this,_0x4127b4),this['clearBattleCoreData'](),this[_0x520210(0x90a)]();const _0x343056=this[_0x520210(0xe1)]();if(_0x343056)_0x343056[_0x520210(0x796)](this);},Game_Unit[_0xe55837(0x392)]['processBattleCoreJS']=function(_0x4d552c){const _0x420bb7=_0xe55837;for(const _0x516d33 of this[_0x420bb7(0x4a8)]()){if(_0x516d33)_0x516d33[_0x420bb7(0x8e7)](_0x4d552c);}},Game_Unit['prototype']['trueRandomTarget']=function(){const _0x74f407=_0xe55837,_0x4d095c=this[_0x74f407(0x7f1)]();return _0x4d095c[Math[_0x74f407(0x88a)](_0x4d095c['length'])];},VisuMZ[_0xe55837(0x278)][_0xe55837(0x30c)]=Game_Party[_0xe55837(0x392)]['addActor'],Game_Party['prototype'][_0xe55837(0x54f)]=function(_0x298542){const _0x5aea8e=_0xe55837;VisuMZ[_0x5aea8e(0x278)][_0x5aea8e(0x30c)][_0x5aea8e(0x782)](this,_0x298542),BattleManager[_0x5aea8e(0x7da)]();},VisuMZ['BattleCore'][_0xe55837(0x803)]=Game_Party[_0xe55837(0x392)][_0xe55837(0x66e)],Game_Party['prototype']['removeActor']=function(_0x11daab){const _0x2e840c=_0xe55837;VisuMZ[_0x2e840c(0x278)][_0x2e840c(0x803)]['call'](this,_0x11daab),BattleManager[_0x2e840c(0x7da)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x653)]=Game_Troop['prototype'][_0xe55837(0x62b)],Game_Troop[_0xe55837(0x392)][_0xe55837(0x62b)]=function(_0x40d61e){const _0x1835b6=_0xe55837;$gameTemp[_0x1835b6(0x148)](),$gameTemp[_0x1835b6(0x636)](_0x40d61e),VisuMZ[_0x1835b6(0x278)]['Game_Troop_setup'][_0x1835b6(0x782)](this,_0x40d61e);},VisuMZ['BattleCore'][_0xe55837(0x81a)]=Game_Map[_0xe55837(0x392)][_0xe55837(0x4ca)],Game_Map[_0xe55837(0x392)][_0xe55837(0x4ca)]=function(){const _0x754d06=_0xe55837;VisuMZ[_0x754d06(0x278)][_0x754d06(0x81a)]['call'](this),this[_0x754d06(0x15f)]();},Game_Map[_0xe55837(0x392)][_0xe55837(0x15f)]=function(){const _0x267163=_0xe55837;this[_0x267163(0xf7)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x259b07=$dataMap['note'];if(!_0x259b07)return;const _0x28a1e0=_0x259b07[_0x267163(0x1c3)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x28a1e0)for(const _0x5325c6 of _0x28a1e0){_0x5325c6[_0x267163(0x1c3)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x2af09a=Number(RegExp['$1']),_0x2f3082=Number(RegExp['$2']),_0x15c16b=_0x2f3082===0x1?this[_0x267163(0xf7)]:this['_regionBattleback2'],_0x351f57=String(RegExp['$3']);_0x15c16b[_0x2af09a]=_0x351f57;}},VisuMZ[_0xe55837(0x278)]['Game_Map_battleback1Name']=Game_Map[_0xe55837(0x392)][_0xe55837(0x47c)],Game_Map['prototype']['battleback1Name']=function(){const _0x2c0a47=_0xe55837;if(!BattleManager[_0x2c0a47(0x22b)]()){if(_0x2c0a47(0x898)===_0x2c0a47(0x764)){function _0x522571(){const _0x543dd9=_0x2c0a47,_0x5b94b6={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x229c33=_0x2beac6[_0x543dd9(0x656)][_0x543dd9(0x933)]();_0x4ac232[_0x543dd9(0x656)][_0x543dd9(0x1a4)](_0x5b94b6),_0x570428[_0x543dd9(0x656)][_0x543dd9(0x1a4)](_0x229c33);}}else{const _0x580726=$gamePlayer[_0x2c0a47(0x3fb)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x2c0a47(0xf7)]&&this['_regionBattleback1'][_0x580726])return this[_0x2c0a47(0xf7)][_0x580726];}}return VisuMZ[_0x2c0a47(0x278)][_0x2c0a47(0x3a9)]['call'](this);},VisuMZ[_0xe55837(0x278)]['Game_Map_battleback2Name']=Game_Map[_0xe55837(0x392)][_0xe55837(0x822)],Game_Map[_0xe55837(0x392)][_0xe55837(0x822)]=function(){const _0x168db5=_0xe55837;if(!BattleManager[_0x168db5(0x22b)]()){const _0x196e83=$gamePlayer[_0x168db5(0x3fb)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x168db5(0xf7)]&&this[_0x168db5(0x195)][_0x196e83])return this[_0x168db5(0x195)][_0x196e83];}return VisuMZ['BattleCore'][_0x168db5(0xdb)][_0x168db5(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x9bc)]=Game_Interpreter['prototype'][_0xe55837(0xa56)],Game_Interpreter[_0xe55837(0x392)]['command357']=function(_0x30623d){const _0x21103f=_0xe55837;return $gameTemp[_0x21103f(0x58f)](this),VisuMZ[_0x21103f(0x278)]['Game_Interpreter_PluginCommand'][_0x21103f(0x782)](this,_0x30623d);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x49a)]=Game_Interpreter['prototype']['updateWaitMode'],Game_Interpreter['prototype'][_0xe55837(0x2d5)]=function(){const _0x3f902a=_0xe55837;if(SceneManager[_0x3f902a(0x1d0)]())switch(this['_waitMode']){case _0x3f902a(0x834):if(Imported['VisuMZ_3_ActSeqCamera']){if(_0x3f902a(0x849)===_0x3f902a(0x849)){if($gameScreen[_0x3f902a(0x956)]()[_0x3f902a(0x9a0)]>0x0)return!![];this[_0x3f902a(0x6d5)]='';}else{function _0x5e1c3c(){const _0x53fea9=_0x3f902a;this['startMotion'](_0x53fea9(0x7ec));}}}break;case'battleAnimation':if(BattleManager[_0x3f902a(0x54d)][_0x3f902a(0x562)]())return!![];this[_0x3f902a(0x6d5)]='';break;case'battleCamera':if(Imported[_0x3f902a(0x187)]){if(_0x3f902a(0x671)!==_0x3f902a(0x3e4)){if($gameScreen[_0x3f902a(0x956)]()[_0x3f902a(0x1c4)]>0x0)return!![];if($gameScreen['battleCameraData']()['cameraOffsetDuration']>0x0)return!![];this[_0x3f902a(0x6d5)]='';}else{function _0xe42232(){const _0x54c03b=_0x3f902a,_0x3d4b97=this[_0x54c03b(0x2cc)]();if(_0x2a5650&&['xp',_0x54c03b(0x85f)][_0x54c03b(0x450)](_0x3d4b97))this[_0x54c03b(0x17e)](_0x1d4bdc);else _0x145a2e&&[_0x54c03b(0x1bb)][_0x54c03b(0x450)](_0x3d4b97)&&(this[_0x54c03b(0xcf)](_0x470c8b),this[_0x54c03b(0x20d)]());_0x25e48a[_0x54c03b(0x278)][_0x54c03b(0x56d)][_0x54c03b(0x782)](this,_0x1ccbab),_0x182333&&_0x8d0c2e[_0x54c03b(0x7f1)]()['length']>0x0&&_0x5d77b1['battler']()&&_0x36444a[_0x54c03b(0xe1)]()[_0x54c03b(0x489)]();}}}break;case _0x3f902a(0x869):if(BattleManager['_spriteset'][_0x3f902a(0x5b9)]())return!![];this[_0x3f902a(0x6d5)]='';break;case _0x3f902a(0x462):if(BattleManager[_0x3f902a(0x54d)][_0x3f902a(0x1d2)]())return!![];this[_0x3f902a(0x6d5)]='';break;case _0x3f902a(0x801):if(BattleManager[_0x3f902a(0x54d)][_0x3f902a(0x404)]())return!![];this[_0x3f902a(0x6d5)]='';break;case'battlelog':if(BattleManager[_0x3f902a(0xa2)][_0x3f902a(0x9c8)]())return!![];this['_waitMode']='';break;case _0x3f902a(0x151):if(BattleManager['_spriteset'][_0x3f902a(0x5c0)]())return!![];this[_0x3f902a(0x6d5)]='';break;case _0x3f902a(0x83d):if(BattleManager[_0x3f902a(0x54d)][_0x3f902a(0x125)]())return!![];this[_0x3f902a(0x6d5)]='';break;case _0x3f902a(0x1bd):if(BattleManager[_0x3f902a(0x54d)][_0x3f902a(0x575)]())return!![];this[_0x3f902a(0x6d5)]='';break;case _0x3f902a(0x772):if(BattleManager[_0x3f902a(0x54d)]['isAnyoneSkewing']())return!![];this[_0x3f902a(0x6d5)]='';break;case _0x3f902a(0x77c):if(Imported[_0x3f902a(0x8ed)]){if(_0x3f902a(0x4bf)!=='OscUA'){if(BattleManager[_0x3f902a(0x54d)][_0x3f902a(0x5a1)]())return!![];this[_0x3f902a(0x6d5)]='';}else{function _0x28ac65(){const _0x5a02f9=_0x3f902a,_0x14e2cf=_0x4b490e['parse']('['+_0xfb4174['$1']['match'](/\d+/g)+']');for(const _0x510614 of _0x14e2cf){if(!_0x3f08f3[_0x5a02f9(0x6f4)](_0x510614))return!![];}return![];}}}break;case'battleSkew':if(Imported[_0x3f902a(0x187)]){if($gameScreen[_0x3f902a(0x956)]()[_0x3f902a(0x3f1)]>0x0)return!![];this[_0x3f902a(0x6d5)]='';}break;case _0x3f902a(0x6be):if(BattleManager[_0x3f902a(0x54d)][_0x3f902a(0x372)]())return!![];this[_0x3f902a(0x6d5)]='';break;case'battleZoom':if(Imported[_0x3f902a(0x187)]){if('BYJzx'==='BYJzx'){if($gameScreen['battleCameraData']()[_0x3f902a(0xa5a)]>0x0)return!![];this['_waitMode']='';}else{function _0x4c668f(){const _0x506e08=_0x3f902a;if(this[_0x506e08(0x5cb)])return this[_0x506e08(0x5cb)];return this[_0x506e08(0x5cb)]=_0x17e529[_0x506e08(0x1c8)]['battleLayoutStyle'](),this[_0x506e08(0x5cb)];}}}break;}return VisuMZ[_0x3f902a(0x278)]['Game_Interpreter_updateWaitMode'][_0x3f902a(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x5f0)]=Game_Interpreter[_0xe55837(0x392)][_0xe55837(0x9a8)],Game_Interpreter[_0xe55837(0x392)]['command301']=function(_0x57aefe){const _0x480bf8=_0xe55837;return!$gameParty[_0x480bf8(0xa1c)]()?this[_0x480bf8(0x85d)](_0x57aefe):VisuMZ[_0x480bf8(0x278)][_0x480bf8(0x5f0)]['call'](this,_0x57aefe);},Game_Interpreter['prototype'][_0xe55837(0x7e6)]=function(_0x482114){const _0x1475db=_0xe55837;return VisuMZ['BattleCore'][_0x1475db(0x5f0)]['call'](this,_0x482114),BattleManager[_0x1475db(0x8cf)](_0xb31199=>{const _0x33f5ff=_0x1475db;this['_branch'][this[_0x33f5ff(0x14a)]]=_0xb31199;}),!![];},VisuMZ[_0xe55837(0x278)][_0xe55837(0x8ee)]=function(_0x14fd8e){const _0x2102e8=_0xe55837,_0x1c1d96=$dataCommonEvents[_0x14fd8e];if(!_0x1c1d96)return![];if(_0x1c1d96[_0x2102e8(0x656)]['length']<=0x1)return![];return!![];},Game_Interpreter[_0xe55837(0x392)][_0xe55837(0x85d)]=function(_0xfe2325){const _0x1234dc=_0xe55837,_0x50cd5b=VisuMZ[_0x1234dc(0x278)][_0x1234dc(0x108)][_0x1234dc(0x6c1)],_0x198629=_0x50cd5b[_0x1234dc(0x437)],_0x1014f2=$dataCommonEvents[_0x198629];if(_0x1014f2&&VisuMZ[_0x1234dc(0x278)][_0x1234dc(0x8ee)](_0x198629)){if('eNpsL'!==_0x1234dc(0x235)){const _0x2db96f=this[_0x1234dc(0x9f5)]()?this['_eventId']:0x0,_0x3c335f=_0x1014f2[_0x1234dc(0x656)];this['setupChild'](_0x3c335f,_0x2db96f),this[_0x1234dc(0x7fa)]=JsonEx[_0x1234dc(0x9f8)](this[_0x1234dc(0x7fa)]);const _0x214c17={'code':0xbc3,'indent':this[_0x1234dc(0x14a)],'parameters':JsonEx[_0x1234dc(0x9f8)](_0xfe2325)};return this[_0x1234dc(0x7fa)][_0x1234dc(0x4c7)](this['_index']+0x1,0x0,_0x214c17),!![];}else{function _0x32c9d8(){const _0x29cbc4=_0x1234dc;this['_floatHeight']=(this[_0x29cbc4(0x8f4)]*(_0x50e608-0x1)+this[_0x29cbc4(0xe9)])/_0x21ed7c;}}}else return VisuMZ[_0x1234dc(0x278)][_0x1234dc(0x5f0)][_0x1234dc(0x782)](this,_0xfe2325);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x2ae)]=BattleManager[_0xe55837(0x8ea)],BattleManager[_0xe55837(0x8ea)]=function(){const _0xf7ef24=_0xe55837;VisuMZ[_0xf7ef24(0x278)][_0xf7ef24(0x2ae)][_0xf7ef24(0x782)](this),this['onEncounterBattleCore']();},BattleManager[_0xe55837(0xa6b)]=function(){const _0x4fda49=_0xe55837,_0x4dda09=VisuMZ[_0x4fda49(0x278)][_0x4fda49(0x108)][_0x4fda49(0x6c1)],_0x91fbda=_0x4dda09[_0x4fda49(0x437)];_0x91fbda&&VisuMZ['BattleCore'][_0x4fda49(0x8ee)](_0x91fbda)&&(this[_0x4fda49(0x261)]=!![],$gameTemp[_0x4fda49(0x5ae)](_0x4dda09['BattleStartEvent']),$gameMap[_0x4fda49(0x7e4)](),$gameMap[_0x4fda49(0x598)][_0x4fda49(0x5e7)]=!![]),_0x4dda09[_0x4fda49(0x31f)]>0x0&&(this[_0x4fda49(0x2b0)]=!![]);},VisuMZ[_0xe55837(0x278)][_0xe55837(0xf9)]=Scene_Map['prototype'][_0xe55837(0x47b)],Scene_Map[_0xe55837(0x392)]['updateCallMenu']=function(){const _0x2be6c6=_0xe55837;if(BattleManager[_0x2be6c6(0x261)])return;VisuMZ[_0x2be6c6(0x278)][_0x2be6c6(0xf9)][_0x2be6c6(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x76b)]=Scene_Map['prototype']['launchBattle'],Scene_Map[_0xe55837(0x392)][_0xe55837(0x81f)]=function(){const _0x1ece7f=_0xe55837;BattleManager[_0x1ece7f(0x261)]?this[_0x1ece7f(0x2f0)]():VisuMZ[_0x1ece7f(0x278)][_0x1ece7f(0x76b)][_0x1ece7f(0x782)](this);},Scene_Map[_0xe55837(0x392)][_0xe55837(0x2f0)]=function(){const _0x5233c0=_0xe55837;this[_0x5233c0(0x610)]=!![];},VisuMZ[_0xe55837(0x278)][_0xe55837(0x3c1)]=SceneManager[_0xe55837(0x838)],SceneManager[_0xe55837(0x838)]=function(){const _0x503a9b=_0xe55837;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0x503a9b(0x278)][_0x503a9b(0x3c1)][_0x503a9b(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x88f)]=Game_Interpreter[_0xe55837(0x392)][_0xe55837(0x527)],Game_Interpreter[_0xe55837(0x392)][_0xe55837(0x527)]=function(){const _0x5ab705=_0xe55837;VisuMZ[_0x5ab705(0x278)]['Game_Interpreter_terminate'][_0x5ab705(0x782)](this);if(this[_0x5ab705(0x5e7)]){if(_0x5ab705(0x9ef)!==_0x5ab705(0x4d0))this[_0x5ab705(0x5e7)]=undefined,SceneManager['_scene'][_0x5ab705(0x7dc)]();else{function _0x2b15ae(){return 0x0;}}}},Scene_Map[_0xe55837(0x392)][_0xe55837(0x7dc)]=function(){const _0x1412ee=_0xe55837;BattleManager[_0x1412ee(0x261)]=undefined,BattleManager[_0x1412ee(0x1ce)]=!![],this[_0x1412ee(0x3f4)]();},VisuMZ['BattleCore'][_0xe55837(0x7f5)]=Scene_Map['prototype'][_0xe55837(0x7b6)],Scene_Map[_0xe55837(0x392)]['initialize']=function(){const _0x2364ea=_0xe55837;VisuMZ[_0x2364ea(0x278)]['Scene_Map_initializeAfter'][_0x2364ea(0x782)](this),BattleManager[_0x2364ea(0x1ce)]&&(this['_active']=!![],BattleManager[_0x2364ea(0x1ce)]=undefined);},VisuMZ[_0xe55837(0x278)]['Scene_Map_initialize']=Scene_Map[_0xe55837(0x392)][_0xe55837(0x7b6)],Scene_Map[_0xe55837(0x392)]['initialize']=function(){const _0x4a1f0d=_0xe55837;VisuMZ['BattleCore'][_0x4a1f0d(0x716)]['call'](this),$gameTemp[_0x4a1f0d(0x148)]();},VisuMZ[_0xe55837(0x278)]['Scene_ItemBase_applyItem']=Scene_ItemBase[_0xe55837(0x392)][_0xe55837(0x452)],Scene_ItemBase['prototype'][_0xe55837(0x452)]=function(){const _0x4e3290=_0xe55837;VisuMZ[_0x4e3290(0x278)][_0x4e3290(0x94e)][_0x4e3290(0x782)](this),this['item']()[_0x4e3290(0x35c)][_0x4e3290(0x1c3)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp['_commonEventQueue']=[]),DataManager[_0x4e3290(0x774)](this['item']())&&($gameTemp['_commonEventQueue']=[]);},VisuMZ['BattleCore']['Scene_Options_maxCommands']=Scene_Options[_0xe55837(0x392)][_0xe55837(0x1d3)],Scene_Options[_0xe55837(0x392)][_0xe55837(0x1d3)]=function(){const _0x3bc572=_0xe55837;let _0x4f8703=VisuMZ[_0x3bc572(0x278)][_0x3bc572(0xf3)]['call'](this);const _0x45bfab=VisuMZ[_0x3bc572(0x278)][_0x3bc572(0x108)];if(_0x45bfab[_0x3bc572(0x193)][_0x3bc572(0xdd)]&&_0x45bfab[_0x3bc572(0x193)][_0x3bc572(0x7d9)])_0x4f8703+=0x2;if(_0x45bfab[_0x3bc572(0x670)][_0x3bc572(0xdd)]&&_0x45bfab[_0x3bc572(0x670)][_0x3bc572(0x7d9)])_0x4f8703+=0x1;return _0x4f8703;},VisuMZ[_0xe55837(0x278)][_0xe55837(0x9c2)]=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x35f)],Scene_Battle['prototype'][_0xe55837(0x35f)]=function(){const _0x1b7cfd=_0xe55837;if(SceneManager[_0x1b7cfd(0x4e7)]()){Scene_Message['prototype']['start'][_0x1b7cfd(0x782)](this);this['_spriteset']&&this[_0x1b7cfd(0x54d)][_0x1b7cfd(0x59f)]();if(BattleManager[_0x1b7cfd(0x421)]){if('DmSLv'!==_0x1b7cfd(0x940)){function _0xd90ab5(){const _0x40fdb8=_0x1b7cfd,_0x458a84=this[_0x40fdb8(0x577)](),_0x3488a2=_0x458a84[0x0]?_0x458a84[0x0][_0x40fdb8(0x959)]:0x0,_0x4322ee=_0x7d9857[_0x40fdb8(0x99c)][_0x3488a2];_0x4322ee&&this[_0x40fdb8(0x345)](_0x4322ee['weaponImageId']);}}else BattleManager[_0x1b7cfd(0x435)]();}}else VisuMZ[_0x1b7cfd(0x278)][_0x1b7cfd(0x9c2)]['call'](this);},VisuMZ['BattleCore'][_0xe55837(0x740)]=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x3f4)],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x3f4)]=function(){const _0x26828a=_0xe55837;if(SceneManager['isNextSceneBattleTransitionable']())Scene_Message[_0x26828a(0x392)]['stop']['call'](this);else{if(_0x26828a(0x7dd)!==_0x26828a(0x7e7))VisuMZ['BattleCore']['Scene_Battle_stop']['call'](this);else{function _0x9f268f(){const _0x4a914c=_0x26828a;this[_0x4a914c(0x2cf)](_0x4a914c(0x4dc));}}}},VisuMZ[_0xe55837(0x278)]['Scene_Battle_terminate']=Scene_Battle['prototype'][_0xe55837(0x527)],Scene_Battle['prototype']['terminate']=function(){const _0xd27e68=_0xe55837;if(SceneManager[_0xd27e68(0x2a1)]()){if(_0xd27e68(0x767)!==_0xd27e68(0x894))Scene_Message[_0xd27e68(0x392)]['terminate'][_0xd27e68(0x782)](this);else{function _0x2a8468(){_0x5963ce=_0x43d6b0(_0x2330aa['$1']),_0x3ae2c8--;}}}else VisuMZ['BattleCore'][_0xd27e68(0x857)][_0xd27e68(0x782)](this);},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x102)]=function(){const _0x3861be=_0xe55837;if(ConfigManager[_0x3861be(0x500)]&&ConfigManager[_0x3861be(0x7d2)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x3861be(0x2cc)]()===_0x3861be(0x1bb))return![];else{return Scene_Message['prototype'][_0x3861be(0x102)]['call'](this);;}}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x50c)]=Scene_Battle['prototype'][_0xe55837(0x1b3)],Scene_Battle[_0xe55837(0x392)]['createAllWindows']=function(){const _0x5a8e71=_0xe55837;this['createEnemyNameContainer'](),VisuMZ['BattleCore'][_0x5a8e71(0x50c)]['call'](this),this[_0x5a8e71(0x6e6)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x603)]=Scene_Battle['prototype']['createCancelButton'],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x987)]=function(){const _0x3c89bd=_0xe55837;VisuMZ[_0x3c89bd(0x278)][_0x3c89bd(0x603)][_0x3c89bd(0x782)](this),this[_0x3c89bd(0x2cc)]()==='border'&&this['repositionCancelButtonBorderStyle']();},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x139)]=function(_0x3bd797){const _0x51125e=_0xe55837;if(_0x3bd797){if('BgfiB'===_0x51125e(0x3a2)){function _0x3ad8f5(){const _0x1075c0=_0x51125e;this[_0x1075c0(0x835)]('skill');}}else this[_0x51125e(0x10d)]['x']=(Graphics[_0x51125e(0x124)]-Graphics[_0x51125e(0x386)])/0x2,this[_0x51125e(0x10d)]['y']=(Graphics[_0x51125e(0x97c)]-Graphics['boxHeight'])/0x2;}else this[_0x51125e(0x10d)]['x']=Graphics[_0x51125e(0x124)]*0xa,this['_windowLayer']['y']=Graphics[_0x51125e(0x97c)]*0xa;},VisuMZ[_0xe55837(0x278)][_0xe55837(0x82c)]=Scene_Battle['prototype'][_0xe55837(0x634)],Scene_Battle['prototype']['selectNextCommand']=function(){const _0x280229=_0xe55837,_0x509086=BattleManager[_0x280229(0x3b1)]();VisuMZ[_0x280229(0x278)][_0x280229(0x82c)][_0x280229(0x782)](this);if(_0x509086){if(_0x509086===BattleManager[_0x280229(0x3b1)]())return;if(_0x509086===BattleManager[_0x280229(0xec)])return;if(_0x509086[_0x280229(0xe1)]())_0x509086[_0x280229(0xe1)]()[_0x280229(0x905)]();}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x172)]=Scene_Battle['prototype'][_0xe55837(0x6c2)],Scene_Battle['prototype'][_0xe55837(0x6c2)]=function(){const _0x1308f4=_0xe55837,_0x529b6d=BattleManager[_0x1308f4(0x3b1)]();if(_0x529b6d&&_0x529b6d[_0x1308f4(0xe1)])_0x529b6d[_0x1308f4(0xe1)]()[_0x1308f4(0x905)]();VisuMZ[_0x1308f4(0x278)][_0x1308f4(0x172)][_0x1308f4(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x50a)]=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x840)],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x840)]=function(){const _0x2f6b5b=_0xe55837;if(VisuMZ[_0x2f6b5b(0x278)][_0x2f6b5b(0x108)]['BattleLog'][_0x2f6b5b(0x26b)]){if(_0x2f6b5b(0x4ec)===_0x2f6b5b(0x4ec))return VisuMZ['BattleCore'][_0x2f6b5b(0x108)][_0x2f6b5b(0x30b)][_0x2f6b5b(0x26b)][_0x2f6b5b(0x782)](this);else{function _0x6b8f5(){const _0x525258=_0x2f6b5b;return _0x4c0f29[_0x525258(0x7f1)]()[_0x525258(0x49d)](_0x554d26=>_0x554d26!==_0xcbcebb);}}}return VisuMZ[_0x2f6b5b(0x278)][_0x2f6b5b(0x50a)][_0x2f6b5b(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x9c7)]=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x641)],Scene_Battle[_0xe55837(0x392)]['createPartyCommandWindow']=function(){const _0x2c1e44=_0xe55837;VisuMZ[_0x2c1e44(0x278)][_0x2c1e44(0x9c7)][_0x2c1e44(0x782)](this),this[_0x2c1e44(0x7ba)]();},Scene_Battle['prototype'][_0xe55837(0x7ba)]=function(){const _0x1241d5=_0xe55837,_0x33cdfc=this[_0x1241d5(0x694)];_0x33cdfc[_0x1241d5(0x719)](_0x1241d5(0x6cd),this[_0x1241d5(0x935)][_0x1241d5(0x51d)](this)),_0x33cdfc[_0x1241d5(0x719)](_0x1241d5(0xcb),this[_0x1241d5(0x21a)]['bind'](this));const _0xcf7520=this[_0x1241d5(0x2cc)]();switch(_0xcf7520){case'xp':case _0x1241d5(0x85f):return this[_0x1241d5(0x694)]['setBackgroundType'](0x1);break;}},Scene_Battle['prototype'][_0xe55837(0x935)]=function(){const _0x3b1a7f=_0xe55837;BattleManager[_0x3b1a7f(0x9ed)]=!![],$gameParty['makeActions'](),this[_0x3b1a7f(0x634)]();if(BattleManager[_0x3b1a7f(0x6a1)]()){if('lgraF'===_0x3b1a7f(0x685))BattleManager[_0x3b1a7f(0x140)]=![];else{function _0x1a0ba2(){return!![];}}}},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x21a)]=function(){const _0xc8b1d0=_0xe55837;if(this[_0xc8b1d0(0x180)]())this[_0xc8b1d0(0x883)]=!![],this['_logWindow'][_0xc8b1d0(0x30a)](_0xc8b1d0(0x390),VisuMZ[_0xc8b1d0(0x278)][_0xc8b1d0(0x108)]['PartyCmd'][_0xc8b1d0(0x755)]);else{if(_0xc8b1d0(0x52e)==='XlIxN')this[_0xc8b1d0(0x3b8)]();else{function _0xfd96b3(){const _0x49d27d=_0xc8b1d0,_0x156ed2=_0xc3d41b(_0x1d2b46['$1']);this[_0x49d27d(0x4f6)](_0x156ed2);}}}},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x180)]=function(){const _0x549bf8=_0xe55837;return BattleManager[_0x549bf8(0x699)]();},Scene_Battle['prototype'][_0xe55837(0x3b8)]=function(){const _0x57b08f=_0xe55837;this[_0x57b08f(0x883)]=![],this[_0x57b08f(0x54d)][_0x57b08f(0x59f)](),this['_windowLayer'][_0x57b08f(0x331)]=![];if(BattleManager[_0x57b08f(0x22b)]()){if($dataSystem['battleback1Name']||$dataSystem['battleback2Name']){if(_0x57b08f(0x342)!==_0x57b08f(0x9e))SceneManager[_0x57b08f(0x69b)]();else{function _0x48b5d7(){const _0x22752d=_0x57b08f;this[_0x22752d(0x44a)]();}}}}else($gameMap['battleback1Name']()||$gameMap[_0x57b08f(0x822)]())&&SceneManager[_0x57b08f(0x69b)]();SceneManager[_0x57b08f(0x30a)](Scene_Options);if(BattleManager[_0x57b08f(0x6a1)]()){if(_0x57b08f(0x814)!=='GfoBy')BattleManager[_0x57b08f(0x421)]=BattleManager[_0x57b08f(0x3b1)]();else{function _0x5ad227(){const _0x3d2444=_0x57b08f;this[_0x3d2444(0xa2)][_0x3d2444(0x30a)](_0x3d2444(0xea)),this[_0x3d2444(0xa2)][_0x3d2444(0x30a)](_0x3d2444(0x8d7));}}}},VisuMZ[_0xe55837(0x278)][_0xe55837(0xa2b)]=Scene_Battle[_0xe55837(0x392)][_0xe55837(0xa6e)],Scene_Battle[_0xe55837(0x392)]['updateBattleProcess']=function(){const _0x57341a=_0xe55837;VisuMZ[_0x57341a(0x278)][_0x57341a(0xa2b)][_0x57341a(0x782)](this);if(this[_0x57341a(0x883)]&&!BattleManager[_0x57341a(0xec)])this[_0x57341a(0x3b8)]();},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x6e6)]=function(){const _0x2f016d=_0xe55837,_0x31ed8c=this[_0x2f016d(0x99a)]();this[_0x2f016d(0x2ca)]=new Window_AutoBattleCancel(_0x31ed8c),this[_0x2f016d(0x2ca)][_0x2f016d(0xa20)](),this[_0x2f016d(0x9e6)](this[_0x2f016d(0x2ca)]);},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x99a)]=function(){const _0x49beea=_0xe55837;return VisuMZ[_0x49beea(0x278)][_0x49beea(0x108)][_0x49beea(0x193)][_0x49beea(0x706)][_0x49beea(0x782)](this);},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x1f5)]=function(){const _0x3abd90=_0xe55837;return VisuMZ[_0x3abd90(0x278)][_0x3abd90(0x108)][_0x3abd90(0xa64)][_0x3abd90(0x757)];},VisuMZ[_0xe55837(0x278)][_0xe55837(0x955)]=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x9a3)],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x9a3)]=function(){const _0x3426c0=_0xe55837;if(this[_0x3426c0(0x1f5)]()){if(_0x3426c0(0x654)===_0x3426c0(0x96f)){function _0x2fc78f(){const _0x59d927=_0x3426c0;_0x1d5f37[_0x59d927(0x4c9)]=![];}}else this[_0x3426c0(0x7bb)]();}else VisuMZ[_0x3426c0(0x278)][_0x3426c0(0x955)][_0x3426c0(0x782)](this);},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x7bb)]=function(){const _0x3558b7=_0xe55837;if(BattleManager['isDTB']()){if(_0x3558b7(0x34d)!==_0x3558b7(0x877))this['selectNextCommand']();else{function _0x28ea28(){const _0x4c4d62=_0x3558b7;if(_0x55f7ea[_0x4c4d62(0x4e7)]())return;if(!_0x5c94a0)return;if(!_0x3344fc[_0x4c4d62(0x732)]())return;_0x5ebb19['BattleCore']['Sprite_Actor_moveToStartPosition'][_0x4c4d62(0x782)](this);}}}else{if(BattleManager['isTpb']()){if(_0x3558b7(0x424)===_0x3558b7(0x110)){function _0x1e95fb(){const _0x4e6b43=_0x3558b7;return _0x5efad2[_0x4e6b43(0x49d)](_0x56a7ba=>_0x56a7ba[_0x4e6b43(0xb6)]());}}else VisuMZ['BattleCore'][_0x3558b7(0x955)]['call'](this);}}},VisuMZ['BattleCore'][_0xe55837(0xfe)]=Scene_Battle['prototype'][_0xe55837(0x395)],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x395)]=function(){const _0x27b816=_0xe55837;BattleManager[_0x27b816(0x6a1)]()?this[_0x27b816(0x60b)]():VisuMZ[_0x27b816(0x278)][_0x27b816(0xfe)][_0x27b816(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0xa26)]=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x7ff)],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x7ff)]=function(){const _0x40d1bf=_0xe55837;VisuMZ['BattleCore'][_0x40d1bf(0xa26)]['call'](this),this[_0x40d1bf(0x80d)]();},Scene_Battle[_0xe55837(0x392)]['createActorCommandWindowBattleCore']=function(){const _0x4d21c8=_0xe55837,_0x5bed4f=this[_0x4d21c8(0x198)];_0x5bed4f[_0x4d21c8(0x719)](_0x4d21c8(0x366),this[_0x4d21c8(0x99d)][_0x4d21c8(0x51d)](this)),_0x5bed4f['setHandler'](_0x4d21c8(0x6cd),this['actorCommandAutoBattle'][_0x4d21c8(0x51d)](this)),_0x5bed4f['setHandler'](_0x4d21c8(0x5bc),this[_0x4d21c8(0x4e1)]['bind'](this));if(BattleManager[_0x4d21c8(0x6a1)]()){if(_0x4d21c8(0x3cb)===_0x4d21c8(0x3cb))this[_0x4d21c8(0x1f5)]()?delete _0x5bed4f[_0x4d21c8(0x542)][_0x4d21c8(0x8ff)]:_0x5bed4f['setHandler'](_0x4d21c8(0x8ff),this[_0x4d21c8(0x383)][_0x4d21c8(0x51d)](this));else{function _0x1e40b8(){return!![];}}}},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x99d)]=function(){this['commandEscape']();},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x6b0)]=function(){const _0x487106=_0xe55837;BattleManager[_0x487106(0x3b1)]()[_0x487106(0x820)](),BattleManager['finishActorInput'](),BattleManager[_0x487106(0x122)](),this[_0x487106(0x10f)]();},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x4e1)]=function(){const _0x34364f=_0xe55837,_0x35deb2=BattleManager[_0x34364f(0x299)]();_0x35deb2['setSkill'](this[_0x34364f(0x198)][_0x34364f(0xa4)]()),this[_0x34364f(0x701)]();},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x383)]=function(){const _0x45d154=_0xe55837;this['_partyCommandWindow'][_0x45d154(0x62b)](),this[_0x45d154(0x198)][_0x45d154(0x602)]();},VisuMZ[_0xe55837(0x278)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0xe55837(0x392)]['createHelpWindow'],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x841)]=function(){const _0x2d52ff=_0xe55837;VisuMZ[_0x2d52ff(0x278)][_0x2d52ff(0x249)][_0x2d52ff(0x782)](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0xe55837(0x392)]['createHelpWindowBattleCore']=function(){const _0x1d05d7=_0xe55837;this[_0x1d05d7(0x198)]['setHelpWindow'](this[_0x1d05d7(0x285)]),this[_0x1d05d7(0x694)][_0x1d05d7(0xe0)](this[_0x1d05d7(0x285)]);},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x2cc)]=function(){const _0xe266cf=_0xe55837;if($gameTemp[_0xe266cf(0x554)]!==undefined)return $gameTemp[_0xe266cf(0x554)];if(this[_0xe266cf(0x5cb)])return this['_battleLayoutStyle'];return this[_0xe266cf(0x5cb)]=VisuMZ[_0xe266cf(0x278)][_0xe266cf(0x108)][_0xe266cf(0x22d)]['Style'][_0xe266cf(0x8f1)]()[_0xe266cf(0x1ee)](),this[_0xe266cf(0x5cb)]===_0xe266cf(0x528)&&!Imported[_0xe266cf(0x4c4)]&&(this[_0xe266cf(0x5cb)]=_0xe266cf(0x4d5)),this['_battleLayoutStyle'];},VisuMZ[_0xe55837(0x278)]['Scene_Battle_windowAreaHeight']=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x7a9)],Scene_Battle[_0xe55837(0x392)]['windowAreaHeight']=function(){const _0x4a181b=_0xe55837,_0x48f2eb=this['battleLayoutStyle']();switch(_0x48f2eb){case _0x4a181b(0x656):return this[_0x4a181b(0x432)](Math[_0x4a181b(0x220)](0x1,$gameParty[_0x4a181b(0x9e8)]()),!![]);break;default:return VisuMZ[_0x4a181b(0x278)]['Scene_Battle_windowAreaHeight'][_0x4a181b(0x782)](this);break;}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x221)]=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x742)],Scene_Battle['prototype'][_0xe55837(0x742)]=function(){const _0x57f59f=_0xe55837,_0x27d520=this[_0x57f59f(0x2cc)]();switch(_0x27d520){case _0x57f59f(0x1bb):return this['helpWindowRectBorderStyle']();break;case'default':case'list':case'xp':case _0x57f59f(0x85f):default:return VisuMZ[_0x57f59f(0x278)]['Scene_Battle_helpWindowRect'][_0x57f59f(0x782)](this);break;}},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x62a)]=function(){const _0xa03579=_0xe55837,_0x510b0c=this[_0xa03579(0x2cc)]();switch(_0x510b0c){case'xp':case _0xa03579(0x85f):return this[_0xa03579(0x829)]();break;case _0xa03579(0x1bb):return this[_0xa03579(0x2dd)]();break;case _0xa03579(0x4d5):case'list':default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ['BattleCore']['Scene_Battle_partyCommandWindowRect']=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x4b1)],Scene_Battle[_0xe55837(0x392)]['partyCommandWindowRect']=function(){const _0x26c270=_0xe55837,_0xbd6ba3=this['battleLayoutStyle']();switch(_0xbd6ba3){case'xp':case _0x26c270(0x85f):return this[_0x26c270(0xa12)]();break;case _0x26c270(0x1bb):return this[_0x26c270(0x80b)]();case _0x26c270(0x4d5):case _0x26c270(0x656):default:return this[_0x26c270(0xe2)]();break;}},Scene_Battle['prototype'][_0xe55837(0xe2)]=function(){const _0x2e5709=_0xe55837,_0xa2dab8=VisuMZ[_0x2e5709(0x278)][_0x2e5709(0x108)][_0x2e5709(0x22d)],_0x1d19e2=_0xa2dab8[_0x2e5709(0x2db)]||0xc0,_0x59f992=this['windowAreaHeight'](),_0x1a617d=this[_0x2e5709(0x102)]()?Graphics[_0x2e5709(0x386)]-_0x1d19e2:0x0,_0x217790=Graphics[_0x2e5709(0x5c8)]-_0x59f992;return new Rectangle(_0x1a617d,_0x217790,_0x1d19e2,_0x59f992);},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x6e9)]=function(){return this['partyCommandWindowRect']();},VisuMZ[_0xe55837(0x278)][_0xe55837(0xbe)]=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x749)],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x749)]=function(){const _0x329b49=_0xe55837,_0x48197a=this['battleLayoutStyle']();switch(_0x48197a){case'xp':case'portrait':case _0x329b49(0x1bb):break;case _0x329b49(0x4d5):case _0x329b49(0x656):default:VisuMZ[_0x329b49(0x278)][_0x329b49(0xbe)][_0x329b49(0x782)](this);break;}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x691)]=Scene_Battle['prototype'][_0xe55837(0x61a)],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x61a)]=function(){const _0x2f7889=_0xe55837;VisuMZ[_0x2f7889(0x278)][_0x2f7889(0x691)]['call'](this),this[_0x2f7889(0x486)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x3ef)]=Scene_Battle['prototype'][_0xe55837(0x688)],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x688)]=function(){const _0x2a0518=_0xe55837;VisuMZ[_0x2a0518(0x278)][_0x2a0518(0x3ef)]['call'](this),this[_0x2a0518(0xdc)][_0x2a0518(0x8a4)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x486)]=function(){const _0x49eb86=_0xe55837,_0x56e99d=this[_0x49eb86(0x2cc)]();['xp',_0x49eb86(0x85f),_0x49eb86(0x1bb)][_0x49eb86(0x450)](_0x56e99d)&&this[_0x49eb86(0x198)]['close'](),(_0x56e99d===_0x49eb86(0x1bb)||this['isSkillItemWindowsMiddle']())&&(this['_skillWindow'][_0x49eb86(0x602)](),this['_itemWindow'][_0x49eb86(0x602)]());},VisuMZ[_0xe55837(0x278)]['Scene_Battle_onActorOk']=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x787)],Scene_Battle[_0xe55837(0x392)]['onActorOk']=function(){const _0xb8bd91=_0xe55837;VisuMZ['BattleCore'][_0xb8bd91(0x832)][_0xb8bd91(0x782)](this),this[_0xb8bd91(0x2d7)]();},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x6f3)]=function(){const _0x4b4b7e=_0xe55837;return['attack','guard',_0x4b4b7e(0x5bc)][_0x4b4b7e(0x450)](this[_0x4b4b7e(0x198)]['currentSymbol']());},VisuMZ['BattleCore'][_0xe55837(0x3d9)]=Scene_Battle['prototype'][_0xe55837(0x28e)],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x28e)]=function(){const _0x1efd93=_0xe55837;if(this[_0x1efd93(0x6f3)]()){if('NTcnr'!==_0x1efd93(0x8a2))this[_0x1efd93(0x418)][_0x1efd93(0x2fa)](),this['_actorWindow']['hide'](),this[_0x1efd93(0x198)]['activate']();else{function _0x247cf1(){_0x3758a8=_0x47ada8;}}}else VisuMZ[_0x1efd93(0x278)][_0x1efd93(0x3d9)][_0x1efd93(0x782)](this);this[_0x1efd93(0x9af)]();},VisuMZ[_0xe55837(0x278)]['Scene_Battle_onEnemyOk']=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x41c)],Scene_Battle[_0xe55837(0x392)]['onEnemyOk']=function(){const _0x1decdc=_0xe55837;VisuMZ[_0x1decdc(0x278)]['Scene_Battle_onEnemyOk']['call'](this),this['okTargetSelectionVisibility']();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x33d)]=Scene_Battle[_0xe55837(0x392)]['onEnemyCancel'],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x897)]=function(){const _0x1d0f61=_0xe55837;this[_0x1d0f61(0x6f3)]()?(this['_statusWindow'][_0x1d0f61(0x2fa)](),this[_0x1d0f61(0xdc)]['hide'](),this[_0x1d0f61(0x198)]['activate']()):VisuMZ['BattleCore']['Scene_Battle_onEnemyCancel'][_0x1d0f61(0x782)](this),this[_0x1d0f61(0x9af)]();},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x2d7)]=function(){const _0x56cee9=_0xe55837,_0x376966=this[_0x56cee9(0x2cc)]();if(_0x376966===_0x56cee9(0x1bb)||this[_0x56cee9(0x217)]()){this['_skillWindow'][_0x56cee9(0x601)]();if(this[_0x56cee9(0x186)][_0x56cee9(0x88c)]){if(_0x56cee9(0x561)===_0x56cee9(0x84e)){function _0x2f0f32(){const _0x2b34b2=_0x56cee9;if(!this['item']())return _0x110f08;const _0x295493=this[_0x2b34b2(0xa24)]()[_0x2b34b2(0x35c)];return _0x295493[_0x2b34b2(0x1c3)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x200e11[_0x2b34b2(0x1ad)](this['subject']()),_0x2754e6;}}else this[_0x56cee9(0x186)][_0x56cee9(0x2fa)]();}this[_0x56cee9(0xa7b)][_0x56cee9(0x601)](),this[_0x56cee9(0xa7b)][_0x56cee9(0x88c)]&&this[_0x56cee9(0xa7b)][_0x56cee9(0x2fa)]();}},Scene_Battle['prototype'][_0xe55837(0x9af)]=function(){const _0x502748=_0xe55837,_0x54b7dc=this[_0x502748(0x2cc)]();['xp',_0x502748(0x85f),_0x502748(0x1bb)][_0x502748(0x450)](_0x54b7dc)&&this[_0x502748(0x198)][_0x502748(0x601)](),this[_0x502748(0x2d7)]();},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x4b5)]=function(){const _0x29c7de=_0xe55837,_0x4cdf08=VisuMZ['BattleCore']['Settings']['BattleLayout'],_0x9e3897=Window_BattleStatus['prototype'][_0x29c7de(0x2b6)](),_0x1c1052=Graphics[_0x29c7de(0x386)]-(_0x4cdf08[_0x29c7de(0x2db)]||0xc0),_0x144305=this[_0x29c7de(0x7a9)]()+_0x9e3897,_0x5583c2=this['isRightInputMode']()?0x0:Graphics[_0x29c7de(0x386)]-_0x1c1052,_0x16b4b2=Graphics[_0x29c7de(0x5c8)]-_0x144305+_0x9e3897;return new Rectangle(_0x5583c2,_0x16b4b2,_0x1c1052,_0x144305);},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x829)]=function(){const _0x156bdf=_0xe55837,_0x2fdc91=Window_BattleStatus['prototype'][_0x156bdf(0x2b6)](),_0x1d6e74=Graphics[_0x156bdf(0x386)],_0x2c6db0=this[_0x156bdf(0x7a9)]()+_0x2fdc91,_0x3000cf=0x0,_0x5332df=Graphics[_0x156bdf(0x5c8)]-_0x2c6db0+_0x2fdc91;return new Rectangle(_0x3000cf,_0x5332df,_0x1d6e74,_0x2c6db0);},Scene_Battle[_0xe55837(0x392)]['partyCommandWindowRectXPStyle']=function(){const _0x986cc=_0xe55837,_0x19de5d=Graphics['boxWidth']/0x2,_0x4c4ac5=this['calcWindowHeight'](VisuMZ[_0x986cc(0x278)][_0x986cc(0x108)][_0x986cc(0x22d)]['XPActorCommandLines'],!![]),_0x471fec=Math['round']((Graphics[_0x986cc(0x386)]-_0x19de5d)/0x2),_0x4dd64c=Graphics[_0x986cc(0x5c8)]-_0x4c4ac5-this[_0x986cc(0x829)]()[_0x986cc(0x97c)];return new Rectangle(_0x471fec,_0x4dd64c,_0x19de5d,_0x4c4ac5);},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x9c5)]=function(){const _0x5132cf=_0xe55837,_0x275a92=Graphics[_0x5132cf(0x124)],_0x151583=Math[_0x5132cf(0x498)]((Graphics[_0x5132cf(0x386)]-_0x275a92)/0x2),_0x573d23=this['helpAreaHeight'](),_0x31b25c=(Graphics[_0x5132cf(0x97c)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x151583,_0x31b25c,_0x275a92,_0x573d23);},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x2dd)]=function(){const _0x180a4a=_0xe55837,_0xe79585=Graphics[_0x180a4a(0x124)],_0x238472=Math['round']((Graphics['boxWidth']-_0xe79585)/0x2),_0x169bb2=this[_0x180a4a(0x432)](0x4,!![]),_0x23d0bd=Graphics[_0x180a4a(0x5c8)]-_0x169bb2+(Graphics[_0x180a4a(0x97c)]-Graphics[_0x180a4a(0x5c8)])/0x2;return new Rectangle(_0x238472,_0x23d0bd,_0xe79585,_0x169bb2);},Scene_Battle['prototype'][_0xe55837(0x80b)]=function(){const _0xbc0079=_0xe55837,_0x1f872b=Math[_0xbc0079(0x639)](Graphics['width']/0x3),_0x496e1a=this['isRightInputMode']()?(Graphics[_0xbc0079(0x124)]+Graphics[_0xbc0079(0x386)])/0x2-_0x1f872b:(Graphics[_0xbc0079(0x124)]-Graphics[_0xbc0079(0x386)])/-0x2,_0x4479df=this[_0xbc0079(0x9c5)](),_0x48b68e=_0x4479df['y']+_0x4479df['height'],_0xd75873=this['statusWindowRectBorderStyle'](),_0x5cae2e=_0xd75873['y']-_0x48b68e;return new Rectangle(_0x496e1a,_0x48b68e,_0x1f872b,_0x5cae2e);},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x3aa)]=function(){const _0x4a6ac0=_0xe55837,_0xbf1ac9=Math[_0x4a6ac0(0x541)](Graphics[_0x4a6ac0(0x124)]/0x3),_0x2885c1=Math[_0x4a6ac0(0x498)]((Graphics[_0x4a6ac0(0x386)]-_0xbf1ac9)/0x2),_0x3799f2=this['partyCommandWindowRectBorderStyle'](),_0x5ecaf3=_0x3799f2['y'],_0x59652e=_0x3799f2[_0x4a6ac0(0x97c)];return new Rectangle(_0x2885c1,_0x5ecaf3,_0xbf1ac9,_0x59652e);},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x5c4)]=function(){const _0x12b76c=_0xe55837;this['_cancelButton']['y']=this['_helpWindow']['y']+this[_0x12b76c(0x285)][_0x12b76c(0x97c)];if(this[_0x12b76c(0x102)]()){if(_0x12b76c(0x3cc)!==_0x12b76c(0x3cc)){function _0x41100a(){const _0xaa8852=_0x12b76c,_0x945418=_0x3a655e[_0xaa8852(0x2d3)]('['+_0x5d5641['$1'][_0xaa8852(0x1c3)](/\d+/g)+']');for(const _0x19c4b2 of _0x945418){if(_0x59be6d[_0xaa8852(0x6f4)](_0x19c4b2))return!![];}return![];}}else this['battleLayoutStyle']()===_0x12b76c(0x1bb)?this['_cancelButton']['x']=0x8:this[_0x12b76c(0x54b)]['x']=-this['_cancelButton'][_0x12b76c(0x124)]-0x4;}else{if('SRxYO'!==_0x12b76c(0x274))this['_cancelButton']['x']=Graphics[_0x12b76c(0x124)]-(Graphics[_0x12b76c(0x124)]-Graphics['boxWidth'])/0x2-this[_0x12b76c(0x54b)][_0x12b76c(0x124)]-0x4;else{function _0x235e8d(){const _0x41084b=_0x12b76c;this[_0x41084b(0xa53)](_0x4e80d0);for(const _0x52bdce of _0x280c43['targetObjects']){_0x52bdce[_0x41084b(0xa63)]&&_0x52bdce['endAnimation']();}_0xaec333[_0x41084b(0x233)]();}}}},VisuMZ['BattleCore']['Scene_Battle_skillWindowRect']=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x784)],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x784)]=function(){const _0x45ca97=_0xe55837;if(this[_0x45ca97(0x2cc)]()===_0x45ca97(0x1bb)){if('gGufq'===_0x45ca97(0x919))return this[_0x45ca97(0x3aa)]();else{function _0x5e6cb5(){const _0x2f59fe=_0x45ca97,_0x59ba48=new _0x58c410();this[_0x2f59fe(0xa4f)][_0x2f59fe(0x9e6)](_0x59ba48),_0x59ba48['linkSprite'](_0xec762d);}}}else return this[_0x45ca97(0x217)]()?this[_0x45ca97(0x6fa)]():VisuMZ[_0x45ca97(0x278)][_0x45ca97(0x3f8)][_0x45ca97(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x40b)]=Scene_Battle[_0xe55837(0x392)][_0xe55837(0x48c)],Scene_Battle[_0xe55837(0x392)][_0xe55837(0x48c)]=function(){const _0x5dbe3c=_0xe55837;if(this[_0x5dbe3c(0x2cc)]()==='border')return this[_0x5dbe3c(0x3aa)]();else{if(this['isSkillItemWindowsMiddle']()){if(_0x5dbe3c(0x704)===_0x5dbe3c(0x4de)){function _0x1246ef(){const _0x197d3b=_0x5dbe3c;_0x151bf3[_0x197d3b(0x435)]();}}else return this['skillItemWindowRectMiddle']();}else return VisuMZ[_0x5dbe3c(0x278)][_0x5dbe3c(0x40b)][_0x5dbe3c(0x782)](this);}},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x217)]=function(){const _0x42c5a2=_0xe55837;return VisuMZ['BattleCore'][_0x42c5a2(0x108)][_0x42c5a2(0x22d)][_0x42c5a2(0x325)];},Scene_Battle[_0xe55837(0x392)][_0xe55837(0x6fa)]=function(){const _0x58aced=_0xe55837,_0x36b8b6=Sprite_Button[_0x58aced(0x392)][_0x58aced(0x143)]()*0x2+0x4;let _0x5bc2a9=Graphics[_0x58aced(0x386)]-_0x36b8b6;if(Imported['VisuMZ_0_CoreEngine']&&SceneManager[_0x58aced(0x303)]()){if('enlnh'==='enlnh')_0x5bc2a9+=_0x36b8b6;else{function _0x314841(){const _0x5a8a95=_0x58aced;_0x50d9de[_0x5a8a95(0x526)](_0x3d274a),['swing',_0x5a8a95(0x354),'missile'][_0x5a8a95(0x450)](_0x2208cb)&&this['performWeaponAnimation']();}}}const _0x50492b=this[_0x58aced(0x6bc)](),_0x350282=Graphics[_0x58aced(0x5c8)]-_0x50492b-this[_0x58aced(0x62a)]()[_0x58aced(0x97c)]+Window_BattleStatus['prototype'][_0x58aced(0x2b6)](),_0xeb800a=0x0;return new Rectangle(_0xeb800a,_0x50492b,_0x5bc2a9,_0x350282);},Scene_Battle['prototype'][_0xe55837(0x2f9)]=function(){const _0x965a17=_0xe55837;if(!VisuMZ[_0x965a17(0x278)][_0x965a17(0x108)][_0x965a17(0x214)][_0x965a17(0x3e5)])return;this[_0x965a17(0xa4f)]=new Sprite(),this['_enemyNameContainer']['x']=this[_0x965a17(0x10d)]['x'],this[_0x965a17(0xa4f)]['y']=this[_0x965a17(0x10d)]['y'];const _0x2d11bc=this['children']['indexOf'](this[_0x965a17(0x10d)]);this[_0x965a17(0x16b)](this[_0x965a17(0xa4f)],_0x2d11bc);for(let _0x1aef17=0x0;_0x1aef17<0x8;_0x1aef17++){const _0x105cc7=new Window_EnemyName(_0x1aef17);this[_0x965a17(0xa4f)][_0x965a17(0x9e6)](_0x105cc7);}},Sprite_Battler[_0xe55837(0x850)]=VisuMZ['BattleCore']['Settings'][_0xe55837(0x948)][_0xe55837(0x371)],VisuMZ[_0xe55837(0x278)][_0xe55837(0x915)]=Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x120)],Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x120)]=function(){const _0x4be5c0=_0xe55837;VisuMZ[_0x4be5c0(0x278)]['Sprite_Battler_initMembers'][_0x4be5c0(0x782)](this),this[_0x4be5c0(0x813)]();if(this[_0x4be5c0(0x78e)]===Sprite_Enemy)this[_0x4be5c0(0x9d3)]();this[_0x4be5c0(0x576)]();},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x813)]=function(){const _0x35cb38=_0xe55837;this[_0x35cb38(0xa0)]=0x0,this[_0x35cb38(0x937)]=0x0,this[_0x35cb38(0x8f4)]=0x0,this[_0x35cb38(0xe9)]=0x0,this[_0x35cb38(0x991)]=0x0,this[_0x35cb38(0x391)]=0x0,this['_floatEasing']=_0x35cb38(0x837),this[_0x35cb38(0x9cb)]=0x0,this[_0x35cb38(0x268)]=0x0,this[_0x35cb38(0x427)]=0x0,this[_0x35cb38(0x6dc)]=0x0,this[_0x35cb38(0x1f3)]=0xff,this[_0x35cb38(0x619)]=0x0,this[_0x35cb38(0x868)]=0x0,this[_0x35cb38(0x545)]=_0x35cb38(0x837),this[_0x35cb38(0x9ca)]=0x0,this[_0x35cb38(0x779)]=0x0,this[_0x35cb38(0x7c1)]=0x0,this['_angleWholeDuration']=0x0,this[_0x35cb38(0x32b)]=_0x35cb38(0x837),this[_0x35cb38(0x76c)]=!![],this[_0x35cb38(0x531)]=0x0,this[_0x35cb38(0x454)]=0x0,this['_targetSkewX']=0x0,this[_0x35cb38(0x38e)]=0x0,this[_0x35cb38(0x4aa)]=0x0,this[_0x35cb38(0x320)]=0x0,this[_0x35cb38(0x403)]=_0x35cb38(0x837),this[_0x35cb38(0x84b)]=0x1,this[_0x35cb38(0x7a0)]=0x1,this[_0x35cb38(0x4ba)]=0x1,this['_targetGrowY']=0x1,this[_0x35cb38(0x311)]=0x0,this[_0x35cb38(0x9fb)]=0x0,this[_0x35cb38(0x37e)]=_0x35cb38(0x837),this['_flipScaleX']=0x1;},Sprite_Battler['prototype']['createShadowSprite']=function(){const _0x2a8de0=_0xe55837;this[_0x2a8de0(0x8f9)]=new Sprite(),this[_0x2a8de0(0x8f9)]['bitmap']=ImageManager['loadSystem'](_0x2a8de0(0x79e)),this[_0x2a8de0(0x8f9)][_0x2a8de0(0x881)]['smooth']=VisuMZ[_0x2a8de0(0x278)][_0x2a8de0(0x108)]['Actor']['SmoothImage'],this['_shadowSprite']['anchor']['x']=0.5,this['_shadowSprite'][_0x2a8de0(0x5dc)]['y']=0.5,this[_0x2a8de0(0x8f9)]['y']=-0x2,this[_0x2a8de0(0x8f9)][_0x2a8de0(0x331)]=![],this[_0x2a8de0(0x9e6)](this[_0x2a8de0(0x8f9)]);},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x576)]=function(){const _0x29e1b7=_0xe55837;this[_0x29e1b7(0x79d)]=new Sprite(),this[_0x29e1b7(0x79d)][_0x29e1b7(0x5dc)]['x']=0.5,this[_0x29e1b7(0x79d)][_0x29e1b7(0x5dc)]['y']=0.5,this[_0x29e1b7(0x9e6)](this['_distortionSprite']);},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x606)]=function(){const _0x170423=_0xe55837;if(!this[_0x170423(0x79d)])return;if(this[_0x170423(0x8f9)]){const _0x15cdaa=this[_0x170423(0x2e5)](this[_0x170423(0x79d)]);this[_0x170423(0x16b)](this[_0x170423(0x8f9)],_0x15cdaa),this[_0x170423(0x23f)]();}if(this[_0x170423(0x8ec)]){if('CQdLo'!==_0x170423(0x12c))this[_0x170423(0x79d)][_0x170423(0x9e6)](this[_0x170423(0x8ec)]);else{function _0xb177fe(){const _0x59e2e1=_0x170423;return this[_0x59e2e1(0x930)](_0x2389a);}}}this[_0x170423(0x51f)]&&this[_0x170423(0x79d)][_0x170423(0x9e6)](this[_0x170423(0x51f)]);if(this[_0x170423(0x174)]){if(_0x170423(0x82e)===_0x170423(0x335)){function _0x12a292(){const _0x5064c7=_0x170423;return!_0x3d41e9[_0x5064c7(0x22a)]()&&this['_battler']&&this[_0x5064c7(0x341)][_0x5064c7(0x107)]();}}else this[_0x170423(0x79d)][_0x170423(0x9e6)](this['_mainSprite']);}this[_0x170423(0x300)]&&this['_distortionSprite']['addChild'](this[_0x170423(0x300)]);},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x23f)]=function(){const _0x33a0e0=_0xe55837;if(!this[_0x33a0e0(0x8f9)])return;if(this[_0x33a0e0(0x341)]&&this[_0x33a0e0(0x341)][_0x33a0e0(0x925)]()){const _0x3dd5a7=this[_0x33a0e0(0x8f9)][_0x33a0e0(0x881)];this['_shadowSprite'][_0x33a0e0(0xb9)](0x0,0x0,_0x3dd5a7[_0x33a0e0(0x124)],_0x3dd5a7[_0x33a0e0(0x97c)]);}else this[_0x33a0e0(0x8f9)]['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype']['damageContainer']=function(){const _0x555a58=_0xe55837;if(SceneManager['isSceneBattle']())return SceneManager[_0x555a58(0x1c8)][_0x555a58(0x54d)]['_damageContainer'];else{if(_0x555a58(0x447)!=='dMGjp')return this['parent'];else{function _0x40ea9b(){const _0x2b3f7a=_0x555a58;_0x2663ba['prototype'][_0x2b3f7a(0x457)][_0x2b3f7a(0x782)](this),this[_0x2b3f7a(0x8fa)]();}}}},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x63e)]=function(_0x564f20,_0x382117){const _0x14dd73=_0xe55837;if(!this['_battler'][_0x14dd73(0x5f2)]())return;const _0x466fd1=VisuMZ['BattleCore'][_0x14dd73(0x108)]['Damage'],_0x3825c9=new Sprite_Damage();_0x3825c9[_0x14dd73(0x569)]=_0x466fd1[_0x14dd73(0x6eb)],this[_0x14dd73(0x888)](_0x3825c9),_0x3825c9[_0x14dd73(0x63e)](_0x564f20,_0x382117),this['addDamageSprite'](_0x3825c9);},Sprite_Battler['prototype'][_0xe55837(0x56c)]=function(_0x56f642,_0x28ce46,_0x4929f6){const _0x398c21=_0xe55837;if(!this[_0x398c21(0x341)][_0x398c21(0x5f2)]())return;const _0x17e27f=VisuMZ['BattleCore'][_0x398c21(0x108)][_0x398c21(0x9fc)],_0x42670b=new Sprite_Damage();_0x42670b[_0x398c21(0x569)]=_0x17e27f[_0x398c21(0x6eb)],this['sortDamageSprites'](_0x42670b),_0x42670b['setupIconTextPopup'](_0x56f642,_0x28ce46,_0x4929f6),this[_0x398c21(0x9a)](_0x42670b);},Sprite_Battler['prototype'][_0xe55837(0x1fb)]=function(){const _0x30502b=_0xe55837;if(!this['_battler'][_0x30502b(0x8b7)]())return;while(this['_battler']['isDamagePopupRequested']()){if('ebFFQ'!=='oQlIK')this[_0x30502b(0x341)][_0x30502b(0x5f2)]()&&this[_0x30502b(0x596)]();else{function _0x257a7b(){const _0x2e0641=_0x30502b;if(_0x59e3ae['isActor']()&&!_0x47e2bd[_0x2e0641(0x22a)]())return;const _0x30264f=_0x3540c5['battler']();if(_0x30264f&&_0xc34802[_0x2e0641(0x107)]())this[_0x2e0641(0x3c0)]['addChild'](_0x30264f);}}}this[_0x30502b(0x341)]['clearDamagePopup'](),this['_battler']['clearResult']();},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x596)]=function(){const _0x4df584=_0xe55837,_0x448652=VisuMZ[_0x4df584(0x278)][_0x4df584(0x108)][_0x4df584(0x9fc)],_0x1a4ac8=new Sprite_Damage();_0x1a4ac8[_0x4df584(0x569)]=_0x448652[_0x4df584(0x6eb)],this[_0x4df584(0x888)](_0x1a4ac8),_0x1a4ac8[_0x4df584(0x62b)](this[_0x4df584(0x341)]),_0x1a4ac8[_0x4df584(0x6c5)](this['_battler']),this[_0x4df584(0x9a)](_0x1a4ac8);},Sprite_Battler[_0xe55837(0x392)]['addDamageSprite']=function(_0x40c1f6){const _0x242496=_0xe55837;this[_0x242496(0xa1f)]['push'](_0x40c1f6);if(this[_0x242496(0x6df)]())SceneManager['_scene'][_0x242496(0x418)]['addDamageSprite'](_0x40c1f6,this[_0x242496(0x341)]);else{if(_0x242496(0x744)===_0x242496(0x744)){this[_0x242496(0x27d)]()[_0x242496(0x9e6)](_0x40c1f6);if(SceneManager[_0x242496(0x200)]())_0x40c1f6[_0x242496(0x23d)]['x']=-0x1;}else{function _0x1b77ce(){const _0x3d2860=_0x242496;this[_0x3d2860(0x28f)]={},_0x5b630a[_0x3d2860(0x278)][_0x3d2860(0x7d7)][_0x3d2860(0x782)](this);}}}},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x6df)]=function(){const _0x5419f8=_0xe55837;return!$gameSystem['isSideView']()&&this[_0x5419f8(0x341)]&&this[_0x5419f8(0x341)][_0x5419f8(0x107)]();},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x888)]=function(_0x9a1335){const _0x69f979=_0xe55837,_0x39a481=VisuMZ[_0x69f979(0x278)][_0x69f979(0x108)]['Damage'],_0x470b16=SceneManager[_0x69f979(0x200)]()?-0x1:0x1;let _0x49cde2=this['x'],_0x563283=this['y'];const _0x5a407d=SceneManager[_0x69f979(0x1c8)]['_statusWindow'];if(_0x5a407d&&this[_0x69f979(0x44b)]===_0x5a407d){_0x49cde2+=_0x5a407d['x']-this[_0x69f979(0x6fd)]();const _0x4ef947=_0x5a407d[_0x69f979(0x4ac)]()*0x3/0x4;_0x563283=_0x5a407d['y']+_0x4ef947,_0x563283=Math[_0x69f979(0x6a9)](_0x563283,_0x5a407d['y']+this['y']-this['height']+_0x4ef947);}_0x9a1335['x']=Math[_0x69f979(0x498)](_0x49cde2+this[_0x69f979(0x6fd)]()*_0x470b16),_0x9a1335['y']=Math['round'](_0x563283+this[_0x69f979(0x9c9)]());if(_0x39a481[_0x69f979(0xa2a)]){if(_0x69f979(0x1ac)!==_0x69f979(0xc9))for(const _0x3920f0 of this[_0x69f979(0xa1f)]){_0x3920f0['x']+=_0x39a481[_0x69f979(0x9ec)]*_0x470b16,_0x3920f0['y']+=_0x39a481[_0x69f979(0x16f)];}else{function _0x2194c5(){const _0x2e47c2=_0x69f979;return _0x4a9c36[_0x2e47c2(0x5c7)];}}}else{const _0x24f186=this['_damages'][this[_0x69f979(0xa1f)][_0x69f979(0x4c5)]-0x1];if(_0x24f186){if(_0x69f979(0xff)!==_0x69f979(0x459))_0x9a1335['x']=_0x24f186['x']+_0x39a481['PopupShiftX']*_0x470b16,_0x9a1335['y']=_0x24f186['y']+_0x39a481[_0x69f979(0x16f)];else{function _0x2cf41d(){return this['_angleDuration']>0x0;}}}}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x9e4)]=Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x6fd)],Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x6fd)]=function(){const _0x18ed0d=_0xe55837;let _0x5ab970=VisuMZ['BattleCore'][_0x18ed0d(0x9e4)][_0x18ed0d(0x782)](this),_0x1523ec=VisuMZ[_0x18ed0d(0x278)][_0x18ed0d(0x108)][_0x18ed0d(0x9fc)][_0x18ed0d(0x4ad)]||0x0;return Math['round'](_0x5ab970+_0x1523ec);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x5a2)]=Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x9c9)],Sprite_Battler['prototype'][_0xe55837(0x9c9)]=function(){const _0x20f67d=_0xe55837;let _0x51f2bc=VisuMZ[_0x20f67d(0x278)]['Sprite_Battler_damageOffsetY']['call'](this);switch(VisuMZ['BattleCore'][_0x20f67d(0x108)][_0x20f67d(0x9fc)][_0x20f67d(0x1b8)]){case'head':_0x51f2bc-=this[_0x20f67d(0x97c)]*this[_0x20f67d(0x23d)]['y'];break;case _0x20f67d(0x89d):_0x51f2bc-=this[_0x20f67d(0x97c)]*this[_0x20f67d(0x23d)]['y']*0.5;break;}let _0x25b314=VisuMZ[_0x20f67d(0x278)]['Settings'][_0x20f67d(0x9fc)][_0x20f67d(0x2bf)]||0x0;return Math['round'](_0x51f2bc+_0x25b314);},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x6fd)]=function(){const _0x5a14ba=_0xe55837;return Sprite_Battler[_0x5a14ba(0x392)]['damageOffsetX']['call'](this);},Sprite_Actor['prototype'][_0xe55837(0x9c9)]=function(){const _0x284f8e=_0xe55837;return Sprite_Battler['prototype']['damageOffsetY'][_0x284f8e(0x782)](this);},Sprite_Battler[_0xe55837(0x392)]['destroyDamageSprite']=function(_0x2376f6){const _0x5b820b=_0xe55837;if(this[_0x5b820b(0x6df)]()){if(_0x5b820b(0x557)!==_0x5b820b(0x557)){function _0x3b0f8e(){const _0x593c41=_0x5b820b;this[_0x593c41(0x122)]();}}else SceneManager['_scene']['_statusWindow'][_0x5b820b(0x381)](_0x2376f6);}else this[_0x5b820b(0x27d)]()[_0x5b820b(0x8c5)](_0x2376f6),this['_damages'][_0x5b820b(0x1ad)](_0x2376f6),_0x2376f6[_0x5b820b(0x233)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x3b5)]=Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x291)],Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x291)]=function(_0x20a7a5,_0x4f8c1f){const _0x18e8dd=_0xe55837,_0x572e3e=VisuMZ[_0x18e8dd(0x278)][_0x18e8dd(0x108)];if(this[_0x18e8dd(0x78e)]===Sprite_Actor)_0x20a7a5+=_0x572e3e['Actor'][_0x18e8dd(0x667)]||0x0,_0x4f8c1f+=_0x572e3e[_0x18e8dd(0x948)]['OffsetY']||0x0;else this['constructor']===Sprite_Enemy&&(_0x20a7a5+=_0x572e3e[_0x18e8dd(0x214)][_0x18e8dd(0x667)]||0x0,_0x4f8c1f+=_0x572e3e['Enemy'][_0x18e8dd(0x49e)]||0x0);VisuMZ[_0x18e8dd(0x278)][_0x18e8dd(0x3b5)][_0x18e8dd(0x782)](this,_0x20a7a5,_0x4f8c1f);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x7b2)]=Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x59f)],Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x59f)]=function(){const _0x4bee67=_0xe55837;VisuMZ[_0x4bee67(0x278)]['Sprite_Battler_update'][_0x4bee67(0x782)](this),!this[_0x4bee67(0x341)]&&this[_0x4bee67(0x615)]&&(this['_hpGaugeSprite']['visible']=![]);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x589)]=Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x38b)],Sprite_Battler['prototype'][_0xe55837(0x38b)]=function(){const _0x15d295=_0xe55837;this[_0x15d295(0x6f9)](),this[_0x15d295(0x816)](),this[_0x15d295(0x712)](),this[_0x15d295(0x5b1)](),this[_0x15d295(0x607)](),VisuMZ[_0x15d295(0x278)][_0x15d295(0x589)][_0x15d295(0x782)](this);if(this[_0x15d295(0x78e)]===Sprite_Enemy)this[_0x15d295(0x556)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x3ce)]=Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x9d4)],Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x9d4)]=function(){const _0x93a436=_0xe55837;VisuMZ[_0x93a436(0x278)]['Sprite_Battler_updatePosition'][_0x93a436(0x782)](this),this[_0x93a436(0x969)](),this[_0x93a436(0x592)]();},Sprite_Battler['prototype']['updatePositionBattleCore']=function(){const _0x30d0ed=_0xe55837;this[_0x30d0ed(0xa0)]=this['x'],this[_0x30d0ed(0x937)]=this['y'],this[_0x30d0ed(0xda)](),this[_0x30d0ed(0x891)](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x30d0ed(0x287)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x30d0ed(0x639)](this['y']);},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x595)]=function(){let _0x3ec3f7=0x0;return _0x3ec3f7;},Sprite_Battler['prototype'][_0xe55837(0x287)]=function(){const _0x2d6189=_0xe55837;let _0x53f5ba=0x0;if(this[_0x2d6189(0x341)]&&!this[_0x2d6189(0x341)][_0x2d6189(0x156)]()){if(_0x2d6189(0x507)===_0x2d6189(0x507))_0x53f5ba-=this[_0x2d6189(0x8f4)],_0x53f5ba-=this[_0x2d6189(0x9cb)];else{function _0x4d60dd(){return!![];}}}if(this[_0x2d6189(0x79d)]&&this[_0x2d6189(0x78e)]!==Sprite_SvEnemy){const _0x3ad76f=this[_0x2d6189(0x79d)]['scale']['y'];_0x53f5ba-=(_0x3ad76f-0x1)*this[_0x2d6189(0x97c)];}return _0x53f5ba;},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x5b1)]=function(){const _0x384775=_0xe55837,_0x1f5227=this[_0x384775(0x341)]&&this['_battler']['isBattlerFlipped']();this[_0x384775(0x9e5)]=(_0x1f5227?-0x1:0x1)*Math[_0x384775(0x474)](this[_0x384775(0x23d)]['x']);},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x684)]=function(_0x272eba,_0x276723,_0x11c4b8){const _0x1ef333=_0xe55837;if(!this['canMove']())return;if(this[_0x1ef333(0xe9)]===_0x272eba)return;this['_targetFloatHeight']=_0x272eba,this['_floatDuration']=_0x276723,this['_floatWholeDuration']=_0x276723,this[_0x1ef333(0x11f)]=_0x11c4b8||_0x1ef333(0x837);if(_0x276723<=0x0)this[_0x1ef333(0x8f4)]=_0x272eba;},Sprite_Battler['prototype']['updateFloat']=function(){const _0x20f828=_0xe55837;if(this[_0x20f828(0x991)]<=0x0)return;const _0x18e44e=this[_0x20f828(0x991)],_0x3a9c06=this[_0x20f828(0x391)],_0x31f4a9=this['_floatEasing'];if(Imported['VisuMZ_0_CoreEngine']){if(_0x20f828(0xef)==='aMuml')this['_floatHeight']=this['applyEasing'](this[_0x20f828(0x8f4)],this[_0x20f828(0xe9)],_0x18e44e,_0x3a9c06,_0x31f4a9);else{function _0x3fc817(){return![];}}}else this['_floatHeight']=(this[_0x20f828(0x8f4)]*(_0x18e44e-0x1)+this[_0x20f828(0xe9)])/_0x18e44e;this[_0x20f828(0x991)]--;if(this[_0x20f828(0x991)]<=0x0)this['onFloatEnd']();},Sprite_Battler[_0xe55837(0x392)]['onFloatEnd']=function(){const _0x14fcf3=_0xe55837;this[_0x14fcf3(0x8f4)]=this[_0x14fcf3(0xe9)];},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0xa5c)]=function(){const _0x1924b8=_0xe55837;return this[_0x1924b8(0x991)]>0x0;},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x5fe)]=function(_0x4320e7,_0x198bdb){const _0xc88312=_0xe55837;if(!this[_0xc88312(0x732)]())return;if(_0x198bdb<=0x0)return;this[_0xc88312(0x268)]=_0x4320e7,this[_0xc88312(0x427)]=_0x198bdb,this[_0xc88312(0x6dc)]=_0x198bdb;},Sprite_Battler['prototype'][_0xe55837(0x891)]=function(){const _0x49d506=_0xe55837;if(this[_0x49d506(0x427)]<=0x0)return;const _0x546864=this['_jumpWholeDuration']-this[_0x49d506(0x427)],_0x466af1=this[_0x49d506(0x6dc)]/0x2,_0x54bc96=this[_0x49d506(0x268)],_0x131ab6=-_0x54bc96/Math['pow'](_0x466af1,0x2);this['_jumpHeight']=_0x131ab6*Math[_0x49d506(0x1b6)](_0x546864-_0x466af1,0x2)+_0x54bc96,this[_0x49d506(0x427)]--;if(this[_0x49d506(0x427)]<=0x0)return this[_0x49d506(0x3ac)]();},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x3ac)]=function(){const _0x1eb442=_0xe55837;this[_0x1eb442(0x9cb)]=0x0;},Sprite_Battler['prototype'][_0xe55837(0x73e)]=function(){return this['_jumpDuration']>0x0;},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x6c0)]=function(_0x143cf1,_0x3a94d4,_0x4b40f9){const _0x3068ff=_0xe55837;if(this[_0x3068ff(0x1f3)]===_0x143cf1)return;this[_0x3068ff(0x1f3)]=_0x143cf1,this[_0x3068ff(0x619)]=_0x3a94d4,this[_0x3068ff(0x868)]=_0x3a94d4,this[_0x3068ff(0x545)]=_0x4b40f9||_0x3068ff(0x837);if(_0x3a94d4<=0x0)this['opacity']=_0x143cf1;},Sprite_Battler['prototype']['updateOpacity']=function(){const _0x14f5ae=_0xe55837;if(this['_opacityDuration']<=0x0)return;const _0x5790a3=this[_0x14f5ae(0x619)],_0x30d06f=this[_0x14f5ae(0x868)],_0x363916=this['_opacityEasing'];Imported[_0x14f5ae(0x209)]?this[_0x14f5ae(0x863)]=this[_0x14f5ae(0x82d)](this[_0x14f5ae(0x863)],this[_0x14f5ae(0x1f3)],_0x5790a3,_0x30d06f,_0x363916):this[_0x14f5ae(0x863)]=(this['opacity']*(_0x5790a3-0x1)+this[_0x14f5ae(0x1f3)])/_0x5790a3;this[_0x14f5ae(0x619)]--;if(this[_0x14f5ae(0x619)]<=0x0)this[_0x14f5ae(0x86a)]();},Sprite_Battler[_0xe55837(0x392)]['onOpacityEnd']=function(){this['opacity']=this['_targetOpacity'];},Sprite_Battler[_0xe55837(0x392)]['isChangingOpacity']=function(){return this['_opacityDuration']>0x0;},Sprite_Battler['prototype'][_0xe55837(0x556)]=function(){const _0x2df67b=_0xe55837;this[_0x2df67b(0x8f9)]['visible']=this[_0x2df67b(0x341)][_0x2df67b(0x674)](),this[_0x2df67b(0x188)]();},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x188)]=function(){const _0xf0a19a=_0xe55837;if(!this[_0xf0a19a(0x8f9)])return;this[_0xf0a19a(0x8f9)]['y']=this[_0xf0a19a(0x937)]-this['y']-0x2;},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x731)]=function(){const _0xec79c8=_0xe55837;if(!this['_battler'])return;this[_0xec79c8(0x78d)]=this['_battler'][_0xec79c8(0x5e2)]();},Game_BattlerBase['prototype'][_0xe55837(0x5e2)]=function(){const _0x36696b=_0xe55837,_0x5b28bc=this[_0x36696b(0x107)]()?this[_0x36696b(0x3b1)]():this[_0x36696b(0x67b)]();if(_0x5b28bc){const _0x5269b7=_0x5b28bc['note'];if(_0x5269b7[_0x36696b(0x1c3)](/<SIDEVIEW SHADOW SCALE:[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x5269b7['match'](/<SIDEVIEW SHADOW SCALE:[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x6f9)]=function(){const _0x388cf9=_0xe55837;if(this[_0x388cf9(0x78e)]===Sprite_SvEnemy)return;this[_0x388cf9(0x936)](),this[_0x388cf9(0x72f)]();},Sprite_Battler[_0xe55837(0x392)]['finalizeScale']=function(){const _0x20f8c8=_0xe55837,_0x4fb90c=this[_0x20f8c8(0x79d)];_0x4fb90c&&(_0x4fb90c[_0x20f8c8(0x23d)]['x']=this['mainSpriteScaleX'](),_0x4fb90c['scale']['y']=this[_0x20f8c8(0x722)]());},Sprite_Battler['prototype'][_0xe55837(0x6ab)]=function(){const _0x3f6585=_0xe55837;let _0x453d9f=0x1;return _0x453d9f*=this['_flipScaleX'],_0x453d9f*=this[_0x3f6585(0x84b)],_0x453d9f;},Sprite_Battler[_0xe55837(0x392)]['mainSpriteScaleY']=function(){const _0x5dbdcb=_0xe55837;return 0x1*this[_0x5dbdcb(0x7a0)];},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x56b)]=function(){const _0x3e134a=_0xe55837;return this[_0x3e134a(0x124)]*this['mainSpriteScaleX']();},Sprite_Battler['prototype'][_0xe55837(0x202)]=function(){const _0x58da5d=_0xe55837;return this[_0x58da5d(0x97c)]*this[_0x58da5d(0x722)]();},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x548)]=function(_0x1ba0f6,_0xfbdff6,_0x410329,_0x3072ab){const _0x246174=_0xe55837;if(!this[_0x246174(0x732)]())return;if(!this[_0x246174(0x79d)])return;if(this[_0x246174(0x4ba)]===_0x1ba0f6&&this[_0x246174(0x5de)]===_0xfbdff6)return;this[_0x246174(0x4ba)]=_0x1ba0f6,this[_0x246174(0x5de)]=_0xfbdff6,this[_0x246174(0x311)]=_0x410329,this[_0x246174(0x9fb)]=_0x410329,this[_0x246174(0x37e)]=_0x3072ab||_0x246174(0x837);if(_0x410329<=0x0){if(_0x246174(0x3ec)==='eognv'){function _0x4998cd(){const _0x36e709=_0x246174;return this[_0x36e709(0x28f)]=this[_0x36e709(0x28f)]||{},this[_0x36e709(0x28f)][_0x8f8e73]!==_0x552b01;}}else this[_0x246174(0x84b)]=this[_0x246174(0x4ba)],this[_0x246174(0x7a0)]=this['_targetGrowY'];}},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x936)]=function(){const _0x1b2eb7=_0xe55837;if(this[_0x1b2eb7(0x311)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x146178=this[_0x1b2eb7(0x311)],_0x231aa5=this[_0x1b2eb7(0x9fb)],_0x5ded9d=this[_0x1b2eb7(0x37e)];Imported[_0x1b2eb7(0x209)]?(this[_0x1b2eb7(0x84b)]=this[_0x1b2eb7(0x82d)](this['_growX'],this[_0x1b2eb7(0x4ba)],_0x146178,_0x231aa5,_0x5ded9d),this['_growY']=this['applyEasing'](this[_0x1b2eb7(0x7a0)],this[_0x1b2eb7(0x5de)],_0x146178,_0x231aa5,_0x5ded9d)):(this[_0x1b2eb7(0x84b)]=(this[_0x1b2eb7(0x84b)]*(_0x146178-0x1)+this[_0x1b2eb7(0x4ba)])/_0x146178,this[_0x1b2eb7(0x7a0)]=(this[_0x1b2eb7(0x7a0)]*(_0x146178-0x1)+this[_0x1b2eb7(0x5de)])/_0x146178);this[_0x1b2eb7(0x311)]--;if(this[_0x1b2eb7(0x311)]<=0x0)this[_0x1b2eb7(0x54e)]();},Sprite_Battler[_0xe55837(0x392)]['onGrowEnd']=function(){const _0x158f98=_0xe55837;this[_0x158f98(0x84b)]=this[_0x158f98(0x4ba)],this[_0x158f98(0x7a0)]=this[_0x158f98(0x5de)];},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x7ca)]=function(){const _0x380e2c=_0xe55837;return this[_0x380e2c(0x311)]>0x0;},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x47d)]=function(_0x30662f,_0x36e84f,_0x3f9385,_0x2df8f9){const _0x43c4ac=_0xe55837;if(!this['canMove']())return;if(!this[_0x43c4ac(0x79d)])return;if(this['_targetSkewX']===_0x30662f&&this[_0x43c4ac(0x38e)]===_0x36e84f)return;this[_0x43c4ac(0x377)]=_0x30662f,this[_0x43c4ac(0x38e)]=_0x36e84f,this[_0x43c4ac(0x4aa)]=_0x3f9385,this[_0x43c4ac(0x320)]=_0x3f9385,this[_0x43c4ac(0x403)]=_0x2df8f9||'Linear',_0x3f9385<=0x0&&(this[_0x43c4ac(0x79d)][_0x43c4ac(0x721)]['x']=this[_0x43c4ac(0x377)],this['_distortionSprite'][_0x43c4ac(0x721)]['y']=this[_0x43c4ac(0x38e)]);},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x816)]=function(){const _0x3b4348=_0xe55837;if(this[_0x3b4348(0x4aa)]<=0x0)return;if(!this[_0x3b4348(0x79d)])return;const _0x3d1d3f=this[_0x3b4348(0x4aa)],_0x366fe2=this[_0x3b4348(0x320)],_0x1fed01=this[_0x3b4348(0x403)],_0x239127=this[_0x3b4348(0x79d)];if(Imported[_0x3b4348(0x209)])_0x239127[_0x3b4348(0x721)]['x']=this['applyEasing'](_0x239127['skew']['x'],this['_targetSkewX'],_0x3d1d3f,_0x366fe2,_0x1fed01),_0x239127['skew']['y']=this['applyEasing'](_0x239127['skew']['y'],this[_0x3b4348(0x38e)],_0x3d1d3f,_0x366fe2,_0x1fed01);else{if('mZekT'!==_0x3b4348(0x828)){function _0x5649eb(){const _0x44e29f=_0x3b4348;if(_0x316712[_0x44e29f(0x261)])return;_0x48279d[_0x44e29f(0x278)][_0x44e29f(0xf9)]['call'](this);}}else _0x239127[_0x3b4348(0x721)]['x']=(_0x239127[_0x3b4348(0x721)]['x']*(_0x3d1d3f-0x1)+this['_targetSkewX'])/_0x3d1d3f,_0x239127['skew']['y']=(_0x239127[_0x3b4348(0x721)]['y']*(_0x3d1d3f-0x1)+this[_0x3b4348(0x38e)])/_0x3d1d3f;}this[_0x3b4348(0x4aa)]--;if(this[_0x3b4348(0x4aa)]<=0x0)this[_0x3b4348(0xa5e)]();},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0xa5e)]=function(){const _0x471305=_0xe55837;this['_distortionSprite'][_0x471305(0x721)]['x']=this['_targetSkewX'],this[_0x471305(0x79d)][_0x471305(0x721)]['y']=this[_0x471305(0x38e)];},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x862)]=function(){const _0x196c4f=_0xe55837;return this[_0x196c4f(0x4aa)]>0x0;},Sprite_Battler['prototype']['startSpin']=function(_0x468b09,_0x5ce526,_0x2c0782,_0x267387){const _0x1641a8=_0xe55837;if(!this['canMove']())return;if(!this[_0x1641a8(0x79d)])return;if(this[_0x1641a8(0x779)]===_0x468b09)return;this[_0x1641a8(0x779)]=_0x468b09,this[_0x1641a8(0x7c1)]=_0x5ce526,this[_0x1641a8(0xd0)]=_0x5ce526,this[_0x1641a8(0x32b)]=_0x2c0782||_0x1641a8(0x837),this[_0x1641a8(0x76c)]=_0x267387,this['_angleRevertOnFinish']===undefined&&(this['_angleRevertOnFinish']=!![]),_0x5ce526<=0x0&&(this[_0x1641a8(0x9ca)]=_0x468b09,this['_angleRevertOnFinish']&&(this[_0x1641a8(0x779)]=0x0,this['_currentAngle']=0x0));},Sprite_Battler['prototype'][_0xe55837(0x712)]=function(){this['updateAngleCalculations'](),this['applyAngleChange']();},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x8ac)]=function(){const _0x315d42=_0xe55837;if(this['_angleDuration']<=0x0)return;const _0x28fe20=this[_0x315d42(0x7c1)],_0x1e2f25=this['_angleWholeDuration'],_0xbcb94c=this['_angleEasing'];if(Imported['VisuMZ_0_CoreEngine']){if('zhUXf'===_0x315d42(0x692)){function _0x2bede2(){const _0x279201=_0x315d42;_0x527c9[_0x279201(0x392)][_0x279201(0xcc)][_0x279201(0x782)](this),this[_0x279201(0x761)]();}}else this[_0x315d42(0x9ca)]=this[_0x315d42(0x82d)](this[_0x315d42(0x9ca)],this['_targetAngle'],_0x28fe20,_0x1e2f25,_0xbcb94c);}else this[_0x315d42(0x9ca)]=(this[_0x315d42(0x9ca)]*(_0x28fe20-0x1)+this[_0x315d42(0x779)])/_0x28fe20;this[_0x315d42(0x7c1)]--;if(this[_0x315d42(0x7c1)]<=0x0)this[_0x315d42(0x8a5)]();},Sprite_Battler['prototype'][_0xe55837(0x8a5)]=function(){const _0x55754e=_0xe55837;this[_0x55754e(0x9ca)]=this[_0x55754e(0x779)];if(this[_0x55754e(0x76c)]){if(_0x55754e(0x258)===_0x55754e(0xa3b)){function _0xc74918(){_0x4a25ae+=_0x30f616,_0x2984b1+=_0x16aeb6;}}else this[_0x55754e(0x779)]=0x0,this[_0x55754e(0x9ca)]=0x0;}},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x4fb)]=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0xe55837(0x392)]['applyAngleChange']=function(){const _0x59ecd8=_0xe55837;if(!this[_0x59ecd8(0x79d)])return;const _0x449c92=this[_0x59ecd8(0x9ca)],_0x12a8a7=this[_0x59ecd8(0x23d)]['x'],_0x44109b=this[_0x59ecd8(0x341)]['isActor']()?-0x1:0x1;this[_0x59ecd8(0x79d)][_0x59ecd8(0xeb)]=_0x449c92*_0x12a8a7*_0x44109b;const _0x1f771e=this[_0x59ecd8(0x79d)][_0x59ecd8(0x23d)]['y'];this[_0x59ecd8(0x79d)]['y']=this[_0x59ecd8(0x97c)]*-0.5*(0x2-_0x1f771e);const _0x2b0e5a=[this[_0x59ecd8(0x174)],this[_0x59ecd8(0x8ec)],this['_dragonbonesSpriteContainer']];for(const _0x3fe451 of _0x2b0e5a){if('VpRnB'!==_0x59ecd8(0x47a)){function _0x224559(){const _0x5a21f9=_0x59ecd8;_0x52ead4[_0x5a21f9(0x278)][_0x5a21f9(0x6fe)][_0x5a21f9(0x782)](this);}}else{if(!_0x3fe451)continue;_0x3fe451['y']=this[_0x59ecd8(0x97c)]*0.5;}}if(this['_shadowSprite']){if(_0x59ecd8(0x2f6)!=='cpTmR'){function _0x30bc8c(){const _0x392575=_0x59ecd8;if(!_0x453e77[_0x392575(0x22b)]()){const _0x19a476=_0x2ca181[_0x392575(0x3fb)](_0x477476['x'],_0x19d10e['y']);if(this[_0x392575(0xf7)]&&this[_0x392575(0x195)][_0x19a476])return this[_0x392575(0x195)][_0x19a476];}return _0x10558b[_0x392575(0x278)][_0x392575(0xdb)][_0x392575(0x782)](this);}}else this[_0x59ecd8(0x78d)]=this[_0x59ecd8(0x78d)]??0x1,this[_0x59ecd8(0x8f9)][_0x59ecd8(0x23d)]['x']=this[_0x59ecd8(0x79d)][_0x59ecd8(0x23d)]['x']*this[_0x59ecd8(0x78d)],this[_0x59ecd8(0x8f9)][_0x59ecd8(0x23d)]['y']=this[_0x59ecd8(0x79d)][_0x59ecd8(0x23d)]['y']*this['_shadowScale'];}},VisuMZ[_0xe55837(0x278)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x469)],Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x469)]=function(){const _0x1a5eaf=_0xe55837;VisuMZ['BattleCore']['Sprite_Actor_createStateSprite'][_0x1a5eaf(0x782)](this),VisuMZ[_0x1a5eaf(0x278)][_0x1a5eaf(0x108)]['HpGauge'][_0x1a5eaf(0x8f2)]&&this[_0x1a5eaf(0x90d)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x2a2)]=Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x229)],Sprite_Enemy['prototype'][_0xe55837(0x229)]=function(){const _0x92e58=_0xe55837;VisuMZ['BattleCore'][_0x92e58(0x108)][_0x92e58(0x670)][_0x92e58(0x8b4)]&&this[_0x92e58(0x90d)](),VisuMZ[_0x92e58(0x278)][_0x92e58(0x2a2)][_0x92e58(0x782)](this);},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x90d)]=function(){const _0x99818=_0xe55837;if(!ConfigManager['visualHpGauge'])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x3c0cce=VisuMZ['BattleCore'][_0x99818(0x108)]['HpGauge'],_0x5cf062=new Sprite_HpGauge();_0x5cf062[_0x99818(0x5dc)]['x']=_0x3c0cce[_0x99818(0x637)],_0x5cf062[_0x99818(0x5dc)]['y']=_0x3c0cce[_0x99818(0x98b)],_0x5cf062[_0x99818(0x23d)]['x']=_0x5cf062[_0x99818(0x23d)]['y']=_0x3c0cce[_0x99818(0x864)],this[_0x99818(0x615)]=_0x5cf062,this['addChild'](this[_0x99818(0x615)]);},VisuMZ[_0xe55837(0x278)]['Sprite_Battler_setBattler']=Sprite_Battler[_0xe55837(0x392)]['setBattler'],Sprite_Battler['prototype'][_0xe55837(0x796)]=function(_0x5b7d86){const _0x1697f9=_0xe55837,_0x58283c=this[_0x1697f9(0x341)];VisuMZ['BattleCore'][_0x1697f9(0xa44)][_0x1697f9(0x782)](this,_0x5b7d86),this[_0x1697f9(0x521)](_0x5b7d86);if(_0x58283c!==_0x5b7d86)this[_0x1697f9(0x731)]();},Sprite_Battler['prototype'][_0xe55837(0x521)]=function(_0x58e28b){const _0x8a5238=_0xe55837;if(!_0x58e28b)return;if(!this[_0x8a5238(0x615)])return;if(_0x58e28b[_0x8a5238(0x107)]()){}else{if(_0x58e28b[_0x8a5238(0xa0a)]()){if(this[_0x8a5238(0x78e)]===Sprite_SvEnemy&&!_0x58e28b[_0x8a5238(0x674)]())return;}}this['_hpGaugeSprite'][_0x8a5238(0x62b)](_0x58e28b,'hp');},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x607)]=function(){const _0x4fbf7e=_0xe55837;if(!this['_battler'])return;if(!this['_hpGaugeSprite'])return;const _0x3b2cd1=VisuMZ[_0x4fbf7e(0x278)][_0x4fbf7e(0x108)][_0x4fbf7e(0x670)],_0x34355d=this[_0x4fbf7e(0x615)];_0x34355d[_0x4fbf7e(0x331)]=this[_0x4fbf7e(0x45b)]();const _0x3b079b=_0x3b2cd1['OffsetX'],_0x5d9aac=_0x3b2cd1['OffsetY'];_0x34355d['x']=_0x3b079b,_0x34355d['x']+=this['_battler'][_0x4fbf7e(0x1bc)](),_0x34355d['y']=-this['height']+_0x5d9aac,_0x34355d['y']+=this[_0x4fbf7e(0x341)][_0x4fbf7e(0x8a1)]();},Sprite_Battler[_0xe55837(0x392)]['isVisualHpGaugeDisplayed']=function(){const _0x355d34=_0xe55837;if(!this[_0x355d34(0x341)])return![];if(this[_0x355d34(0x341)][_0x355d34(0x107)]())return!![];const _0x137862=this[_0x355d34(0x341)]['enemy']()[_0x355d34(0x35c)];if(_0x137862[_0x355d34(0x1c3)](/<SHOW HP GAUGE>/i))return!![];if(_0x137862[_0x355d34(0x1c3)](/<HIDE HP GAUGE>/i))return![];const _0x31c869=VisuMZ['BattleCore']['Settings'][_0x355d34(0x670)];if(_0x31c869[_0x355d34(0xf5)]){if(_0x355d34(0x49b)===_0x355d34(0x616)){function _0x1670f0(){const _0x3addad=_0x355d34;_0x189420[_0x3addad(0x4c4)]?this[_0x3addad(0x554)]=_0x3addad(0x528):this[_0x3addad(0x554)]='default';}}else{if(_0x31c869[_0x355d34(0x776)]&&BattleManager['isBattleTest']())return!![];if(this[_0x355d34(0x341)][_0x355d34(0xbd)])return![];return this['_battler'][_0x355d34(0x3bb)]();}}return!![];},VisuMZ[_0xe55837(0x278)][_0xe55837(0x359)]=Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x918)],Sprite_Battler[_0xe55837(0x392)]['isMoving']=function(){const _0x506e42=_0xe55837;if(!this[_0x506e42(0x341)])return![];return VisuMZ[_0x506e42(0x278)]['Sprite_Battler_isMoving']['call'](this);},VisuMZ['BattleCore'][_0xe55837(0x874)]=Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x5fa)],Sprite_Battler[_0xe55837(0x392)]['startMove']=function(_0x338c47,_0x2f95bb,_0x2889d9){const _0x23fc25=_0xe55837;this[_0x23fc25(0x732)]()&&VisuMZ['BattleCore'][_0x23fc25(0x874)][_0x23fc25(0x782)](this,_0x338c47,_0x2f95bb,_0x2889d9);},Sprite_Battler[_0xe55837(0x392)]['canMove']=function(){const _0x5bb076=_0xe55837;if(this[_0x5bb076(0x341)]&&this[_0x5bb076(0x341)][_0x5bb076(0xb6)]())return![];if(this[_0x5bb076(0x341)]&&!this[_0x5bb076(0x341)][_0x5bb076(0x5f9)]())return![];return $gameSystem[_0x5bb076(0x22a)]();},Sprite_Battler[_0xe55837(0x392)]['stepForward']=function(){},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x905)]=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0xe55837(0x392)]['retreat']=function(){},Sprite_Battler[_0xe55837(0x392)][_0xe55837(0x658)]=function(){const _0x19e56d=_0xe55837,_0x5b173d=VisuMZ['BattleCore'][_0x19e56d(0x108)]['Actor'],_0x38739b=this[_0x19e56d(0x341)]&&this[_0x19e56d(0x341)]['isActor']()?0x1:-0x1,_0x3b3d75=this[_0x19e56d(0xa0)]-this[_0x19e56d(0xbf)]+_0x38739b*_0x5b173d['FlinchDistanceX'],_0x445981=this['_baseY']-this[_0x19e56d(0x677)]+_0x38739b*_0x5b173d[_0x19e56d(0x429)],_0x4ac47c=_0x5b173d['FlinchDuration'];this[_0x19e56d(0x5fa)](_0x3b3d75,_0x445981,_0x4ac47c);},VisuMZ[_0xe55837(0x278)]['Sprite_Actor_initMembers']=Sprite_Actor[_0xe55837(0x392)]['initMembers'],Sprite_Actor[_0xe55837(0x392)]['initMembers']=function(){const _0x3ac652=_0xe55837;VisuMZ[_0x3ac652(0x278)][_0x3ac652(0xd5)][_0x3ac652(0x782)](this),this[_0x3ac652(0x606)]();},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0xa38)]=function(){const _0x520310=_0xe55837;return this[_0x520310(0x79d)]||this['_mainSprite']||this;},VisuMZ[_0xe55837(0x278)][_0xe55837(0x3bf)]=Sprite_Actor['prototype'][_0xe55837(0x4cd)],Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x4cd)]=function(){},Sprite_Actor['prototype'][_0xe55837(0x547)]=function(_0x1fc84e){const _0x34a23f=_0xe55837;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x1fc84e)return;if(!_0x1fc84e[_0x34a23f(0x732)]())return;VisuMZ['BattleCore']['Sprite_Actor_moveToStartPosition'][_0x34a23f(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x14b)]=Sprite_Actor[_0xe55837(0x392)]['setActorHome'],Sprite_Actor[_0xe55837(0x392)]['setActorHome']=function(_0x49a10b){const _0xe8b7bf=_0xe55837;if(VisuMZ[_0xe8b7bf(0x278)]['Settings']['Actor'][_0xe8b7bf(0x4f5)]){if(_0xe8b7bf(0x621)!==_0xe8b7bf(0x91c))VisuMZ[_0xe8b7bf(0x278)][_0xe8b7bf(0x108)][_0xe8b7bf(0x948)][_0xe8b7bf(0x4f5)][_0xe8b7bf(0x782)](this,_0x49a10b);else{function _0x216a4d(){const _0x3dbbde=_0xe8b7bf;this[_0x3dbbde(0x174)][_0x3dbbde(0x881)][_0x3dbbde(0x9d1)]!==this[_0x3dbbde(0x341)][_0x3dbbde(0x1c9)]()&&(this[_0x3dbbde(0x174)][_0x3dbbde(0x881)]['smooth']=this['_battler'][_0x3dbbde(0x1c9)]());}}}else VisuMZ[_0xe8b7bf(0x278)][_0xe8b7bf(0x14b)]['call'](this,_0x49a10b);},VisuMZ['BattleCore']['Sprite_Actor_setBattler']=Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x796)],Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x796)]=function(_0x4c157c){const _0xd5c128=_0xe55837;VisuMZ['BattleCore'][_0xd5c128(0x451)][_0xd5c128(0x782)](this,_0x4c157c),this[_0xd5c128(0x2f4)](_0x4c157c);},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x2f4)]=function(_0x3331f4){const _0x54fd10=_0xe55837;if(!_0x3331f4)return;if(!this[_0x54fd10(0x174)])return;this[_0x54fd10(0x174)][_0x54fd10(0x5dc)]['x']=this[_0x54fd10(0x6ed)][_0x54fd10(0x3fe)](),this[_0x54fd10(0x174)][_0x54fd10(0x5dc)]['y']=this['_actor'][_0x54fd10(0x1f9)](),this[_0x54fd10(0x23f)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x632)]=Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x59f)],Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x59f)]=function(){const _0x31b9e9=_0xe55837;VisuMZ[_0x31b9e9(0x278)]['Sprite_Actor_update']['call'](this);if(this[_0x31b9e9(0x6ed)]){if('ZraUA'===_0x31b9e9(0x59e))this[_0x31b9e9(0x1e7)](),this[_0x31b9e9(0x6f7)]();else{function _0x11339a(){const _0x5ca12d=_0x31b9e9;_0xb00599[_0x5ca12d(0x278)][_0x5ca12d(0x82b)]&&_0x150961[_0x5ca12d(0x278)]['ParseSkillNotetags']['call'](this,_0x617ffc),_0x43d98d['BattleCore'][_0x5ca12d(0x681)](_0x59c539),_0x3ce7f7[_0x5ca12d(0x278)][_0x5ca12d(0x565)](_0x57af08);}}}},VisuMZ['BattleCore'][_0xe55837(0x8c7)]=Sprite_Actor['prototype'][_0xe55837(0x6c7)],Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x6c7)]=function(){const _0x117055=_0xe55837;VisuMZ['BattleCore']['Sprite_Actor_updateBitmap'][_0x117055(0x782)](this);if(this[_0x117055(0x174)]&&this['_mainSprite'][_0x117055(0x881)]&&this[_0x117055(0x341)]){if(_0x117055(0x34e)==='qrPJU'){function _0x2f3c2e(){const _0x15efab=_0x117055,_0x149b18=this[_0x15efab(0x577)]();_0x5610d9=_0x149b18[_0x36d570]?_0x149b18[_0x4c4afc]['wtypeId']:0x0;}}else this[_0x117055(0x174)]['bitmap']['smooth']!==this[_0x117055(0x341)][_0x117055(0x1c9)]()&&(this[_0x117055(0x174)][_0x117055(0x881)][_0x117055(0x9d1)]=this[_0x117055(0x341)]['battlerSmoothImage']());}},VisuMZ['BattleCore']['Sprite_Actor_updateShadow']=Sprite_Actor[_0xe55837(0x392)]['updateShadow'],Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x556)]=function(){const _0x58c16e=_0xe55837;VisuMZ[_0x58c16e(0x278)][_0x58c16e(0x65d)][_0x58c16e(0x782)](this),this[_0x58c16e(0x319)]();},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x319)]=function(){const _0x30c73e=_0xe55837;if(!this['_mainSprite'])return;if(!this[_0x30c73e(0x8f9)])return;this[_0x30c73e(0x23f)](),this[_0x30c73e(0x188)]();},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x1e7)]=function(){const _0x3776bd=_0xe55837;this[_0x3776bd(0x468)][_0x3776bd(0x23d)]['x']=0x1/(this[_0x3776bd(0x23d)]['x']||0.001),this['_stateSprite'][_0x3776bd(0x23d)]['y']=0x1/(this[_0x3776bd(0x23d)]['y']||0.001);},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x6f7)]=function(){const _0x528b53=_0xe55837;if(!$gameSystem[_0x528b53(0x22a)]()&&this[_0x528b53(0x78e)]===Sprite_Actor){if(_0x528b53(0x9d9)===_0x528b53(0x9d9)){const _0x19a915=Scene_Battle['prototype'][_0x528b53(0x2cc)]();[_0x528b53(0x4d5),_0x528b53(0x656),_0x528b53(0x85f),_0x528b53(0x1bb)][_0x528b53(0x450)](_0x19a915)&&(this[_0x528b53(0x863)]=0x0);}else{function _0x109224(){const _0x55823d=_0x528b53;this[_0x55823d(0x468)][_0x55823d(0x23d)]['x']=0x1/(this['scale']['x']||0.001),this[_0x55823d(0x468)][_0x55823d(0x23d)]['y']=0x1/(this[_0x55823d(0x23d)]['y']||0.001);}}}},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x659)]=function(){const _0x23079d=_0xe55837,_0x6367db=this[_0x23079d(0x6ed)];if(_0x6367db){const _0x2482f1=_0x6367db['stateMotionIndex']();if(_0x6367db[_0x23079d(0xa79)]()||_0x6367db[_0x23079d(0x993)]()){if('cpRah'!==_0x23079d(0x4bc))this[_0x23079d(0x2cf)]('walk');else{function _0x1b4e23(){const _0x58569d=_0x23079d;this[_0x58569d(0x10d)]['x']=(_0x5a1e20[_0x58569d(0x124)]-_0x615b28['boxWidth'])/0x2,this[_0x58569d(0x10d)]['y']=(_0x3ad3fc[_0x58569d(0x97c)]-_0x4eb875[_0x58569d(0x5c8)])/0x2;}}}else{if(_0x2482f1===0x3)this['startMotion'](_0x23079d(0x11b));else{if(_0x2482f1===0x2)this[_0x23079d(0x2cf)](_0x23079d(0x56e));else{if(this[_0x23079d(0x8b2)]){if(_0x23079d(0x6e0)!==_0x23079d(0x6e0)){function _0x5aa012(){const _0x1ccaa2=_0x23079d;_0x493d5a[_0x1ccaa2(0x392)][_0x1ccaa2(0x7b6)][_0x1ccaa2(0x782)](this,_0x50b6fc),this[_0x1ccaa2(0x6e3)](this['bgType']()),this[_0x1ccaa2(0x597)]();}}else this['startMotion'](_0x23079d(0x366));}else{if(_0x6367db[_0x23079d(0x958)]()){if(_0x23079d(0x605)===_0x23079d(0x78c)){function _0x123d56(){const _0x2be60a=_0x23079d;return _0x443bee[_0x2be60a(0x49d)](_0x472141=>_0x472141[_0x2be60a(0x453)]()&&_0x472141!==_0x467fd0);}}else this['startMotion'](_0x23079d(0xea));}else{if(_0x6367db[_0x23079d(0x28a)]())this[_0x23079d(0x2cf)]('chant');else{if(_0x6367db[_0x23079d(0x87d)]()||_0x6367db[_0x23079d(0xa58)]()){if('NvWwr'===_0x23079d(0x4a2)){function _0x5567fe(){const _0x819a81=_0x23079d,_0x88c8b3=_0x3b65cf[_0x819a81(0x2d3)]('['+_0x18a4ba['$1'][_0x819a81(0x1c3)](/\d+/g)+']');for(const _0x3c7bc8 of _0x88c8b3){if(!_0x48ebe3[_0x819a81(0x6f4)](_0x3c7bc8))return![];}return!![];}}else this[_0x23079d(0x2cf)]('guard');}else{if(_0x2482f1===0x1)this[_0x23079d(0x2cf)](_0x23079d(0x7ec));else{if(_0x6367db[_0x23079d(0x51b)]()){if(_0x23079d(0x6c6)!==_0x23079d(0xa7))this['startMotion'](_0x23079d(0x33a));else{function _0x1120ef(){const _0x3f7351=_0x23079d;this['battler']()[_0x3f7351(0x659)]();}}}else{if(_0x6367db[_0x23079d(0x643)]()){if(_0x23079d(0x37a)!==_0x23079d(0xa2c))this[_0x23079d(0x2cf)](_0x23079d(0x4dc));else{function _0xca8ef6(){const _0x4905d2=_0x23079d;this[_0x4905d2(0x2cf)](_0x4905d2(0x44c));}}}else{if(_0x6367db['currentAction']()){if(_0x23079d(0x68a)!=='nBsND')this['startMotion'](_0x23079d(0xea));else{function _0x115107(){const _0x39b1a9=_0x23079d;if(!this[_0x39b1a9(0x6ed)]['hasSkill'](_0x164b31['id']))return![];}}}else this['startMotion'](_0x23079d(0x4dc));}}}}}}}}}}}},Sprite_Actor[_0xe55837(0x392)]['retreat']=function(){const _0x21715a=_0xe55837,_0x32f2a0=0xa,_0x1e09d5=0x12c*_0x32f2a0,_0x20a36d=0x1e*_0x32f2a0;this[_0x21715a(0x5fa)](_0x1e09d5,0x0,_0x20a36d);},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x38f)]=function(){const _0x41845a=_0xe55837;Sprite_Battler[_0x41845a(0x392)]['onMoveEnd'][_0x41845a(0x782)](this);},Sprite_Actor[_0xe55837(0x392)]['motionSpeed']=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0xe55837(0x392)][_0xe55837(0x8ba)]=function(){const _0x5e0b0f=_0xe55837;return Sprite_Battler[_0x5e0b0f(0x850)];},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x807)]=function(){},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x13f)]=function(){},Sprite_Actor[_0xe55837(0x392)]['updateMotionCount']=function(){const _0x4d29a5=_0xe55837;if(this[_0x4d29a5(0x8a6)]&&++this[_0x4d29a5(0x446)]>=this[_0x4d29a5(0x3ba)]()){if(this['_motion']['loop']){if('YdRFk'!=='XWUlQ')this[_0x4d29a5(0x5d7)]=(this['_pattern']+0x1)%0x4;else{function _0x24f4f2(){const _0x144f74=_0x4d29a5;_0x356932['BattleCore']['JS'][_0x3dc432][_0x144f74(0x782)](this,this[_0x144f74(0x95a)](),this[_0x144f74(0x95a)](),this[_0x144f74(0xa24)](),_0x632d82);}}}else{if(this[_0x4d29a5(0x5d7)]<0x2)this['_pattern']++;else{if(_0x4d29a5(0x992)==='ZVEsV'){function _0x8d3678(){const _0x4aa84a=_0x4d29a5,_0x3b39b6=_0x3eb4aa[_0x4aa84a(0x278)][_0x4aa84a(0x108)][_0x4aa84a(0x193)],_0x496108=this[_0x4aa84a(0x788)]('autoBattleUseSkills');return _0x496108?_0x3b39b6['StyleON']:_0x3b39b6[_0x4aa84a(0x72d)];}}else this[_0x4d29a5(0x659)]();}}this[_0x4d29a5(0x446)]=0x0;}},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x526)]=function(_0x4984fa){const _0x332f33=_0xe55837;if(_0x4984fa==='victory')this[_0x332f33(0x9b9)]=!![];if(this[_0x332f33(0x341)]&&this[_0x332f33(0x341)][_0x332f33(0xb6)]()){if('JYxyc'!==_0x332f33(0x8f7)){this[_0x332f33(0x8a6)]=Sprite_Actor['MOTIONS'][_0x332f33(0x11b)];return;}else{function _0x429081(){const _0x3854f7=_0x332f33,_0x46104f=_0x36cd27(_0x231db4['$1']);return _0x207c32[_0x3854f7(0x7f1)]()[_0x3854f7(0x49d)](_0x3bed27=>_0x3bed27[_0x3854f7(0x2fb)]()===_0x46104f);}}}const _0x33c181=Sprite_Actor[_0x332f33(0x6e7)][_0x4984fa];this['_motion']=_0x33c181,this[_0x332f33(0x446)]=0x0,this[_0x332f33(0x5d7)]=0x0;},Sprite_Actor[_0xe55837(0x392)]['forceWeaponAnimation']=function(_0x47883a){const _0x3c1938=_0xe55837;this[_0x3c1938(0x817)](),this[_0x3c1938(0x51f)][_0x3c1938(0x62b)](_0x47883a),this[_0x3c1938(0x6ed)]['clearWeaponAnimation']();},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x817)]=function(){const _0x322005=_0xe55837;let _0x153a70=-0x10,_0xaa5e21=this['height']*0.5;const _0x42907b=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x58a9aa=this['_battler'][_0x322005(0x810)]()['map'](_0x507c0a=>_0x507c0a&&_0x507c0a[_0x322005(0x35c)][_0x322005(0x1c3)](_0x42907b)?Number(RegExp['$1']):0x0),_0x4dbc75=this[_0x322005(0x341)][_0x322005(0x810)]()[_0x322005(0x584)](_0x597bae=>_0x597bae&&_0x597bae[_0x322005(0x35c)]['match'](_0x42907b)?Number(RegExp['$2']):0x0);_0x153a70=_0x58a9aa[_0x322005(0x3eb)]((_0x292615,_0x479905)=>_0x292615+_0x479905,_0x153a70),_0xaa5e21=_0x4dbc75['reduce']((_0x1bd7c1,_0x1075b0)=>_0x1bd7c1+_0x1075b0,_0xaa5e21),this[_0x322005(0x51f)]['x']=_0x153a70,this['_weaponSprite']['y']=_0xaa5e21,this[_0x322005(0x51f)]['update']();},Sprite_Weapon[_0xe55837(0x392)][_0xe55837(0x62b)]=function(_0x255ac5){const _0x6556fc=_0xe55837;this[_0x6556fc(0x5b5)]=_0x255ac5,this[_0x6556fc(0x4eb)]=-0x1,this[_0x6556fc(0x5d7)]=0x0,this[_0x6556fc(0x3c5)](),this[_0x6556fc(0x472)]();},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x8c4)]=function(){},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x489)]=function(){const _0x3c1210=_0xe55837,_0x17e257=VisuMZ[_0x3c1210(0x278)]['Settings'][_0x3c1210(0xa10)],_0x49416d=_0x17e257[_0x3c1210(0x11e)],_0x2dae9a=_0x17e257[_0x3c1210(0x71b)],_0xfda971=_0x17e257[_0x3c1210(0x2ea)];this['startMove'](-_0x49416d,-_0x2dae9a,_0xfda971);},VisuMZ[_0xe55837(0x278)]['Sprite_Actor_updateFrame']=Sprite_Actor['prototype'][_0xe55837(0x472)],Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x472)]=function(){const _0x4b4121=_0xe55837;this[_0x4b4121(0x433)](),VisuMZ['BattleCore'][_0x4b4121(0x29d)]['call'](this);},Sprite_Actor[_0xe55837(0x392)][_0xe55837(0x433)]=function(){const _0x1b3dfb=_0xe55837;if(this[_0x1b3dfb(0x341)]&&this[_0x1b3dfb(0x341)][_0x1b3dfb(0x58a)]){if('SgDRc'!=='SgDRc'){function _0x14459b(){const _0x31c006=_0x1b3dfb;return this[_0x31c006(0x4b6)]()[_0x31c006(0x9e7)](_0x3b64e4=>_0x3b64e4['isChangingOpacity']());}}else{const _0x4edb23=this[_0x1b3dfb(0x341)][_0x1b3dfb(0x58a)];this['_motion']=Sprite_Actor[_0x1b3dfb(0x6e7)][_0x4edb23['motionType']],this['_pattern']=_0x4edb23[_0x1b3dfb(0x294)];const _0x4dc537=this[_0x1b3dfb(0x51f)];_0x4dc537[_0x1b3dfb(0x80e)](_0x4edb23[_0x1b3dfb(0x5ad)],_0x4edb23[_0x1b3dfb(0x294)]),this[_0x1b3dfb(0x817)]();}}},Sprite_Weapon[_0xe55837(0x392)][_0xe55837(0x80e)]=function(_0x567efe,_0x326b82){const _0x234414=_0xe55837;this[_0x234414(0x5b5)]=_0x567efe,this[_0x234414(0x4eb)]=-Infinity,this[_0x234414(0x5d7)]=_0x326b82,this['loadBitmap'](),this[_0x234414(0x472)]();},Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x120)]=function(){const _0x3839e2=_0xe55837;Sprite_Battler[_0x3839e2(0x392)][_0x3839e2(0x120)]['call'](this),this[_0x3839e2(0x18c)]=null,this['_appeared']=![],this[_0x3839e2(0x6d2)]='',this['_battlerHue']=0x0,this[_0x3839e2(0x8cd)]=null,this['_effectDuration']=0x0,this['_shake']=0x0,this[_0x3839e2(0x747)](),this[_0x3839e2(0x229)]();},VisuMZ['BattleCore'][_0xe55837(0x92)]=Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x59f)],Sprite_Enemy['prototype'][_0xe55837(0x59f)]=function(){const _0x18484a=_0xe55837;VisuMZ[_0x18484a(0x278)][_0x18484a(0x92)]['call'](this),this['updateShadowVisibility']();},Sprite_Enemy[_0xe55837(0x392)]['createMainSprite']=function(){const _0x724151=_0xe55837;this[_0x724151(0x174)]=new Sprite(),this[_0x724151(0x174)]['anchor']['x']=0.5,this[_0x724151(0x174)][_0x724151(0x5dc)]['y']=0x1,this[_0x724151(0x9e6)](this['_mainSprite']),this[_0x724151(0x606)]();},Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0xa38)]=function(){const _0x3e7a0b=_0xe55837;return this[_0x3e7a0b(0x79d)]||this[_0x3e7a0b(0x174)]||this;},Sprite_Enemy['prototype'][_0xe55837(0x3c5)]=function(_0x5b4517){const _0x1feb57=_0xe55837;this[_0x1feb57(0x881)]=new Bitmap(0x1,0x1);if($gameSystem[_0x1feb57(0x22a)]()){if(_0x1feb57(0x902)!=='rEhZS'){function _0xd86b3(){const _0x21787a=_0x1feb57;_0x4f8e5c[_0x21787a(0x278)][_0x21787a(0x108)]['HpGauge'][_0x21787a(0x8b4)]&&this['createHpGaugeSprite'](),_0x3fd32c[_0x21787a(0x278)]['Sprite_Enemy_createStateIconSprite']['call'](this);}}else this[_0x1feb57(0x174)]['bitmap']=ImageManager['loadSvEnemy'](_0x5b4517);}else this['_mainSprite']['bitmap']=ImageManager[_0x1feb57(0x600)](_0x5b4517);this[_0x1feb57(0x174)][_0x1feb57(0x881)][_0x1feb57(0x2a8)](this['createEmptyBitmap']['bind'](this));},Sprite_Enemy['prototype'][_0xe55837(0x314)]=function(){const _0x4cc420=_0xe55837,_0x104451=this[_0x4cc420(0x174)][_0x4cc420(0x881)];_0x104451&&(this[_0x4cc420(0x881)]=new Bitmap(_0x104451[_0x4cc420(0x124)],_0x104451['height']));},VisuMZ[_0xe55837(0x278)][_0xe55837(0x7cd)]=Sprite_Enemy['prototype']['setHue'],Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x8e4)]=function(_0x2902f3){const _0x56df85=_0xe55837;if(this[_0x56df85(0x174)]){if(_0x56df85(0x4b4)!==_0x56df85(0x4b4)){function _0x560cae(){const _0x5f0906=_0x56df85;_0x48850f=_0x24923a[this['_actor'][_0x5f0906(0x5b2)]()];}}else this[_0x56df85(0x174)]['setHue'](_0x2902f3);}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x4d3)]=Sprite_Enemy[_0xe55837(0x392)]['initVisibility'],Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x280)]=function(){const _0x191756=_0xe55837;if(this[_0x191756(0x91)]()){if(_0x191756(0x860)!==_0x191756(0x860)){function _0x45428c(){const _0xd43d1b=_0x191756,_0x46d18a=this[_0xd43d1b(0x19a)][_0xd43d1b(0x881)],_0x2d5567=this[_0xd43d1b(0x124)]-0x8,_0x5b477f=this[_0xd43d1b(0x97c)],_0x27916d=this[_0xd43d1b(0x949)],_0x4e231c=_0x596b10['dimColor1'](),_0x11ab35=_0x5f379f[_0xd43d1b(0x1c2)]();this[_0xd43d1b(0x19a)]['x']=0x4,_0x46d18a['resize'](_0x2d5567,_0x5b477f),_0x46d18a[_0xd43d1b(0x9de)](0x0,0x0,_0x2d5567,_0x27916d,_0x11ab35,_0x4e231c,!![]),_0x46d18a[_0xd43d1b(0x843)](0x0,_0x27916d,_0x2d5567,_0x5b477f-_0x27916d*0x2,_0x4e231c),_0x46d18a[_0xd43d1b(0x9de)](0x0,_0x5b477f-_0x27916d,_0x2d5567,_0x27916d,_0x4e231c,_0x11ab35,!![]),this[_0xd43d1b(0x19a)][_0xd43d1b(0xb9)](0x0,0x0,_0x2d5567,_0x5b477f);}}else VisuMZ[_0x191756(0x278)][_0x191756(0x4d3)]['call'](this);}else{if(_0x191756(0x7e3)===_0x191756(0x58e)){function _0x1f2ada(){const _0x21bcf5=_0x191756;return _0x267375[_0x21bcf5(0xe1)]()[_0x21bcf5(0xa0)]===_0x226df5[_0x21bcf5(0xe1)]()[_0x21bcf5(0xa0)]?_0x5217f3[_0x21bcf5(0xe1)]()['_baseY']-_0x501047[_0x21bcf5(0xe1)]()[_0x21bcf5(0x937)]:_0x3721c2[_0x21bcf5(0xe1)]()['_baseX']-_0x42ce36[_0x21bcf5(0xe1)]()[_0x21bcf5(0xa0)];}}else{this[_0x191756(0x2c2)]=!this['_enemy'][_0x191756(0x1a6)]();if(!this[_0x191756(0x2c2)]){if(_0x191756(0x64c)==='QYHVB')this['opacity']=0x0;else{function _0x32d3eb(){const _0x812329=_0x191756;_0x311eb1+=_0x53b114['x']-this[_0x812329(0x6fd)]();const _0x388c59=_0x15852e[_0x812329(0x4ac)]()*0x3/0x4;_0x12b126=_0x209e24['y']+_0x388c59,_0x222274=_0xa7d175[_0x812329(0x6a9)](_0x1b2299,_0x306733['y']+this['y']-this[_0x812329(0x97c)]+_0x388c59);}}}}}},VisuMZ[_0xe55837(0x278)]['Sprite_Enemy_updateCollapse']=Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x2b9)],Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x2b9)]=function(){const _0x3930ab=_0xe55837;if(this[_0x3930ab(0x91)]())VisuMZ[_0x3930ab(0x278)][_0x3930ab(0x259)][_0x3930ab(0x782)](this);},Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x472)]=function(){const _0x33e222=_0xe55837;Sprite_Battler['prototype'][_0x33e222(0x472)]['call'](this);const _0x4b96d8=this[_0x33e222(0xa38)]()||this;if(!_0x4b96d8)return;!_0x4b96d8[_0x33e222(0x881)]&&(_0x4b96d8['bitmap']=new Bitmap(this[_0x33e222(0x124)],this['height']));if(this['_effectType']===_0x33e222(0x798))this[_0x33e222(0x174)][_0x33e222(0xb9)](0x0,0x0,this[_0x33e222(0x174)][_0x33e222(0x124)],this[_0x33e222(0x487)]);else{if(_0x33e222(0xc5)!==_0x33e222(0x8bc))_0x4b96d8[_0x33e222(0xb9)](0x0,0x0,_0x4b96d8['bitmap'][_0x33e222(0x124)],this[_0x33e222(0x881)]['height']);else{function _0x1faaf5(){const _0x9db20b=_0x33e222,_0x2301cd=this[_0x9db20b(0x567)];_0x2301cd[_0x9db20b(0x444)](_0xdea284,0x0,_0x64eefe['y'],_0x2301cd[_0x9db20b(0x3e9)],_0x9db20b(0x89d));}}}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x21c)]=Sprite_Enemy['prototype'][_0xe55837(0x1fc)],Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x1fc)]=function(){const _0x4d8941=_0xe55837;if(this[_0x4d8941(0x91)]())VisuMZ[_0x4d8941(0x278)][_0x4d8941(0x21c)][_0x4d8941(0x782)](this);},Sprite_Enemy['prototype'][_0xe55837(0x918)]=function(){const _0x33b96d=_0xe55837;return Sprite_Battler[_0x33b96d(0x392)][_0x33b96d(0x918)]['call'](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x751)]=Sprite_Enemy[_0xe55837(0x392)]['updateStateSprite'],Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x1e7)]=function(){const _0x2aef5c=_0xe55837;VisuMZ[_0x2aef5c(0x278)][_0x2aef5c(0x751)][_0x2aef5c(0x782)](this),this[_0x2aef5c(0x981)]();},Sprite_Enemy['prototype'][_0xe55837(0x981)]=function(){const _0xd650a7=_0xe55837,_0x574804=VisuMZ['BattleCore'][_0xd650a7(0x108)][_0xd650a7(0x214)];if(_0x574804['NameAttachStateIcon']&&!_0x574804['NameLegacy']){this[_0xd650a7(0x5c2)][_0xd650a7(0x863)]=0x0;return;}this[_0xd650a7(0x5c2)]['x']=0x0,this[_0xd650a7(0x5c2)]['x']+=this['_battler'][_0xd650a7(0x1bc)](),this['_stateIconSprite']['y']=-this[_0xd650a7(0x881)][_0xd650a7(0x97c)]-this[_0xd650a7(0x5c2)]['height'],this[_0xd650a7(0x5c2)]['y']+=this['_battler'][_0xd650a7(0x8a1)](),this['_stateIconSprite'][_0xd650a7(0x23d)]['x']=0x1/(this[_0xd650a7(0x23d)]['x']||0.001),this[_0xd650a7(0x5c2)][_0xd650a7(0x23d)]['y']=0x1/(this[_0xd650a7(0x23d)]['y']||0.001),this[_0xd650a7(0x674)]()&&(this[_0xd650a7(0x8ec)][_0xd650a7(0x468)][_0xd650a7(0x23d)]['x']=-0x1/(this['scale']['x']||0.001),this['_svBattlerSprite'][_0xd650a7(0x468)]['scale']['y']=0x1/(this[_0xd650a7(0x23d)]['y']||0.001));},VisuMZ[_0xe55837(0x278)][_0xe55837(0x15b)]=Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x796)],Sprite_Enemy[_0xe55837(0x392)]['setBattler']=function(_0x9629a4){const _0x3c8025=_0xe55837;VisuMZ['BattleCore'][_0x3c8025(0x15b)][_0x3c8025(0x782)](this,_0x9629a4),this[_0x3c8025(0x99b)](_0x9629a4);},Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x99b)]=function(_0x443466){const _0x31308f=_0xe55837;if(!this[_0x31308f(0x8ec)]){if(_0x31308f(0x9ad)!==_0x31308f(0x286))this[_0x31308f(0x8ec)]=new Sprite_SvEnemy(_0x443466),this['attachSpritesToDistortionSprite']();else{function _0x41bc31(){const _0x41b215=_0x31308f;this[_0x41b215(0x554)]=_0x41b215(0x85f);}}}this[_0x31308f(0x8ec)][_0x31308f(0x796)](_0x443466);},Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x674)]=function(){const _0x281327=_0xe55837;return this[_0x281327(0x18c)]&&this[_0x281327(0x18c)][_0x281327(0x674)]();},VisuMZ[_0xe55837(0x278)]['Sprite_Enemy_loadBitmap']=Sprite_Enemy['prototype']['loadBitmap'],Sprite_Enemy[_0xe55837(0x392)]['loadBitmap']=function(_0x153de7){const _0x128d6f=_0xe55837;if(this['hasSvBattler']()){const _0x53cbc9=this[_0x128d6f(0x18c)][_0x128d6f(0x6b9)]();this[_0x128d6f(0x881)]=new Bitmap(_0x53cbc9[_0x128d6f(0x124)],_0x53cbc9[_0x128d6f(0x97c)]);}else VisuMZ['BattleCore']['Sprite_Enemy_loadBitmap'][_0x128d6f(0x782)](this,_0x153de7);},Sprite_Enemy['prototype'][_0xe55837(0x91)]=function(){const _0x52ff25=_0xe55837;if(this[_0x52ff25(0x674)]())return this[_0x52ff25(0x18c)]['allowCollapse']();else{if(_0x52ff25(0x5dd)===_0x52ff25(0x5dd))return!![];else{function _0x2bfe83(){const _0x4910f2=_0x52ff25,_0x40d8ab=_0x3d8f41[_0x4910f2(0x660)](_0x4c9194[_0x4910f2(0x448)]()[_0x4910f2(0x1ee)]());_0x40d8ab>=0x0&&_0x40d8ab<=0x7&&_0x3f4617[_0x4910f2(0x241)](_0x40d8ab,_0x4173aa);}}}},Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x659)]=function(){const _0x5a3972=_0xe55837;this[_0x5a3972(0x674)]()&&this['_svBattlerSprite'][_0x5a3972(0x659)]();},Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x526)]=function(_0x54765e){const _0x4bd042=_0xe55837;if(this[_0x4bd042(0x674)]())this['_svBattlerSprite'][_0x4bd042(0x526)](_0x54765e);},Sprite_Enemy[_0xe55837(0x392)][_0xe55837(0x8df)]=function(_0x38d153){const _0x142d61=_0xe55837;if(this[_0x142d61(0x674)]())this['_svBattlerSprite']['forceWeaponAnimation'](_0x38d153);},Sprite_Enemy['prototype']['stepForward']=function(){const _0x5638dc=_0xe55837,_0x9fb163=VisuMZ[_0x5638dc(0x278)][_0x5638dc(0x108)]['ActionSequence'],_0x2ad237=_0x9fb163[_0x5638dc(0x11e)],_0x2a8376=_0x9fb163[_0x5638dc(0x71b)],_0x416e58=_0x9fb163[_0x5638dc(0x2ea)];this[_0x5638dc(0x5fa)](_0x2ad237,_0x2a8376,_0x416e58);};function Sprite_SvEnemy(){this['initialize'](...arguments);}function _0x5688(_0x2237c2,_0x1b7799){_0x2237c2=_0x2237c2-0x90;let _0x310dfc=_0x310d[_0x2237c2];return _0x310dfc;}Sprite_SvEnemy[_0xe55837(0x392)]=Object[_0xe55837(0x9b)](Sprite_Actor[_0xe55837(0x392)]),Sprite_SvEnemy[_0xe55837(0x392)][_0xe55837(0x78e)]=Sprite_SvEnemy,Sprite_SvEnemy[_0xe55837(0x392)][_0xe55837(0x7b6)]=function(_0x530c45){const _0x3a7972=_0xe55837;Sprite_Actor['prototype'][_0x3a7972(0x7b6)][_0x3a7972(0x782)](this,_0x530c45),this[_0x3a7972(0x23d)]['x']=-0x1,this['_stateSprite']['scale']['x']=-0x1;},Sprite_SvEnemy['prototype'][_0xe55837(0x9d3)]=function(){},Sprite_SvEnemy[_0xe55837(0x392)][_0xe55837(0x4cd)]=function(){},Sprite_SvEnemy['prototype']['setActorHome']=function(_0x499ef6){},Sprite_SvEnemy[_0xe55837(0x392)][_0xe55837(0x556)]=function(){},Sprite_SvEnemy['prototype'][_0xe55837(0x188)]=function(){},Sprite_SvEnemy[_0xe55837(0x392)][_0xe55837(0x1e7)]=function(){const _0x57f1ba=_0xe55837;this['_stateSprite'][_0x57f1ba(0x331)]=![];},Sprite_SvEnemy[_0xe55837(0x392)][_0xe55837(0x6c7)]=function(){const _0x296c80=_0xe55837;Sprite_Battler[_0x296c80(0x392)][_0x296c80(0x6c7)]['call'](this);const _0x1a543e=this[_0x296c80(0x6ed)][_0x296c80(0x21d)]();if(this[_0x296c80(0x6d2)]!==_0x1a543e){if(_0x296c80(0x22e)!==_0x296c80(0x27b))this[_0x296c80(0x6d2)]=_0x1a543e,this[_0x296c80(0x174)][_0x296c80(0x881)]=ImageManager[_0x296c80(0x45e)](_0x1a543e);else{function _0x59bdd4(){const _0x331d69=_0x296c80;let _0x31be09=[];return this['isBattleCoreTargetScope']()?_0x31be09=this[_0x331d69(0x1de)]():_0x31be09=_0x37a55e[_0x331d69(0x278)][_0x331d69(0x178)][_0x331d69(0x782)](this),_0x31be09=this['applyTargetFilters'](_0x31be09),_0x31be09;}}}this[_0x296c80(0x174)]&&this['_mainSprite']['bitmap']&&this[_0x296c80(0x341)]&&(this[_0x296c80(0x174)]['bitmap'][_0x296c80(0x9d1)]!==this[_0x296c80(0x341)][_0x296c80(0x1c9)]()&&(this[_0x296c80(0x174)][_0x296c80(0x881)][_0x296c80(0x9d1)]=this[_0x296c80(0x341)][_0x296c80(0x1c9)]()));},Sprite_SvEnemy[_0xe55837(0x392)][_0xe55837(0x2f7)]=function(){},Sprite_SvEnemy[_0xe55837(0x392)][_0xe55837(0x5fa)]=function(_0x1834fb,_0x378d9d,_0x5486f2){const _0x8f21e4=_0xe55837;if(this[_0x8f21e4(0x44b)])this[_0x8f21e4(0x44b)]['startMove'](_0x1834fb,_0x378d9d,_0x5486f2);},Sprite_SvEnemy[_0xe55837(0x392)][_0xe55837(0x659)]=function(){const _0x4ab72f=_0xe55837,_0x2821d0=this[_0x4ab72f(0x6ed)];if(_0x2821d0){const _0x513035=_0x2821d0[_0x4ab72f(0xba)]();if(_0x2821d0['isInputting']()||_0x2821d0['isActing']())this[_0x4ab72f(0x2cf)](_0x4ab72f(0x4dc));else{if(_0x513035===0x3){if('ibHgf'===_0x4ab72f(0x517))this[_0x4ab72f(0x2cf)](_0x4ab72f(0x11b));else{function _0x584545(){const _0x324dad=_0x4ab72f;if(this[_0x324dad(0x292)]())this[_0x324dad(0x8e7)](_0x324dad(0x51a));_0xa80fd1[_0x324dad(0x278)][_0x324dad(0x171)]['call'](this);if(this['isTurnBased']())this[_0x324dad(0x8e7)](_0x324dad(0x9e9));}}}else{if(_0x513035===0x2){if(_0x4ab72f(0xe8)!==_0x4ab72f(0xe8)){function _0x29d472(){const _0x5b215e=_0x4ab72f;if(_0x3a0d2e[_0x5b215e(0x956)]()['skewDuration']>0x0)return!![];this[_0x5b215e(0x6d5)]='';}}else this[_0x4ab72f(0x2cf)]('sleep');}else{if(_0x2821d0[_0x4ab72f(0x28a)]())this[_0x4ab72f(0x2cf)](_0x4ab72f(0x44c));else{if(_0x2821d0[_0x4ab72f(0x87d)]()||_0x2821d0['isGuardWaiting']())this['startMotion'](_0x4ab72f(0x23e));else{if(_0x513035===0x1){if(_0x4ab72f(0x977)===_0x4ab72f(0x228)){function _0x360e3c(){const _0x4152d7=_0x4ab72f;this[_0x4152d7(0x5e9)]=new _0x156e7b();const _0xc579c8=_0x52dcb0[_0x4152d7(0x1c8)],_0x2f21e3=_0xc579c8[_0x4152d7(0x6a6)][_0x4152d7(0x660)](_0xc579c8[_0x4152d7(0x10d)]);_0xc579c8['addChildAt'](this[_0x4152d7(0x5e9)],_0x2f21e3),this[_0x4152d7(0x5e9)][_0x4152d7(0x5dc)]['x']=0.5,this['_borderPortraitSprite'][_0x4152d7(0x5dc)]['y']=0x1;const _0x4d30aa=_0x1b02a9[_0x4152d7(0x278)][_0x4152d7(0x108)]['BattleLayout'][_0x4152d7(0x289)];this['_borderPortraitSprite'][_0x4152d7(0x23d)]['x']=_0x4d30aa,this[_0x4152d7(0x5e9)]['scale']['y']=_0x4d30aa,this[_0x4152d7(0x5e9)]['y']=this['y']+this[_0x4152d7(0x97c)],this[_0x4152d7(0x1da)]=0x0;}}else this[_0x4ab72f(0x2cf)]('abnormal');}else{if(_0x2821d0[_0x4ab72f(0x51b)]())this[_0x4ab72f(0x2cf)](_0x4ab72f(0x33a));else{if(_0x2821d0[_0x4ab72f(0x643)]())this[_0x4ab72f(0x2cf)]('walk');else{if('QlLjm'!=='vONka')this['startMotion'](_0x2821d0[_0x4ab72f(0x6b9)]()[_0x4ab72f(0xa0f)]||'walk');else{function _0x508c34(){const _0x1e6223=_0x4ab72f;return this[_0x1e6223(0x20c)]()?this[_0x1e6223(0x5a3)]()&&this[_0x1e6223(0x5a3)]()[_0x1e6223(0xa24)]()&&!this[_0x1e6223(0x5a3)]()[_0x1e6223(0x456)]():this[_0x1e6223(0x5a3)]()&&this[_0x1e6223(0x5a3)]()['item']()&&!this[_0x1e6223(0x5a3)]()['isMagicSkill']();}}}}}}}}}}}},Sprite_SvEnemy[_0xe55837(0x392)][_0xe55837(0xc3)]=function(){const _0x4a931e=_0xe55837;if(this[_0x4a931e(0x44b)])return this[_0x4a931e(0x44b)][_0x4a931e(0x1d7)]===0x0&&this[_0x4a931e(0x44b)][_0x4a931e(0x9a4)]===0x0;else{if('USWNU'===_0x4a931e(0x9a7))return!![];else{function _0x49ab25(){const _0x17f8c3=_0x4a931e;return this[_0x17f8c3(0x4aa)]>0x0;}}}},Sprite_SvEnemy['prototype']['updateFlip']=function(){},Sprite_Damage['prototype']['setupBattleCore']=function(_0x21b08e){const _0x4e75e2=_0xe55837,_0x586abe=_0x21b08e[_0x4e75e2(0x7b7)]()||_0x21b08e[_0x4e75e2(0x83a)]();if(_0x586abe[_0x4e75e2(0x7a6)]||_0x586abe[_0x4e75e2(0x68b)])this['_colorType']=0x0,this[_0x4e75e2(0x9f0)]();else{if(_0x586abe['hpAffected']){if(_0x4e75e2(0x60c)===_0x4e75e2(0x7a4)){function _0x5f3a56(){_0x2f3edc['BattleCore']['createJS'](_0xd4d2de,_0x1838ab);}}else this[_0x4e75e2(0x723)]=_0x586abe[_0x4e75e2(0x42b)]>=0x0?0x0:0x1,this[_0x4e75e2(0x4e5)](_0x586abe[_0x4e75e2(0x42b)]);}else _0x21b08e[_0x4e75e2(0x453)]()&&_0x586abe[_0x4e75e2(0x672)]!==0x0&&(this[_0x4e75e2(0x723)]=_0x586abe[_0x4e75e2(0x672)]>=0x0?0x2:0x3,this['createDigits'](_0x586abe[_0x4e75e2(0x672)]));}if(_0x586abe[_0x4e75e2(0x1e6)]){if('oNkaU'===_0x4e75e2(0x245)){function _0x42540f(){const _0x2fdd67=_0x4e75e2;return this[_0x2fdd67(0x922)]()&&!this['isCustomBattleScope']()?this[_0x2fdd67(0xa03)]():_0xf75dbe['BattleCore'][_0x2fdd67(0x271)][_0x2fdd67(0x782)](this);}}else this[_0x4e75e2(0x430)]();}},Sprite_Damage['prototype']['setup']=function(_0x175a44){},Sprite_Damage[_0xe55837(0x392)][_0xe55837(0x4e5)]=function(_0x5661f8){const _0x1f3bbf=_0xe55837;let _0x2712dd=this[_0x1f3bbf(0x4c2)](_0x5661f8);const _0x30185f=this['fontSize'](),_0x4353bc=Math['floor'](_0x30185f*0.75);for(let _0x46b276=0x0;_0x46b276<_0x2712dd['length'];_0x46b276++){const _0x195d75=this['createChildSprite'](_0x4353bc,_0x30185f);_0x195d75[_0x1f3bbf(0x881)][_0x1f3bbf(0x444)](_0x2712dd[_0x46b276],0x0,0x0,_0x4353bc,_0x30185f,_0x1f3bbf(0x89d)),_0x195d75['x']=(_0x46b276-(_0x2712dd[_0x1f3bbf(0x4c5)]-0x1)/0x2)*_0x4353bc,_0x195d75['dy']=-_0x46b276;}},Sprite_Damage[_0xe55837(0x392)][_0xe55837(0x4c2)]=function(_0x875de6){const _0x40a020=_0xe55837;let _0x171142=Math[_0x40a020(0x474)](_0x875de6)['toString']();if(this[_0x40a020(0x8af)]()){if(_0x40a020(0x9d6)==='jOTwR'){function _0xbc697e(){const _0xa8a778=_0x40a020;this[_0xa8a778(0x9ca)]=this[_0xa8a778(0x82d)](this['_currentAngle'],this[_0xa8a778(0x779)],_0x4d2da3,_0x4fbf09,_0x5014b1);}}else _0x171142=VisuMZ['GroupDigits'](_0x171142);}const _0x1c8317=VisuMZ[_0x40a020(0x278)][_0x40a020(0x108)][_0x40a020(0x9fc)];let _0x447d0b='',_0x1f8733='';switch(this[_0x40a020(0x723)]){case 0x0:_0x447d0b=_0x1c8317[_0x40a020(0x758)]||'-%1',_0x1f8733=TextManager['hp'];if(_0x875de6===0x0)_0x447d0b='%1';break;case 0x1:_0x447d0b=_0x1c8317[_0x40a020(0x8f0)]||'+%1',_0x1f8733=TextManager['hp'];break;case 0x2:_0x447d0b=_0x1c8317[_0x40a020(0x647)]||_0x40a020(0x907),_0x1f8733=TextManager['mp'];break;case 0x3:_0x447d0b=_0x1c8317[_0x40a020(0xd2)]||_0x40a020(0x63d),_0x1f8733=TextManager['mp'];break;}return _0x447d0b['format'](_0x171142,_0x1f8733)[_0x40a020(0x1ee)]();},Sprite_Damage['prototype']['useDigitGrouping']=function(){const _0x491d45=_0xe55837;if(Imported['VisuMZ_0_CoreEngine']){if('DmaVX'!==_0x491d45(0x763))return VisuMZ[_0x491d45(0x1a1)]['Settings'][_0x491d45(0x407)]['DigitGroupingDamageSprites'];else{function _0x233692(){const _0x186450=_0x491d45;return this[_0x186450(0x6b9)]()['name']!=='';}}}else{if(_0x491d45(0x169)!=='UpxVy'){function _0x54296b(){const _0x454cea=_0x491d45;this[_0x454cea(0x2cf)](_0x454cea(0x4dc));}}else return![];}},Sprite_Damage[_0xe55837(0x392)]['setupCriticalEffect']=function(){const _0x2416c1=_0xe55837,_0x58ddac=VisuMZ[_0x2416c1(0x278)]['Settings'][_0x2416c1(0x9fc)];this[_0x2416c1(0x5d4)]=_0x58ddac[_0x2416c1(0x1fe)]['slice'](0x0),this[_0x2416c1(0x358)]=_0x58ddac[_0x2416c1(0x88d)];},Sprite_Damage[_0xe55837(0x392)][_0xe55837(0x63e)]=function(_0x46b10a,_0x18fa7c){const _0xcd12cf=_0xe55837;this[_0xcd12cf(0x5d4)]=_0x18fa7c['flashColor']||[0x0,0x0,0x0,0x0],this[_0xcd12cf(0x5d4)]=JsonEx['makeDeepCopy'](this[_0xcd12cf(0x5d4)]),this[_0xcd12cf(0x358)]=_0x18fa7c[_0xcd12cf(0x5c3)]||0x0;const _0x8a127c=this[_0xcd12cf(0x533)](),_0xbcf273=Math[_0xcd12cf(0x639)](_0x8a127c*0x1e),_0x4a1be2=this[_0xcd12cf(0x696)](_0xbcf273,_0x8a127c);_0x4a1be2[_0xcd12cf(0x881)][_0xcd12cf(0x733)]=ColorManager['getColor'](_0x18fa7c['textColor']),_0x4a1be2[_0xcd12cf(0x881)]['drawText'](_0x46b10a,0x0,0x0,_0xbcf273,_0x8a127c,'center'),_0x4a1be2['dy']=0x0;},Sprite_Damage[_0xe55837(0x392)][_0xe55837(0x56c)]=function(_0x2d1c0f,_0x1cc315,_0x203045){const _0x2603c0=_0xe55837,_0xf1e363=Math[_0x2603c0(0x220)](this['fontSize'](),ImageManager['iconHeight']),_0x555eaa=Math[_0x2603c0(0x639)](_0xf1e363*0x1e),_0x5e4ae7=this[_0x2603c0(0x696)](_0x555eaa,_0xf1e363),_0x5d7cca=ImageManager[_0x2603c0(0x3dd)]/0x2,_0x3851f1=_0x5e4ae7[_0x2603c0(0x881)][_0x2603c0(0x7b1)](_0x1cc315+'\x20');_0x5e4ae7['bitmap'][_0x2603c0(0x733)]=ColorManager['getColor'](_0x203045[_0x2603c0(0x733)]),_0x5e4ae7[_0x2603c0(0x881)][_0x2603c0(0x444)](_0x1cc315,_0x5d7cca,0x0,_0x555eaa-_0x5d7cca,_0xf1e363,'center');const _0x455494=Math[_0x2603c0(0x498)]((_0xf1e363-ImageManager['iconHeight'])/0x2),_0x2c283e=_0x555eaa/0x2-ImageManager[_0x2603c0(0x3dd)]-_0x3851f1/0x2+_0x5d7cca/0x2,_0x1236e3=ImageManager[_0x2603c0(0x55f)](_0x2603c0(0x4d9)),_0x250995=ImageManager[_0x2603c0(0x3dd)],_0x1dd9f1=ImageManager['iconHeight'],_0x17059c=_0x2d1c0f%0x10*_0x250995,_0x51c929=Math[_0x2603c0(0x639)](_0x2d1c0f/0x10)*_0x1dd9f1;_0x5e4ae7[_0x2603c0(0x881)][_0x2603c0(0x2b8)](_0x1236e3,_0x17059c,_0x51c929,_0x250995,_0x1dd9f1,_0x2c283e,_0x455494),this[_0x2603c0(0x5d4)]=_0x203045['flashColor']||[0x0,0x0,0x0,0x0],this[_0x2603c0(0x5d4)]=JsonEx[_0x2603c0(0x9f8)](this[_0x2603c0(0x5d4)]),this[_0x2603c0(0x358)]=_0x203045[_0x2603c0(0x5c3)]||0x0,_0x5e4ae7['dy']=0x0;},VisuMZ[_0xe55837(0x278)][_0xe55837(0x24c)]=Sprite_StateIcon[_0xe55837(0x392)][_0xe55837(0x472)],Sprite_StateIcon['prototype'][_0xe55837(0x472)]=function(){const _0x5d2d88=_0xe55837;VisuMZ[_0x5d2d88(0x278)][_0x5d2d88(0x24c)][_0x5d2d88(0x782)](this),this[_0x5d2d88(0x863)]=this[_0x5d2d88(0x5a5)]>0x0?0xff:0x0;},VisuMZ[_0xe55837(0x278)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon['prototype'][_0xe55837(0x3c5)],Sprite_Weapon[_0xe55837(0x392)][_0xe55837(0x3c5)]=function(){const _0x5c35d9=_0xe55837;VisuMZ[_0x5c35d9(0x278)][_0x5c35d9(0x3c9)][_0x5c35d9(0x782)](this),this[_0x5c35d9(0x881)]&&(this[_0x5c35d9(0x881)][_0x5c35d9(0x9d1)]=VisuMZ[_0x5c35d9(0x278)][_0x5c35d9(0x108)][_0x5c35d9(0x948)]['SmoothImage']);};function Sprite_HpGauge(){const _0x355cec=_0xe55837;this[_0x355cec(0x7b6)](...arguments);}Sprite_HpGauge['prototype']=Object['create'](Sprite_Gauge['prototype']),Sprite_HpGauge[_0xe55837(0x392)][_0xe55837(0x78e)]=Sprite_HpGauge,Sprite_HpGauge[_0xe55837(0x392)][_0xe55837(0x7b6)]=function(){const _0x26e661=_0xe55837;Sprite_Gauge['prototype'][_0x26e661(0x7b6)][_0x26e661(0x782)](this);},Sprite_HpGauge['prototype'][_0xe55837(0x348)]=function(){return 0x0;},Sprite_HpGauge[_0xe55837(0x392)]['redraw']=function(){const _0x3fa5bd=_0xe55837;this[_0x3fa5bd(0x881)]['clear']();const _0x5967ac=this[_0x3fa5bd(0x9b0)]();if(!isNaN(_0x5967ac)){if(_0x3fa5bd(0x356)!==_0x3fa5bd(0x356)){function _0x2e8151(){const _0x3c5351=_0x3fa5bd,_0x445daa=_0x5eb5e1(_0x5049d8['$1'])[_0x3c5351(0x448)]()[_0x3c5351(0x1ee)]();if(_0x445daa==='MANUAL')return _0x3c5351(0x999);if(_0x4ebaa4[_0x3c5351(0x8fc)][_0x445daa])return _0x445daa;}}else this[_0x3fa5bd(0x8b6)]();}};function Sprite_EnemyName(){const _0x3c3e6b=_0xe55837;this[_0x3c3e6b(0x7b6)](...arguments);}Sprite_EnemyName[_0xe55837(0x392)]=Object[_0xe55837(0x9b)](Sprite_Name[_0xe55837(0x392)]),Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x78e)]=Sprite_EnemyName,Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x7b6)]=function(){const _0x1a0006=_0xe55837;Sprite_Name[_0x1a0006(0x392)][_0x1a0006(0x7b6)][_0x1a0006(0x782)](this),this[_0x1a0006(0x65a)]();},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x120)]=function(){const _0x15aeae=_0xe55837;Sprite_Name[_0x15aeae(0x392)]['initMembers']['call'](this),this[_0x15aeae(0x863)]=0x0,this[_0x15aeae(0x6a5)]=null,this['anchor']['x']=0.5,this[_0x15aeae(0x5dc)]['y']=0x0;},Sprite_EnemyName['prototype']['createAttachedSprites']=function(){const _0x244dce=_0xe55837;VisuMZ['BattleCore']['Settings'][_0x244dce(0x214)][_0x244dce(0x2f1)]&&(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x244dce(0x9e6)](this['_stateIconSprite']));},Sprite_EnemyName[_0xe55837(0x392)]['bitmapWidth']=function(){return Graphics['boxWidth'];},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x35d)]=function(){const _0x1cac5f=_0xe55837;return this[_0x1cac5f(0xa3f)]=this['_lineHeight']||Window_Base[_0x1cac5f(0x392)][_0x1cac5f(0x4ac)]()||0x24,this[_0x1cac5f(0xa3f)]*0x4;},Sprite_EnemyName['prototype'][_0xe55837(0x533)]=function(){const _0x291ac9=_0xe55837;return VisuMZ['BattleCore'][_0x291ac9(0x108)][_0x291ac9(0x214)][_0x291ac9(0x44f)]||$gameSystem[_0x291ac9(0x8ae)]();},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x505)]=function(_0x3b6740){const _0x54e998=_0xe55837;this[_0x54e998(0x6a5)]=_0x3b6740;},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x59f)]=function(){const _0x1d62bf=_0xe55837;Sprite_Name[_0x1d62bf(0x392)][_0x1d62bf(0x59f)]['call'](this),this[_0x1d62bf(0x9c0)](),this[_0x1d62bf(0x9d4)](),this[_0x1d62bf(0x361)](),this['updateOpacity']();},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x71e)]=function(){const _0x44334e=_0xe55837;this[_0x44334e(0x309)]=undefined;const _0x26bf9d=this[_0x44334e(0x625)](),_0x132142=this[_0x44334e(0x69f)](),_0x4c89cf=Window_Base[_0x44334e(0x392)][_0x44334e(0x4ac)]();this[_0x44334e(0x1fa)](),this[_0x44334e(0x881)][_0x44334e(0x8d7)](),this[_0x44334e(0x881)][_0x44334e(0x444)](_0x26bf9d,0x0,0x0,_0x132142,_0x4c89cf,_0x44334e(0x89d));},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x9c0)]=function(){const _0x34f353=_0xe55837;if(!this[_0x34f353(0x6a5)])return;if(this[_0x34f353(0x341)]!==this[_0x34f353(0x6a5)][_0x34f353(0x341)]){if(_0x34f353(0x27a)===_0x34f353(0x760)){function _0x261eeb(){const _0x1bc5a7=_0x34f353;this[_0x1bc5a7(0x3c7)]=_0x1bc5a7(0x9c1);}}else this[_0x34f353(0x62b)](this[_0x34f353(0x6a5)][_0x34f353(0x341)]);}},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x9d4)]=function(){const _0x4a171b=_0xe55837;if(!this[_0x4a171b(0x6a5)])return;this[_0x4a171b(0xa3f)]=this['_lineHeight']||Window_Base[_0x4a171b(0x392)]['lineHeight'](),this['x']=this[_0x4a171b(0x6a5)][_0x4a171b(0xa0)],this['y']=this[_0x4a171b(0x6a5)][_0x4a171b(0x937)]-this['_lineHeight']*0.5;const _0x1a09e5=VisuMZ[_0x4a171b(0x278)][_0x4a171b(0x108)][_0x4a171b(0x214)];this['x']+=_0x1a09e5[_0x4a171b(0x5c9)]||0x0,this['y']+=_0x1a09e5[_0x4a171b(0x35b)]||0x0;},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x361)]=function(){const _0x53607d=_0xe55837;this[_0x53607d(0x49f)]();},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x49f)]=function(){const _0x33a2a4=_0xe55837;if(!this[_0x33a2a4(0x5c2)])return;if(this[_0x33a2a4(0x341)]!==this[_0x33a2a4(0x5c2)][_0x33a2a4(0x341)]){if(_0x33a2a4(0x19b)!=='HMbKy')this[_0x33a2a4(0x5c2)][_0x33a2a4(0x62b)](this[_0x33a2a4(0x341)]);else{function _0x51a0db(){const _0x51b58f=_0x33a2a4;_0x65057a-=_0x5a5a8a[_0x51b58f(0x202)]();}}}const _0x427fcb=this['textWidth']();this['_lineHeight']=this['_lineHeight']||Window_Base['prototype'][_0x33a2a4(0x4ac)](),this[_0x33a2a4(0x5c2)]['x']=Math[_0x33a2a4(0x498)]((_0x427fcb+ImageManager[_0x33a2a4(0x3dd)])/0x2)+0x8,this[_0x33a2a4(0x5c2)]['y']=this['_lineHeight']/0x2;const _0x57183e=VisuMZ[_0x33a2a4(0x278)][_0x33a2a4(0x108)]['Enemy'];this['_stateIconSprite']['x']+=_0x57183e[_0x33a2a4(0x98f)]||0x0,this[_0x33a2a4(0x5c2)]['y']+=_0x57183e[_0x33a2a4(0x150)]||0x0;},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x592)]=function(){const _0x421a8f=_0xe55837,_0xe83ac1=this[_0x421a8f(0x53e)]();if(_0xe83ac1&&this['opacity']<0xff)this[_0x421a8f(0x863)]+=0x10;else{if(!_0xe83ac1&&this['opacity']>0x0){if(_0x421a8f(0x8d6)===_0x421a8f(0x8d6))this[_0x421a8f(0x863)]-=0x10;else{function _0x2ff0a8(){const _0x803916=_0x421a8f;this[_0x803916(0x37b)]+=_0x9f44fc[_0x803916(0x9be)](),this[_0x803916(0x5e9)]['y']+=_0x321f78[_0x803916(0x58b)]();}}}}},Sprite_EnemyName['prototype'][_0xe55837(0x53e)]=function(){const _0x17595e=_0xe55837;if(!this['_battler'])return![];else{if(this['_battler'][_0x17595e(0xb6)]())return![];else{if(!this[_0x17595e(0x341)][_0x17595e(0xa6c)]()){if(_0x17595e(0x970)==='XXAJK')return![];else{function _0x2927df(){const _0x5a6aba=_0x17595e;_0x2a6d53[_0x5a6aba(0x278)]['Window_BattleLog_performReflection'][_0x5a6aba(0x782)](this,_0x51df92),this[_0x5a6aba(0x996)]();}}}else{if(this[_0x17595e(0x26d)]())return!![];else{if(this[_0x17595e(0x4fd)]()){if('ZmKCU'!=='ZmKCU'){function _0xfb18e8(){const _0x38776a=_0x17595e;this[_0x38776a(0x779)]=0x0,this[_0x38776a(0x9ca)]=0x0;}}else return!![];}else{if(SceneManager[_0x17595e(0x1c8)][_0x17595e(0xdc)]&&SceneManager[_0x17595e(0x1c8)]['_enemyWindow'][_0x17595e(0x88c)]&&SceneManager[_0x17595e(0x1c8)][_0x17595e(0xdc)][_0x17595e(0xa5b)]['includes'](this[_0x17595e(0x341)])){if(_0x17595e(0x3ab)!=='kbKyq')return!![];else{function _0x11913b(){const _0x2a6134=_0x17595e;return this[_0x2a6134(0x206)]('DTB');}}}else{if(this[_0x17595e(0x863)]>0x0)return![];}}}}}}},Sprite_EnemyName['prototype'][_0xe55837(0x26d)]=function(){return![];},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x4fd)]=function(){const _0x530220=_0xe55837;return VisuMZ['BattleCore'][_0x530220(0x108)][_0x530220(0x214)]['NameAlwaysVisible'];},Sprite_EnemyName[_0xe55837(0x392)][_0xe55837(0x411)]=function(){const _0x445738=_0xe55837;if(!this['_battler'])return 0x0;if(this[_0x445738(0x309)])return this[_0x445738(0x309)];const _0x561f4e=this[_0x445738(0x625)]();return this[_0x445738(0x1fa)](),this[_0x445738(0x309)]=this['bitmap'][_0x445738(0x7b1)](_0x561f4e)||0x1,this[_0x445738(0x309)];},VisuMZ[_0xe55837(0x278)]['Sprite_Battleback_adjustPosition']=Sprite_Battleback[_0xe55837(0x392)][_0xe55837(0xa23)],Sprite_Battleback['prototype'][_0xe55837(0xa23)]=function(){const _0x2ea1e0=_0xe55837,_0x5b2846=VisuMZ['BattleCore'][_0x2ea1e0(0x108)]['Battleback'];if(!_0x5b2846)return VisuMZ[_0x2ea1e0(0x278)][_0x2ea1e0(0x48e)][_0x2ea1e0(0x782)](this);const _0x17891e=String(_0x5b2846['DefaultStyle'])||'MZ';switch(_0x17891e){case'MZ':VisuMZ[_0x2ea1e0(0x278)][_0x2ea1e0(0x48e)][_0x2ea1e0(0x782)](this);break;case _0x2ea1e0(0x1db):this[_0x2ea1e0(0xe6)]();break;case _0x2ea1e0(0x4c0):this[_0x2ea1e0(0x130)]();break;case _0x2ea1e0(0x2a4):this['adjustPosition_ScaleDown']();break;case'ScaleUp':this['adjustPosition_ScaleUp']();break;}},Sprite_Battleback[_0xe55837(0x392)]['adjustPosition_1for1']=function(){const _0x201973=_0xe55837;this['width']=Graphics[_0x201973(0x124)],this[_0x201973(0x97c)]=Graphics['height'];const _0x3130df=0x1;this['scale']['x']=_0x3130df,this['scale']['y']=_0x3130df,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0xe55837(0x392)][_0xe55837(0x130)]=function(){const _0x2b3ea5=_0xe55837;this[_0x2b3ea5(0x124)]=Graphics['width'],this[_0x2b3ea5(0x97c)]=Graphics['height'];const _0x51e1e5=this['width']/this[_0x2b3ea5(0x881)][_0x2b3ea5(0x124)],_0x264bb5=this[_0x2b3ea5(0x97c)]/this['bitmap'][_0x2b3ea5(0x97c)],_0xc8fea4=Math[_0x2b3ea5(0x220)](_0x51e1e5,_0x264bb5);this['scale']['x']=_0xc8fea4,this['scale']['y']=_0xc8fea4,this['x']=(Graphics['width']-this[_0x2b3ea5(0x124)])/0x2,this['y']=Graphics[_0x2b3ea5(0x97c)]-this[_0x2b3ea5(0x97c)];},Sprite_Battleback[_0xe55837(0x392)][_0xe55837(0x1e2)]=function(){const _0x373161=_0xe55837;this[_0x373161(0x124)]=Graphics[_0x373161(0x124)],this[_0x373161(0x97c)]=Graphics['height'];const _0x5eaf25=Math[_0x373161(0x6a9)](0x1,this[_0x373161(0x124)]/this[_0x373161(0x881)][_0x373161(0x124)]),_0x5330df=Math[_0x373161(0x6a9)](0x1,this[_0x373161(0x97c)]/this[_0x373161(0x881)]['height']),_0x2e8d65=Math[_0x373161(0x220)](_0x5eaf25,_0x5330df);this[_0x373161(0x23d)]['x']=_0x2e8d65,this[_0x373161(0x23d)]['y']=_0x2e8d65,this['x']=(Graphics[_0x373161(0x124)]-this[_0x373161(0x124)])/0x2,this['y']=Graphics['height']-this[_0x373161(0x97c)];},Sprite_Battleback[_0xe55837(0x392)][_0xe55837(0x4ab)]=function(){const _0x4a67df=_0xe55837;this[_0x4a67df(0x124)]=Graphics[_0x4a67df(0x124)],this[_0x4a67df(0x97c)]=Graphics[_0x4a67df(0x97c)];const _0x386e99=Math[_0x4a67df(0x220)](0x1,this[_0x4a67df(0x124)]/this[_0x4a67df(0x881)]['width']),_0x3dbc28=Math[_0x4a67df(0x220)](0x1,this[_0x4a67df(0x97c)]/this['bitmap'][_0x4a67df(0x97c)]),_0x38886d=Math['max'](_0x386e99,_0x3dbc28);this['scale']['x']=_0x38886d,this[_0x4a67df(0x23d)]['y']=_0x38886d,this['x']=(Graphics['width']-this['width'])/0x2,this['y']=Graphics[_0x4a67df(0x97c)]-this[_0x4a67df(0x97c)];},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x679)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle['prototype'][_0xe55837(0x921)]=function(){return 0x0;},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x8fb)]=function(){return 0x0;},VisuMZ[_0xe55837(0x278)][_0xe55837(0x79b)]=Spriteset_Battle[_0xe55837(0x392)]['createLowerLayer'],Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x648)]=function(){const _0x2d7580=_0xe55837;VisuMZ[_0x2d7580(0x278)]['Spriteset_Battle_createLowerLayer'][_0x2d7580(0x782)](this),this[_0x2d7580(0x484)](),this[_0x2d7580(0x273)](),this[_0x2d7580(0x1a2)]();},VisuMZ['BattleCore'][_0xe55837(0xbb)]=Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x59f)],Spriteset_Battle['prototype']['update']=function(){const _0x432798=_0xe55837;VisuMZ['BattleCore'][_0x432798(0xbb)][_0x432798(0x782)](this),this[_0x432798(0x920)]();},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x484)]=function(){const _0x30ea50=_0xe55837;this[_0x30ea50(0x938)]=new Weather(),this[_0x30ea50(0x466)][_0x30ea50(0x9e6)](this[_0x30ea50(0x938)]);},Spriteset_Battle[_0xe55837(0x392)]['updateWeather']=function(){const _0x370e46=_0xe55837;this[_0x370e46(0x938)][_0x370e46(0x695)]=$gameScreen[_0x370e46(0x5a6)](),this[_0x370e46(0x938)]['power']=$gameScreen[_0x370e46(0x676)]();},Game_Interpreter[_0xe55837(0x392)][_0xe55837(0xa27)]=function(_0x4cb300){const _0x55f2b4=_0xe55837;$gameScreen[_0x55f2b4(0x60d)](_0x4cb300[0x0],_0x4cb300[0x1],_0x4cb300[0x2]);if(_0x4cb300[0x3])this[_0x55f2b4(0xea)](_0x4cb300[0x2]);return!![];},VisuMZ[_0xe55837(0x278)][_0xe55837(0x3e0)]=Game_Interpreter[_0xe55837(0x392)][_0xe55837(0x14d)],Game_Interpreter[_0xe55837(0x392)][_0xe55837(0x14d)]=function(_0x4f9e0f){const _0x13e979=_0xe55837;if(SceneManager[_0x13e979(0x1d0)]())return SceneManager[_0x13e979(0x1c8)][_0x13e979(0x54d)][_0x13e979(0x7a2)](_0x4f9e0f[0x0],_0x4f9e0f[0x1]),!![];else{if(_0x13e979(0x47f)!==_0x13e979(0x624))return VisuMZ['BattleCore'][_0x13e979(0x3e0)][_0x13e979(0x782)](this,_0x4f9e0f);else{function _0x42ea30(){const _0x10af9c=_0x13e979;this[_0x10af9c(0x8f4)]=this[_0x10af9c(0x82d)](this['_floatHeight'],this[_0x10af9c(0xe9)],_0x287e9d,_0x267ce8,_0x5a1d0d);}}}},Spriteset_Battle['prototype'][_0xe55837(0x15a)]=function(_0x439ab3,_0x339a2a){const _0x1049be=_0xe55837;_0x439ab3[_0x1049be(0x881)]=_0x339a2a;},Spriteset_Battle[_0xe55837(0x392)]['changeBattlebacks']=function(_0x128a92,_0x21296a){const _0xcb0e9=_0xe55837;_0x128a92=_0x128a92||'',_0x21296a=_0x21296a||'';if(_0x128a92===''&&_0x21296a===''){if(_0xcb0e9(0x9b5)!==_0xcb0e9(0x9b5)){function _0x33a717(){const _0x2889ec=_0xcb0e9;_0x4c57f0[_0x2889ec(0x278)]['Game_Map_setupBattleback'][_0x2889ec(0x782)](this),this[_0x2889ec(0x15f)]();}}else _0x128a92=this[_0xcb0e9(0x38c)][_0xcb0e9(0x47c)](),_0x21296a=this['_back2Sprite'][_0xcb0e9(0x822)]();}const _0x5b1309=ImageManager[_0xcb0e9(0x4b2)](_0x128a92),_0x190119=ImageManager[_0xcb0e9(0x558)](_0x21296a);_0x5b1309[_0xcb0e9(0x2a8)](this[_0xcb0e9(0x8c9)][_0xcb0e9(0x51d)](this,this['_back1Sprite'],this[_0xcb0e9(0x997)],_0x5b1309,_0x190119));},Spriteset_Battle['prototype'][_0xe55837(0x8c9)]=function(_0x4884ac,_0xac7bf1,_0x11fe50,_0x514b73){const _0x43d602=_0xe55837;_0x514b73[_0x43d602(0x2a8)](this[_0x43d602(0xee)][_0x43d602(0x51d)](this,_0x4884ac,_0xac7bf1,_0x11fe50,_0x514b73));},Spriteset_Battle['prototype'][_0xe55837(0xee)]=function(_0x5eaed7,_0x2ef920,_0x197129,_0x34ebe0){const _0x4ca36a=_0xe55837;_0x5eaed7[_0x4ca36a(0x881)]=_0x197129,_0x2ef920[_0x4ca36a(0x881)]=_0x34ebe0,_0x5eaed7[_0x4ca36a(0xa23)](),_0x2ef920[_0x4ca36a(0xa23)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x54a)]=Spriteset_Battle['prototype'][_0xe55837(0xa67)],Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0xa67)]=function(){const _0x37a8a6=_0xe55837;VisuMZ[_0x37a8a6(0x278)][_0x37a8a6(0x54a)][_0x37a8a6(0x782)](this),this['createBattleFieldBattleCore']();},Spriteset_Battle[_0xe55837(0x392)]['createBattleFieldBattleCore']=function(){const _0x462be6=_0xe55837;this[_0x462be6(0x83e)](),this[_0x462be6(0x483)](),this[_0x462be6(0x7f7)](),this[_0x462be6(0xb5)]();},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x83e)]=function(){const _0x5a52da=_0xe55837;this[_0x5a52da(0x3c0)]=new Sprite(),this[_0x5a52da(0x466)][_0x5a52da(0x9e6)](this[_0x5a52da(0x3c0)]);},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x483)]=function(){const _0x43cc33=_0xe55837;this[_0x43cc33(0x4fc)]=new Sprite(),this['_battleField'][_0x43cc33(0x9e6)](this['_animationContainer']);},Spriteset_Battle[_0xe55837(0x392)]['createDamageContainer']=function(){const _0x1a2f07=_0xe55837;this['_damageContainer']=new Sprite(),this['_damageContainer']['x']=this[_0x1a2f07(0x466)]['x'],this[_0x1a2f07(0x700)]['y']=this['_battleField']['y'],this[_0x1a2f07(0x9e6)](this[_0x1a2f07(0x700)]);},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0xb5)]=function(){const _0xfb3b4f=_0xe55837;if(!this[_0xfb3b4f(0x679)]())return;this['_battlerContainer'][_0xfb3b4f(0x23d)]['x']=-0x1,this[_0xfb3b4f(0x3c0)]['x']=this[_0xfb3b4f(0x466)][_0xfb3b4f(0x124)],this['_animationContainer'][_0xfb3b4f(0x23d)]['x']=-0x1,this[_0xfb3b4f(0x4fc)]['x']=this[_0xfb3b4f(0x466)]['width'],this[_0xfb3b4f(0x700)]['scale']['x']=-0x1,this[_0xfb3b4f(0x700)]['x']=this[_0xfb3b4f(0x466)]['x']+this[_0xfb3b4f(0x466)][_0xfb3b4f(0x124)];},Spriteset_Battle[_0xe55837(0x392)]['createEnemies']=function(){const _0x314fc3=_0xe55837;Imported[_0x314fc3(0x209)]&&VisuMZ['CoreEngine']['Settings']['UI'][_0x314fc3(0x4c1)]&&this[_0x314fc3(0x2d4)]();const _0xeb3a1b=$gameTroop[_0x314fc3(0x4a8)](),_0x19da7e=[];for(const _0x1640a7 of _0xeb3a1b){_0x19da7e[_0x314fc3(0x30a)](new Sprite_Enemy(_0x1640a7));}_0x19da7e['sort'](this[_0x314fc3(0x8d4)][_0x314fc3(0x51d)](this));for(const _0x51d500 of _0x19da7e){if('JZpnk'===_0x314fc3(0x23c)){function _0x45c61a(){const _0x3b8fef=_0x314fc3;_0x2187db+=_0x37c7eb[_0x3b8fef(0x107)]()?-_0x29ef72:_0x3119c7,_0x361625+=_0x4d7950['isActor']()?-_0x4416c7:_0x348d04;}}else this[_0x314fc3(0x3c0)][_0x314fc3(0x9e6)](_0x51d500);}this[_0x314fc3(0x2d8)]=_0x19da7e;},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x579)]=function(){const _0x1c35d1=_0xe55837;this['_actorSprites']=[];for(let _0x49a328=0x0;_0x49a328<$gameParty[_0x1c35d1(0x9e8)]();_0x49a328++){const _0x5327e8=$gameParty[_0x1c35d1(0x629)]()[_0x49a328],_0x36c586=new Sprite_Actor();_0x36c586[_0x1c35d1(0x547)](_0x5327e8),_0x36c586[_0x1c35d1(0x796)](_0x5327e8),_0x36c586[_0x1c35d1(0x59f)](),this[_0x1c35d1(0x5ba)][_0x1c35d1(0x30a)](_0x36c586),this[_0x1c35d1(0x3c0)][_0x1c35d1(0x9e6)](_0x36c586);}},Spriteset_Battle[_0xe55837(0x392)]['createAnimationSprite']=function(_0x1c4cf0,_0x28c404,_0x9e8e8e,_0x86b2ad){const _0x26a741=_0xe55837,_0x1f8a0f=this[_0x26a741(0x21e)](_0x28c404),_0x2b6a95=new(_0x1f8a0f?Sprite_AnimationMV:Sprite_Animation)(),_0x3d8ba7=this['makeTargetSprites'](_0x1c4cf0);this['animationShouldMirror'](_0x1c4cf0[0x0])&&(_0x9e8e8e=!_0x9e8e8e),_0x2b6a95[_0x26a741(0x1af)]=_0x1c4cf0,_0x2b6a95['setup'](_0x3d8ba7,_0x28c404,_0x9e8e8e,_0x86b2ad),this['addAnimationSpriteToContainer'](_0x2b6a95);},Spriteset_Battle[_0xe55837(0x392)]['addAnimationSpriteToContainer']=function(_0x56a895){const _0x431452=_0xe55837;if(this[_0x431452(0x4d8)](_0x56a895)){if('bLUOs'===_0x431452(0x914)){function _0x2c6f1a(){const _0x270443=_0x431452;_0x24e2d6['prototype'][_0x270443(0x9cd)][_0x270443(0x782)](this),this[_0x270443(0x490)]=this[_0x270443(0x67b)]();}}else this['battleStatusWindowAnimationContainer']()[_0x431452(0x9e6)](_0x56a895);}else this[_0x431452(0x4fc)][_0x431452(0x9e6)](_0x56a895);this[_0x431452(0x45c)][_0x431452(0x30a)](_0x56a895);},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x4d8)]=function(_0x15b08c){const _0x361057=_0xe55837;if(!_0x15b08c)return![];if(!_0x15b08c[_0x361057(0x176)])return![];if(_0x15b08c[_0x361057(0x176)]['displayType']!==0x0)return![];if(!_0x15b08c[_0x361057(0x1af)][0x0])return![];if(!_0x15b08c[_0x361057(0x1af)][0x0][_0x361057(0x107)]())return![];if($gameSystem[_0x361057(0x22a)]())return![];if(!this[_0x361057(0xa46)]())return![];return Window_BattleStatus[_0x361057(0x392)][_0x361057(0x2cc)]()===_0x361057(0x85f);},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0xa46)]=function(){const _0x1dc789=_0xe55837;if(!SceneManager[_0x1dc789(0x1c8)])return;if(!SceneManager['_scene'][_0x1dc789(0x418)])return;if(!SceneManager['_scene'][_0x1dc789(0x418)][_0x1dc789(0x1bf)])return;return SceneManager[_0x1dc789(0x1c8)]['_statusWindow']['_effectsContainer'];},Spriteset_Battle[_0xe55837(0x392)]['removeAnimation']=function(_0x2db3e9){const _0x49b098=_0xe55837;this[_0x49b098(0xa53)](_0x2db3e9);for(const _0xc7dabc of _0x2db3e9['targetObjects']){if('BqPmV'!==_0x49b098(0x546)){function _0x45c8f8(){return _0x25dcd4(_0x41882f['$1'])/0x64;}}else _0xc7dabc[_0x49b098(0xa63)]&&_0xc7dabc[_0x49b098(0xa63)]();}_0x2db3e9['destroy']();},Spriteset_Battle[_0xe55837(0x392)]['removeAnimationFromContainer']=function(_0x2ac981){const _0x20534f=_0xe55837;this[_0x20534f(0x45c)][_0x20534f(0x1ad)](_0x2ac981),this[_0x20534f(0x4d8)](_0x2ac981)?this[_0x20534f(0xa46)]()[_0x20534f(0x8c5)](_0x2ac981):this[_0x20534f(0x4fc)]['removeChild'](_0x2ac981);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x4fe)]=Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x53b)],Spriteset_Battle['prototype']['updateActors']=function(){const _0x2f3713=_0xe55837;VisuMZ[_0x2f3713(0x278)][_0x2f3713(0x4fe)]['call'](this),this[_0x2f3713(0x876)]();},Spriteset_Battle[_0xe55837(0x392)]['updateBattlerContainer']=function(){const _0x870082=_0xe55837;this[_0x870082(0x3c0)][_0x870082(0x6a6)][_0x870082(0x76d)](this['compareBattlerSprites'][_0x870082(0x51d)](this)),this[_0x870082(0xa5f)]();},Spriteset_Battle[_0xe55837(0x392)]['compareBattlerSprites']=function(_0x206ef4,_0x55c81b){const _0x3e783f=_0xe55837;if(VisuMZ[_0x3e783f(0x278)][_0x3e783f(0x108)]['Actor'][_0x3e783f(0x77f)]){if('BwqtR'===_0x3e783f(0x98e)){function _0x9a94ba(){const _0x4f5f7f=_0x3e783f;this['updateStateSprite'](),this[_0x4f5f7f(0x6f7)]();}}else{if(_0x206ef4[_0x3e783f(0x341)]&&_0x55c81b[_0x3e783f(0x341)]){if(_0x206ef4[_0x3e783f(0x341)]['isActor']()&&_0x55c81b[_0x3e783f(0x341)][_0x3e783f(0xa0a)]())return 0x1;else{if(_0x55c81b['_battler'][_0x3e783f(0x107)]()&&_0x206ef4[_0x3e783f(0x341)][_0x3e783f(0xa0a)]()){if(_0x3e783f(0x67a)===_0x3e783f(0xa4b)){function _0x348ba7(){const _0x2bf017=_0x3e783f;this['_frontAttachmentSprite']&&this[_0x2bf017(0x9e6)](this[_0x2bf017(0xa3d)]);}}else return-0x1;}}}}}return _0x206ef4[_0x3e783f(0x937)]!==_0x55c81b[_0x3e783f(0x937)]?_0x206ef4[_0x3e783f(0x937)]-_0x55c81b[_0x3e783f(0x937)]:_0x55c81b['spriteId']-_0x206ef4[_0x3e783f(0x741)];},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0xa5f)]=function(){const _0x191757=_0xe55837;if(!VisuMZ['BattleCore']['Settings'][_0x191757(0x948)][_0x191757(0x98d)])return;const _0x115367=BattleManager[_0x191757(0xec)];if(_0x115367){if(_0x115367[_0x191757(0x107)]()&&!$gameSystem[_0x191757(0x22a)]())return;const _0x3c2bfe=_0x115367[_0x191757(0xe1)]();if(_0x3c2bfe&&_0x115367[_0x191757(0x107)]())this['_battlerContainer'][_0x191757(0x9e6)](_0x3c2bfe);}},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0xce)]=function(){const _0x448952=_0xe55837;for(const _0x52beb0 of $gameParty[_0x448952(0x7f1)]()){if(!_0x52beb0)continue;if(!_0x52beb0[_0x448952(0xe1)]())continue;_0x52beb0['battler']()[_0x448952(0x8b2)]=!![],_0x52beb0[_0x448952(0xe1)]()['retreat']();}},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x273)]=function(){const _0x51256e=_0xe55837;this[_0x51256e(0x661)]=new Sprite(),this['_battleField'][_0x51256e(0x9e6)](this[_0x51256e(0x661)]);},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x1a2)]=function(){const _0x24f65c=_0xe55837;if(VisuMZ[_0x24f65c(0x278)][_0x24f65c(0x108)][_0x24f65c(0x214)][_0x24f65c(0x3e5)])return;this[_0x24f65c(0xa4f)]=new Sprite(),this[_0x24f65c(0x661)][_0x24f65c(0x9e6)](this[_0x24f65c(0xa4f)]);for(const _0x22a7f9 of this[_0x24f65c(0x2d8)]){const _0x4559cd=new Sprite_EnemyName();this[_0x24f65c(0xa4f)][_0x24f65c(0x9e6)](_0x4559cd),_0x4559cd['linkSprite'](_0x22a7f9);}},Spriteset_Battle['prototype'][_0xe55837(0x9c8)]=function(){return![];},Spriteset_Battle[_0xe55837(0x392)]['isAnyoneFloating']=function(){const _0x5254ce=_0xe55837;return this['battlerSprites']()[_0x5254ce(0x9e7)](_0x250c62=>_0x250c62[_0x5254ce(0xa5c)]());},Spriteset_Battle['prototype'][_0xe55837(0x404)]=function(){const _0x1a5046=_0xe55837;return this['battlerSprites']()['some'](_0x301e3a=>_0x301e3a[_0x1a5046(0x73e)]());},Spriteset_Battle['prototype'][_0xe55837(0x575)]=function(){const _0x2d75c7=_0xe55837;return this[_0x2d75c7(0x4b6)]()[_0x2d75c7(0x9e7)](_0x1383d9=>_0x1383d9['isGrowing']());},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x1d5)]=function(){return this['battlerSprites']()['some'](_0xcf02f2=>_0xcf02f2['isSkewing']());},Spriteset_Battle[_0xe55837(0x392)][_0xe55837(0x372)]=function(){const _0x1d6f57=_0xe55837;return this[_0x1d6f57(0x4b6)]()[_0x1d6f57(0x9e7)](_0x45bd07=>_0x45bd07[_0x1d6f57(0x4fb)]());},Spriteset_Battle['prototype']['isAnyoneChangingOpacity']=function(){const _0xf4c3bd=_0xe55837;return this[_0xf4c3bd(0x4b6)]()[_0xf4c3bd(0x9e7)](_0x5770c5=>_0x5770c5['isChangingOpacity']());},VisuMZ['BattleCore'][_0xe55837(0x85b)]=Window_ItemList[_0xe55837(0x392)]['maxCols'],Window_ItemList[_0xe55837(0x392)][_0xe55837(0x916)]=function(){const _0x1818d6=_0xe55837;if(SceneManager[_0x1818d6(0x1d0)]()){if(SceneManager[_0x1818d6(0x1c8)][_0x1818d6(0x2cc)]()===_0x1818d6(0x1bb)){if('eTkvy'===_0x1818d6(0xa5d)){function _0x4a7c0a(){const _0x58f69d=_0x1818d6;this['push'](_0x58f69d(0x726),_0x56c6b2);if(!_0x1e47b0[_0x58f69d(0x278)][_0x58f69d(0x108)][_0x58f69d(0x30b)][_0x58f69d(0x975)])return;this['push'](_0x58f69d(0x390),_0x4566ef[_0x58f69d(0x853)][_0x58f69d(0x11c)](_0x42cb33[_0x58f69d(0x625)]()));}}else return VisuMZ[_0x1818d6(0x278)][_0x1818d6(0x108)]['BattleLayout'][_0x1818d6(0x64e)];}else return VisuMZ['BattleCore'][_0x1818d6(0x108)][_0x1818d6(0x22d)][_0x1818d6(0x276)];}else return VisuMZ[_0x1818d6(0x278)][_0x1818d6(0x85b)][_0x1818d6(0x782)](this);},VisuMZ[_0xe55837(0x278)]['Window_SkillList_maxCols']=Window_SkillList[_0xe55837(0x392)][_0xe55837(0x916)],Window_SkillList[_0xe55837(0x392)][_0xe55837(0x916)]=function(){const _0x4aebcf=_0xe55837;if(SceneManager[_0x4aebcf(0x1d0)]()){if('TeXMu'!==_0x4aebcf(0x478)){if(SceneManager[_0x4aebcf(0x1c8)][_0x4aebcf(0x2cc)]()==='border'){if(_0x4aebcf(0x7f9)===_0x4aebcf(0x572)){function _0x12c110(){const _0x3b216d=_0x4aebcf;this[_0x3b216d(0x1b7)]()&&this[_0x3b216d(0x634)]();}}else return VisuMZ['BattleCore'][_0x4aebcf(0x108)][_0x4aebcf(0x22d)][_0x4aebcf(0x64e)];}else{if('tMNLw'===_0x4aebcf(0xfa))return VisuMZ[_0x4aebcf(0x278)]['Settings']['BattleLayout'][_0x4aebcf(0x276)];else{function _0x1d9db7(){const _0x4623c2=_0x4aebcf;_0x46652b['prototype'][_0x4623c2(0x3a8)][_0x4623c2(0x782)](this);}}}}else{function _0x29b2b2(){const _0x153a1f=_0x4aebcf;_0x439b66[_0x153a1f(0x278)]['Scene_Battle_onEnemyCancel']['call'](this);}}}else return VisuMZ['BattleCore'][_0x4aebcf(0x77b)][_0x4aebcf(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x93b)]=Window_Options['prototype'][_0xe55837(0x7b8)],Window_Options[_0xe55837(0x392)]['addGeneralOptions']=function(){const _0x37e310=_0xe55837;VisuMZ[_0x37e310(0x278)][_0x37e310(0x93b)][_0x37e310(0x782)](this),this[_0x37e310(0x3a6)](),this['addShowHpGaugeCommand']();},Window_Options['prototype'][_0xe55837(0x3a6)]=function(){const _0x5482b1=_0xe55837;VisuMZ['BattleCore'][_0x5482b1(0x108)]['AutoBattle'][_0x5482b1(0xdd)]&&(this[_0x5482b1(0x31a)](),this[_0x5482b1(0xa31)]());},Window_Options['prototype'][_0xe55837(0x38d)]=function(){const _0x420fa3=_0xe55837;if(!VisuMZ['BattleCore']['Settings'][_0x420fa3(0x670)][_0x420fa3(0x3de)])return;const _0x348626=TextManager['visualHpGauge'],_0x34bd3b='visualHpGauge';this[_0x420fa3(0x29f)](_0x348626,_0x34bd3b);},Window_Options[_0xe55837(0x392)][_0xe55837(0x31a)]=function(){const _0x5e2171=_0xe55837,_0xfdb1b6=TextManager['autoBattleStart'],_0x289480='autoBattleAtStart';this[_0x5e2171(0x29f)](_0xfdb1b6,_0x289480);},Window_Options[_0xe55837(0x392)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0x4ef4f5=_0xe55837,_0x2b13af=TextManager[_0x4ef4f5(0x22c)],_0x41dd41='autoBattleUseSkills';this['addCommand'](_0x2b13af,_0x41dd41);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x917)]=Window_Options[_0xe55837(0x392)][_0xe55837(0x9bf)],Window_Options[_0xe55837(0x392)][_0xe55837(0x9bf)]=function(_0xad81aa){const _0x411827=_0xe55837,_0x3a407e=this[_0x411827(0x566)](_0xad81aa);return _0x3a407e===_0x411827(0x9d2)?this['statusTextAutoBattleStyle']():VisuMZ[_0x411827(0x278)]['Window_Options_statusText']['call'](this,_0xad81aa);},Window_Options[_0xe55837(0x392)][_0xe55837(0xab)]=function(){const _0x59ca3d=_0xe55837,_0x26ebe2=VisuMZ['BattleCore'][_0x59ca3d(0x108)][_0x59ca3d(0x193)],_0x123da3=this['getConfigValue'](_0x59ca3d(0x9d2));return _0x123da3?_0x26ebe2['StyleON']:_0x26ebe2[_0x59ca3d(0x72d)];},Window_ShopStatus[_0xe55837(0x392)]['getItemDamageAmountLabelBattleCore']=function(){const _0x18ca4f=_0xe55837,_0x3f60e4=DataManager[_0x18ca4f(0x1b2)](this['_item']),_0x30c973=VisuMZ[_0x18ca4f(0x8fc)][_0x3f60e4];if(!_0x30c973)return this[_0x18ca4f(0x6ba)]();const _0x284e68=_0x18ca4f(0x781)[_0x18ca4f(0x11c)](this[_0x18ca4f(0x99)][_0x18ca4f(0x3ff)][_0x18ca4f(0x695)]),_0x2b2b6d=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x18ca4f(0x99)][_0x18ca4f(0x3ff)][_0x18ca4f(0x695)]];return _0x30c973[_0x284e68][_0x18ca4f(0x11c)](_0x2b2b6d);},Window_ShopStatus[_0xe55837(0x392)][_0xe55837(0x43d)]=function(){const _0x11f7ce=_0xe55837,_0x10f372=DataManager['getDamageStyle'](this['_item']),_0x43dd9e=VisuMZ[_0x11f7ce(0x8fc)][_0x10f372];if(!_0x43dd9e)return this[_0x11f7ce(0x360)]();return _0x43dd9e['DamageDisplay'][_0x11f7ce(0x782)](this);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x71f)]=Window_PartyCommand[_0xe55837(0x392)]['initialize'],Window_PartyCommand['prototype']['initialize']=function(_0x2263b3){const _0x597972=_0xe55837;VisuMZ[_0x597972(0x278)][_0x597972(0x71f)]['call'](this,_0x2263b3),this[_0x597972(0xa72)](_0x2263b3);},Window_PartyCommand['prototype'][_0xe55837(0xa72)]=function(_0x328767){const _0x2c9e4b=_0xe55837,_0x2f34be=new Rectangle(0x0,0x0,_0x328767[_0x2c9e4b(0x124)],_0x328767[_0x2c9e4b(0x97c)]);this[_0x2c9e4b(0x567)]=new Window_Base(_0x2f34be),this[_0x2c9e4b(0x567)][_0x2c9e4b(0x863)]=0x0,this[_0x2c9e4b(0x9e6)](this['_commandNameWindow']),this[_0x2c9e4b(0x36b)]();},Window_PartyCommand[_0xe55837(0x392)]['callUpdateHelp']=function(){const _0x5ba5ce=_0xe55837;Window_Command[_0x5ba5ce(0x392)][_0x5ba5ce(0x25b)][_0x5ba5ce(0x782)](this);if(this[_0x5ba5ce(0x567)])this['updateCommandNameWindow']();},Window_PartyCommand['prototype'][_0xe55837(0x36b)]=function(){const _0x5a2839=_0xe55837,_0x4906ec=this['_commandNameWindow'];_0x4906ec[_0x5a2839(0x9e1)]['clear']();const _0x136233=this[_0x5a2839(0x20e)](this[_0x5a2839(0x7a5)]());if(_0x136233==='icon'&&this[_0x5a2839(0x246)]()>0x0){const _0x145f93=this[_0x5a2839(0xd3)](this[_0x5a2839(0x7a5)]());let _0x32fa00=this['commandName'](this[_0x5a2839(0x7a5)]());_0x32fa00=_0x32fa00[_0x5a2839(0x1eb)](/\\I\[(\d+)\]/gi,''),_0x4906ec[_0x5a2839(0x491)](),this[_0x5a2839(0x4b0)](_0x32fa00,_0x145f93),this[_0x5a2839(0x5d8)](_0x32fa00,_0x145f93),this['commandNameWindowCenter'](_0x32fa00,_0x145f93);}},Window_PartyCommand[_0xe55837(0x392)]['commandNameWindowDrawBackground']=function(_0x3a42f,_0x37519b){},Window_PartyCommand[_0xe55837(0x392)]['commandNameWindowDrawText']=function(_0x4e3a68,_0x374264){const _0x238051=_0xe55837,_0x5e311d=this[_0x238051(0x567)];_0x5e311d[_0x238051(0x444)](_0x4e3a68,0x0,_0x374264['y'],_0x5e311d[_0x238051(0x3e9)],_0x238051(0x89d));},Window_PartyCommand['prototype']['commandNameWindowCenter']=function(_0x346d6a,_0x1283f6){const _0xad9f3b=_0xe55837,_0x3750e0=this[_0xad9f3b(0x567)],_0xc90e2b=$gameSystem['windowPadding'](),_0x11549b=_0x1283f6['x']+Math[_0xad9f3b(0x639)](_0x1283f6['width']/0x2)+_0xc90e2b;_0x3750e0['x']=_0x3750e0[_0xad9f3b(0x124)]/-0x2+_0x11549b,_0x3750e0['y']=Math[_0xad9f3b(0x639)](_0x1283f6[_0xad9f3b(0x97c)]/0x2);},Window_PartyCommand[_0xe55837(0x392)]['makeCommandList']=function(){const _0x31bf00=_0xe55837;this[_0x31bf00(0x340)](),this[_0x31bf00(0x270)](),this[_0x31bf00(0x222)](),this[_0x31bf00(0x75c)](),this[_0x31bf00(0x963)]();},Window_PartyCommand['prototype'][_0xe55837(0x340)]=function(){const _0x5ddeaf=_0xe55837,_0x48b0ff=this[_0x5ddeaf(0x967)](),_0x35368a=VisuMZ['BattleCore'][_0x5ddeaf(0x108)][_0x5ddeaf(0xa64)]['CmdIconFight'],_0x531650=_0x48b0ff===_0x5ddeaf(0x57c)?TextManager[_0x5ddeaf(0x893)]:'\x5cI[%1]%2'['format'](_0x35368a,TextManager['fight']),_0x4f3ef6=this[_0x5ddeaf(0xa73)]();this[_0x5ddeaf(0x29f)](_0x531650,_0x5ddeaf(0x893),_0x4f3ef6);},Window_PartyCommand['prototype'][_0xe55837(0xa73)]=function(){return!![];},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0x270)]=function(){const _0x5e96b2=_0xe55837;if(!this['isAutoBattleCommandAdded']())return;const _0x256c86=this[_0x5e96b2(0x967)](),_0x2231f1=VisuMZ[_0x5e96b2(0x278)][_0x5e96b2(0x108)]['PartyCmd']['CmdIconAutoBattle'],_0x51c1c7=_0x256c86===_0x5e96b2(0x57c)?TextManager[_0x5e96b2(0x6cd)]:_0x5e96b2(0x402)[_0x5e96b2(0x11c)](_0x2231f1,TextManager[_0x5e96b2(0x6cd)]),_0x1b5af5=this['isAutoBattleCommandEnabled']();this[_0x5e96b2(0x29f)](_0x51c1c7,_0x5e96b2(0x6cd),_0x1b5af5);},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0x89a)]=function(){const _0xe5f5bf=_0xe55837;return VisuMZ['BattleCore'][_0xe5f5bf(0x108)]['PartyCmd'][_0xe5f5bf(0x71c)];},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0x236)]=function(){return!![];},Window_PartyCommand[_0xe55837(0x392)]['addCustomCommands']=function(){},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0x75c)]=function(){const _0x5dc91d=_0xe55837;if(!this[_0x5dc91d(0x93d)]())return;const _0x5460bb=this[_0x5dc91d(0x967)](),_0x5c741d=VisuMZ['BattleCore']['Settings']['PartyCmd'][_0x5dc91d(0x4f9)],_0x59f01d=_0x5460bb==='text'?TextManager[_0x5dc91d(0xcb)]:_0x5dc91d(0x402)[_0x5dc91d(0x11c)](_0x5c741d,TextManager[_0x5dc91d(0xcb)]),_0x56e414=this['isOptionsCommandEnabled']();this[_0x5dc91d(0x29f)](_0x59f01d,_0x5dc91d(0xcb),_0x56e414);},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0x93d)]=function(){const _0x3cb02f=_0xe55837;return VisuMZ[_0x3cb02f(0x278)][_0x3cb02f(0x108)][_0x3cb02f(0xa64)][_0x3cb02f(0x2ff)];},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0x89e)]=function(){return!![];},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0x963)]=function(){const _0x2b46f5=_0xe55837,_0x544fa0=this['commandStyle'](),_0x552eaa=VisuMZ[_0x2b46f5(0x278)][_0x2b46f5(0x108)][_0x2b46f5(0xa64)]['CmdIconEscape'],_0x3ec084=_0x544fa0===_0x2b46f5(0x57c)?TextManager[_0x2b46f5(0x366)]:_0x2b46f5(0x402)[_0x2b46f5(0x11c)](_0x552eaa,TextManager[_0x2b46f5(0x366)]),_0x4cc6d2=this[_0x2b46f5(0xb4)]();this['addCommand'](_0x3ec084,_0x2b46f5(0x366),_0x4cc6d2);},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0xb4)]=function(){return BattleManager['canEscape']();},Window_PartyCommand[_0xe55837(0x392)]['itemTextAlign']=function(){const _0x2fba95=_0xe55837;return VisuMZ['BattleCore']['Settings'][_0x2fba95(0xa64)][_0x2fba95(0x950)];},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0x423)]=function(_0x15f805){const _0x2f5d09=_0xe55837,_0x325da2=this['commandStyleCheck'](_0x15f805);if(_0x325da2===_0x2f5d09(0x42f))this[_0x2f5d09(0x4e9)](_0x15f805);else{if(_0x325da2===_0x2f5d09(0x7b3)){if(_0x2f5d09(0x97e)!==_0x2f5d09(0x61b))this[_0x2f5d09(0x76a)](_0x15f805);else{function _0x44ce40(){const _0x10c5a7=_0x2f5d09;this['_distortionSprite'][_0x10c5a7(0x721)]['x']=this['_targetSkewX'],this[_0x10c5a7(0x79d)][_0x10c5a7(0x721)]['y']=this[_0x10c5a7(0x38e)];}}}else{if(_0x2f5d09(0x630)!==_0x2f5d09(0x40f))Window_Command[_0x2f5d09(0x392)][_0x2f5d09(0x423)][_0x2f5d09(0x782)](this,_0x15f805);else{function _0x35d318(){const _0x17a28c=_0x2f5d09;if(_0x547548[_0x17a28c(0x3d8)]())this['preparePartyRefresh'](),this['_requestRefresh']=![],_0x2a3de7['clearBattleRefreshRequest']();else this[_0x17a28c(0x7ab)]&&(this['_requestRefresh']=![],this[_0x17a28c(0x597)](),this[_0x17a28c(0x1f2)]());}}}}},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0x967)]=function(){const _0x17c252=_0xe55837;return VisuMZ[_0x17c252(0x278)][_0x17c252(0x108)][_0x17c252(0xa64)][_0x17c252(0x66c)];},Window_PartyCommand['prototype'][_0xe55837(0x20e)]=function(_0x17646a){const _0x3e95b3=_0xe55837;if(_0x17646a<0x0)return _0x3e95b3(0x57c);const _0xabf650=this[_0x3e95b3(0x967)]();if(_0xabf650!==_0x3e95b3(0x14e))return _0xabf650;else{if(this[_0x3e95b3(0x246)]()>0x0){if('eVMLR'!==_0x3e95b3(0x680)){const _0x3f03c0=this[_0x3e95b3(0x93f)](_0x17646a);if(_0x3f03c0[_0x3e95b3(0x1c3)](/\\I\[(\d+)\]/i)){if('silUj'===_0x3e95b3(0x231)){function _0x2c4b4c(){const _0x1ca4d1=_0x3e95b3;_0xd2cc19=this[_0x1ca4d1(0x6b9)]()['wtypeId']||0x0;}}else{const _0x1c2587=this[_0x3e95b3(0xd3)](_0x17646a),_0x317022=this[_0x3e95b3(0x578)](_0x3f03c0)[_0x3e95b3(0x124)];if(_0x317022<=_0x1c2587[_0x3e95b3(0x124)]){if(_0x3e95b3(0x570)!==_0x3e95b3(0x570)){function _0x3f2058(){const _0x19e694=_0x3e95b3,_0x534331=_0x2a7f6e[_0x19e694(0x1b2)](this['_item']),_0x1aee59=_0x399f50[_0x19e694(0x8fc)][_0x534331];if(!_0x1aee59)return this[_0x19e694(0x360)]();return _0x1aee59['DamageDisplay'][_0x19e694(0x782)](this);}}else return _0x3e95b3(0x42f);}else return _0x3e95b3(0x7b3);}}}else{function _0x3102b4(){const _0x2733ed=_0x3e95b3;_0x3216e8[_0x2733ed(0x2a1)]()?_0x2f071e['prototype']['terminate']['call'](this):_0x3d671f[_0x2733ed(0x278)][_0x2733ed(0x857)][_0x2733ed(0x782)](this);}}}}return _0x3e95b3(0x57c);},Window_PartyCommand['prototype'][_0xe55837(0x4e9)]=function(_0x1dda07){const _0xb937ac=_0xe55837,_0x3ee0ae=this['itemLineRect'](_0x1dda07),_0x312785=this[_0xb937ac(0x93f)](_0x1dda07),_0x2c643b=this['textSizeEx'](_0x312785)[_0xb937ac(0x124)];this['changePaintOpacity'](this[_0xb937ac(0x571)](_0x1dda07));const _0x34a724=this[_0xb937ac(0x8bf)]();if(_0x34a724===_0xb937ac(0x9db))this[_0xb937ac(0x85a)](_0x312785,_0x3ee0ae['x']+_0x3ee0ae['width']-_0x2c643b,_0x3ee0ae['y'],_0x2c643b);else{if(_0x34a724===_0xb937ac(0x89d)){if(_0xb937ac(0x998)!==_0xb937ac(0x316)){const _0xa8146d=_0x3ee0ae['x']+Math[_0xb937ac(0x639)]((_0x3ee0ae[_0xb937ac(0x124)]-_0x2c643b)/0x2);this[_0xb937ac(0x85a)](_0x312785,_0xa8146d,_0x3ee0ae['y'],_0x2c643b);}else{function _0x4b323d(){const _0x571660=_0xb937ac;_0x8b4357[_0x571660(0x649)](_0x11d990[_0x571660(0x7eb)],![]);}}}else{if(_0xb937ac(0x988)==='mVbQZ'){function _0x583dd6(){_0x48b456=_0x219b2d['SideviewSelect'];}}else this[_0xb937ac(0x85a)](_0x312785,_0x3ee0ae['x'],_0x3ee0ae['y'],_0x2c643b);}}},Window_PartyCommand[_0xe55837(0x392)]['drawItemStyleIcon']=function(_0x2873d7){const _0x72ba24=_0xe55837;this[_0x72ba24(0x93f)](_0x2873d7)[_0x72ba24(0x1c3)](/\\I\[(\d+)\]/i);const _0xf878a3=Number(RegExp['$1'])||0x0,_0xd4b005=this[_0x72ba24(0xd3)](_0x2873d7),_0xdfc5a9=_0xd4b005['x']+Math[_0x72ba24(0x639)]((_0xd4b005[_0x72ba24(0x124)]-ImageManager[_0x72ba24(0x3dd)])/0x2),_0x211088=_0xd4b005['y']+(_0xd4b005[_0x72ba24(0x97c)]-ImageManager[_0x72ba24(0xa0d)])/0x2;this[_0x72ba24(0x52b)](_0xf878a3,_0xdfc5a9,_0x211088);},Window_PartyCommand['prototype'][_0xe55837(0xa20)]=function(){},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0xa47)]=function(){const _0x403990=_0xe55837;Window_Command[_0x403990(0x392)][_0x403990(0xa47)][_0x403990(0x782)](this);const _0x5ce72e=this['battleLayoutStyle']();_0x5ce72e==='border'&&this[_0x403990(0x20d)]();},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0x2cc)]=function(){const _0x9e7dfb=_0xe55837;if(this[_0x9e7dfb(0x5cb)])return this['_battleLayoutStyle'];return this['_battleLayoutStyle']=SceneManager[_0x9e7dfb(0x1c8)]['battleLayoutStyle'](),this[_0x9e7dfb(0x5cb)];},Window_PartyCommand[_0xe55837(0x392)][_0xe55837(0x36e)]=function(){const _0x2f1d1c=_0xe55837,_0x40c2b2=VisuMZ[_0x2f1d1c(0x278)][_0x2f1d1c(0x108)][_0x2f1d1c(0xa64)],_0x4701f6=this[_0x2f1d1c(0x8b1)]();switch(_0x4701f6){case _0x2f1d1c(0x893):this[_0x2f1d1c(0x285)][_0x2f1d1c(0x66d)](_0x40c2b2[_0x2f1d1c(0x7f0)]);break;case _0x2f1d1c(0x6cd):this['_helpWindow'][_0x2f1d1c(0x66d)](_0x40c2b2[_0x2f1d1c(0x10a)]);break;case _0x2f1d1c(0xcb):this['_helpWindow'][_0x2f1d1c(0x66d)](_0x40c2b2[_0x2f1d1c(0x58c)]);break;case'escape':this[_0x2f1d1c(0x285)][_0x2f1d1c(0x66d)](_0x40c2b2['HelpEscape']);break;default:this[_0x2f1d1c(0x285)][_0x2f1d1c(0x66d)]('');break;}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x80c)]=Window_ActorCommand[_0xe55837(0x392)]['initialize'],Window_ActorCommand[_0xe55837(0x392)]['initialize']=function(_0x4c572e){const _0x3b3ab3=_0xe55837;VisuMZ[_0x3b3ab3(0x278)]['Window_ActorCommand_initialize'][_0x3b3ab3(0x782)](this,_0x4c572e),this[_0x3b3ab3(0xa72)](_0x4c572e);},Window_ActorCommand['prototype'][_0xe55837(0xa72)]=function(_0x354524){const _0x118d65=_0xe55837,_0x4d78ab=new Rectangle(0x0,0x0,_0x354524['width'],_0x354524['height']);this[_0x118d65(0x567)]=new Window_Base(_0x4d78ab),this[_0x118d65(0x567)][_0x118d65(0x863)]=0x0,this[_0x118d65(0x9e6)](this[_0x118d65(0x567)]),this[_0x118d65(0x36b)]();},Window_ActorCommand[_0xe55837(0x392)]['callUpdateHelp']=function(){const _0x4e38e0=_0xe55837;Window_Command[_0x4e38e0(0x392)][_0x4e38e0(0x25b)]['call'](this);if(this[_0x4e38e0(0x567)])this['updateCommandNameWindow']();},Window_ActorCommand[_0xe55837(0x392)]['updateCommandNameWindow']=function(){const _0x49b782=_0xe55837,_0x211843=this[_0x49b782(0x567)];_0x211843[_0x49b782(0x9e1)]['clear']();const _0x3f3cb0=this[_0x49b782(0x20e)](this[_0x49b782(0x7a5)]());if(_0x3f3cb0===_0x49b782(0x7b3)&&this[_0x49b782(0x246)]()>0x0){if(_0x49b782(0x127)===_0x49b782(0x797)){function _0x1c95f8(){const _0x1ef820=_0x49b782;this[_0x1ef820(0xa17)]();}}else{const _0x15c032=this[_0x49b782(0xd3)](this['index']());let _0x231e7f=this[_0x49b782(0x93f)](this[_0x49b782(0x7a5)]());_0x231e7f=_0x231e7f['replace'](/\\I\[(\d+)\]/gi,''),_0x211843['resetFontSettings'](),this[_0x49b782(0x4b0)](_0x231e7f,_0x15c032),this[_0x49b782(0x5d8)](_0x231e7f,_0x15c032),this[_0x49b782(0x7ef)](_0x231e7f,_0x15c032);}}},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x4b0)]=function(_0xad9a26,_0x1fd081){},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x5d8)]=function(_0xdfd448,_0x1fd064){const _0x3767ab=_0xe55837,_0x5f443b=this[_0x3767ab(0x567)];_0x5f443b[_0x3767ab(0x444)](_0xdfd448,0x0,_0x1fd064['y'],_0x5f443b[_0x3767ab(0x3e9)],_0x3767ab(0x89d));},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x7ef)]=function(_0x518cc5,_0x2ccad1){const _0x498199=_0xe55837,_0x49c147=this['_commandNameWindow'],_0x261743=$gameSystem[_0x498199(0x6b6)](),_0x81c4d6=_0x2ccad1['x']+Math['floor'](_0x2ccad1['width']/0x2)+_0x261743;_0x49c147['x']=_0x49c147[_0x498199(0x124)]/-0x2+_0x81c4d6,_0x49c147['y']=Math['floor'](_0x2ccad1[_0x498199(0x97c)]/0x2);},Window_ActorCommand['prototype'][_0xe55837(0x900)]=function(){const _0x2da922=_0xe55837;if(!this[_0x2da922(0x6ed)])return;const _0x3850c1=this[_0x2da922(0x6ed)][_0x2da922(0x75b)]();for(const _0x2f62d6 of _0x3850c1){this[_0x2da922(0x76e)](_0x2f62d6[_0x2da922(0x448)]()[_0x2da922(0x1ee)]());}},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x76e)]=function(_0x111b37){const _0x362878=_0xe55837;if(_0x111b37===_0x362878(0xca)){if(_0x362878(0x9b8)!=='jIeLG'){function _0x4bf791(){const _0x1efd91=_0x362878;_0xa0964b[_0x1efd91(0x392)]['drawItem'][_0x1efd91(0x782)](this,_0x41baa7);}}else this[_0x362878(0x84f)]();}[_0x362878(0x510),'SKILLS'][_0x362878(0x450)](_0x111b37)&&this[_0x362878(0x43f)]();_0x111b37===_0x362878(0x4be)&&this[_0x362878(0x743)]();if(_0x111b37===_0x362878(0x808)){if('Tzkjt'!=='phfkz')this['addItemCommand']();else{function _0x16babe(){const _0x36a93a=_0x362878;return _0x98c51f[_0x36a93a(0x278)][_0x36a93a(0x3f8)][_0x36a93a(0x782)](this);}}}if(_0x111b37==='ESCAPE'){if(_0x362878(0x175)===_0x362878(0x175))this[_0x362878(0x963)]();else{function _0x5e38be(){const _0x14c2b6=_0x362878;this[_0x14c2b6(0x174)][_0x14c2b6(0x881)][_0x14c2b6(0x9d1)]=this[_0x14c2b6(0x341)]['battlerSmoothImage']();}}}if(_0x111b37===_0x362878(0x6a4)){if('sHeTv'===_0x362878(0x73c)){function _0x6d0449(){const _0xe77ee8=_0x362878,_0x665567=_0x56620b[_0xe77ee8(0xe1)]();this[_0xe77ee8(0x30a)](_0xe77ee8(0x7a3),[_0x4d36dc],_0x4fbbbe,_0x432ac8),this[_0xe77ee8(0x30a)]('performMoveToPoint',_0x3bc2fb,_0x665567['_homeX'],_0x665567[_0xe77ee8(0x677)],_0x7acc73,![],'Linear'),this['push'](_0xe77ee8(0x835),[_0x5d1784],_0xe77ee8(0x53c)),this[_0xe77ee8(0x30a)](_0xe77ee8(0x344)),this['push'](_0xe77ee8(0x835),[_0xb55209],'walk');}}else this[_0x362878(0x270)]();}if(_0x111b37[_0x362878(0x1c3)](/STYPE: (\d+)/i)){const _0x782368=Number(RegExp['$1']);this[_0x362878(0x4f6)](_0x782368);}else{if(_0x111b37[_0x362878(0x1c3)](/STYPE: (.*)/i)){if(_0x362878(0x370)===_0x362878(0x370)){const _0x362549=DataManager[_0x362878(0x225)](RegExp['$1']);this[_0x362878(0x4f6)](_0x362549);}else{function _0xff12cf(){const _0x547630=_0x362878,_0x42d622=this['_mainSprite']['bitmap'];_0x42d622&&(this[_0x547630(0x881)]=new _0x59980c(_0x42d622['width'],_0x42d622[_0x547630(0x97c)]));}}}}_0x111b37===_0x362878(0x9b3)&&this[_0x362878(0x2e3)]();if(_0x111b37[_0x362878(0x1c3)](/SKILL: (\d+)/i)){const _0x143b96=Number(RegExp['$1']);this[_0x362878(0x106)]($dataSkills[_0x143b96]);}else{if(_0x111b37[_0x362878(0x1c3)](/SKILL: (.*)/i)){if('Jeucg'===_0x362878(0x382)){function _0x4d46cc(){const _0x11b40f=_0x362878;_0x198bfb=_0x2ec238['swapEnemyIDs'](_0x122650),_0x49dadf['BattleCore']['Game_Enemy_setup'][_0x11b40f(0x782)](this,_0x7a415,_0x3d6d1b,_0x43a2f6),_0x2e52a5[_0x11b40f(0x53d)]&&this['initElementStatusCore'](),this[_0x11b40f(0x480)](),this['setupBattleCoreData'](),_0x7fd398[_0x11b40f(0x53d)]&&this[_0x11b40f(0x708)]();}}else{const _0x891007=DataManager['getSkillIdWithName'](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x891007]);}}}_0x111b37===_0x362878(0x5d3)&&Imported[_0x362878(0x1aa)]&&this['addPartyCommand'](),[_0x362878(0x1e0),_0x362878(0x326)][_0x362878(0x450)](_0x111b37)&&Imported[_0x362878(0x52d)]&&this[_0x362878(0x4ed)](),_0x111b37==='WEAPON\x20SWAP'&&Imported[_0x362878(0x762)]&&this[_0x362878(0x481)](!![]);},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x84f)]=function(){const _0x4ca21e=_0xe55837,_0x2d771a=$dataSkills[this[_0x4ca21e(0x6ed)][_0x4ca21e(0xd4)]()];if(!_0x2d771a)return;if(!this[_0x4ca21e(0x5fd)](_0x2d771a))return;const _0x45352b=this[_0x4ca21e(0x967)](),_0x3183b7=DataManager[_0x4ca21e(0x385)](_0x2d771a),_0xe3f0e2=DataManager[_0x4ca21e(0x519)](_0x2d771a),_0x554285=_0x45352b===_0x4ca21e(0x57c)?_0x3183b7:'\x5cI[%1]%2'[_0x4ca21e(0x11c)](_0xe3f0e2,_0x3183b7);this[_0x4ca21e(0x29f)](_0x554285,'attack',this[_0x4ca21e(0x6ed)][_0x4ca21e(0x216)]());},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x743)]=function(){const _0x1c1bf1=_0xe55837,_0x3f88e4=$dataSkills[this[_0x1c1bf1(0x6ed)][_0x1c1bf1(0x5b2)]()];if(!_0x3f88e4)return;if(!this[_0x1c1bf1(0x5fd)](_0x3f88e4))return;const _0xe23db4=this[_0x1c1bf1(0x967)](),_0x5f0327=DataManager[_0x1c1bf1(0x385)](_0x3f88e4),_0x38da83=DataManager[_0x1c1bf1(0x519)](_0x3f88e4),_0x22d302=_0xe23db4==='text'?_0x5f0327:_0x1c1bf1(0x402)['format'](_0x38da83,_0x5f0327);this['addCommand'](_0x22d302,_0x1c1bf1(0x23e),this[_0x1c1bf1(0x6ed)][_0x1c1bf1(0x49c)]());},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x738)]=function(){const _0x4f4a4c=_0xe55837,_0x1763d6=this[_0x4f4a4c(0x967)](),_0x1c4627=VisuMZ['BattleCore'][_0x4f4a4c(0x108)][_0x4f4a4c(0x350)][_0x4f4a4c(0x31d)],_0x47a8e6=_0x1763d6===_0x4f4a4c(0x57c)?TextManager[_0x4f4a4c(0xa24)]:_0x4f4a4c(0x402)['format'](_0x1c4627,TextManager[_0x4f4a4c(0xa24)]),_0x3b0303=this[_0x4f4a4c(0x3e8)]();this['addCommand'](_0x47a8e6,_0x4f4a4c(0xa24),_0x3b0303);},Window_ActorCommand[_0xe55837(0x392)]['isItemCommandEnabled']=function(){const _0x56c17d=_0xe55837;return this['_actor']&&this[_0x56c17d(0x6ed)]['canUseItemCommand']();},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x43f)]=function(){const _0x3dcadc=_0xe55837,_0x51582c=this[_0x3dcadc(0x6ed)][_0x3dcadc(0x133)]();for(const _0x8e642e of _0x51582c){this['addSkillTypeCommand'](_0x8e642e);}},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x4f6)]=function(_0x379ef0){const _0x43e2b2=_0xe55837;let _0x1c6286=$dataSystem[_0x43e2b2(0x133)][_0x379ef0];if(!_0x1c6286)return;let _0x524f16=_0x1c6286;const _0x336dad=this[_0x43e2b2(0x967)]();if(_0x336dad==='text')_0x524f16=_0x524f16[_0x43e2b2(0x1eb)](/\x1I\[(\d+)\]/gi,''),_0x524f16=_0x524f16[_0x43e2b2(0x1eb)](/\\I\[(\d+)\]/gi,'');else{if(!_0x1c6286['match'](/\\I\[(\d+)\]/i)){const _0x3152f2=Imported[_0x43e2b2(0x854)]?VisuMZ[_0x43e2b2(0x5c1)]['Settings'][_0x43e2b2(0x7b5)]:VisuMZ[_0x43e2b2(0x278)][_0x43e2b2(0x108)][_0x43e2b2(0x350)],_0x2faacf=$dataSystem['magicSkills'][_0x43e2b2(0x450)](_0x379ef0),_0x26341d=_0x2faacf?_0x3152f2['IconStypeMagic']:_0x3152f2[_0x43e2b2(0x594)];_0x524f16=_0x43e2b2(0x402)[_0x43e2b2(0x11c)](_0x26341d,_0x1c6286);}}this[_0x43e2b2(0x29f)](_0x524f16,_0x43e2b2(0x6de),!![],_0x379ef0);},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x2e3)]=function(){const _0x33c55c=_0xe55837,_0xc2c1bc=this['_actor'][_0x33c55c(0x133)](),_0x3b8094=this['_actor']['skills']();for(const _0x50b4fa of _0x3b8094){if('QPCHQ'===_0x33c55c(0x16a)){function _0x45b3d2(){const _0x5a173f=_0x33c55c;_0x39d491[_0x5a173f(0x278)][_0x5a173f(0x477)][_0x5a173f(0x782)](this),this['_forcedBattlers']=[];}}else{if(!_0x50b4fa)continue;if(Imported[_0x33c55c(0x854)]){if(this[_0x33c55c(0x866)](_0x50b4fa))continue;if(this[_0x33c55c(0x449)](_0x50b4fa))continue;}else{if(!_0xc2c1bc[_0x33c55c(0x450)](_0x50b4fa['stypeId']))continue;}this[_0x33c55c(0x106)](_0x50b4fa);}}},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x866)]=function(_0x42cd8d){const _0x21dd47=_0xe55837,_0x46cd8f=this[_0x21dd47(0x6ed)][_0x21dd47(0x133)](),_0x58e769=_0x46cd8f['filter'](_0xe20b61=>DataManager[_0x21dd47(0x3d0)](_0x42cd8d)[_0x21dd47(0x450)](_0xe20b61));return _0x58e769[_0x21dd47(0x4c5)]<=0x0;},Window_ActorCommand[_0xe55837(0x392)]['isHiddenSkill']=function(_0x4d48ac){const _0x154f55=_0xe55837;if(!Window_SkillList[_0x154f55(0x392)][_0x154f55(0x330)][_0x154f55(0x782)](this,_0x4d48ac))return!![];if(!Window_SkillList[_0x154f55(0x392)][_0x154f55(0xa62)][_0x154f55(0x782)](this,_0x4d48ac))return!![];if(!Window_SkillList[_0x154f55(0x392)][_0x154f55(0x3da)][_0x154f55(0x782)](this,_0x4d48ac))return!![];return![];},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x106)]=function(_0x3fd34a){const _0x290162=_0xe55837;if(!_0x3fd34a)return;if(!this['canAddSkillCommand'](_0x3fd34a))return;const _0x2067ef=this[_0x290162(0x967)](),_0x49de28=DataManager[_0x290162(0x385)](_0x3fd34a),_0x6892bf=DataManager[_0x290162(0x519)](_0x3fd34a),_0x434785=_0x2067ef===_0x290162(0x57c)?_0x49de28:'\x5cI[%1]%2'[_0x290162(0x11c)](_0x6892bf,_0x49de28),_0x50b0e7=this['_actor'][_0x290162(0x118)](_0x3fd34a);this[_0x290162(0x29f)](_0x434785,_0x290162(0x5bc),_0x50b0e7,_0x3fd34a['id']);},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x5fd)]=function(_0x46ed77){const _0x5364e0=_0xe55837,_0x2f97da=_0x46ed77['note'];if(_0x2f97da[_0x5364e0(0x1c3)](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor'][_0x5364e0(0xf8)](_0x46ed77['id']))return![];}if(_0x2f97da[_0x5364e0(0x1c3)](/<COMMAND REQUIRE ACCESS>/i)){if(!this['_actor']['hasSkill'](_0x46ed77['id']))return![];}const _0x4d74d8=VisuMZ[_0x5364e0(0x278)][_0x5364e0(0x678)](_0x46ed77,_0x5364e0(0x3ea));if(VisuMZ[_0x5364e0(0x278)]['JS'][_0x4d74d8]){if(!VisuMZ[_0x5364e0(0x278)]['JS'][_0x4d74d8][_0x5364e0(0x782)](this,this[_0x5364e0(0x6ed)],_0x46ed77))return![];}return VisuMZ[_0x5364e0(0x278)][_0x5364e0(0x90)](_0x46ed77);},VisuMZ[_0xe55837(0x278)]['CheckSkillCommandShowSwitches']=function(_0x20b6d8){const _0x5cc7ad=_0xe55837,_0x1c80a6=_0x20b6d8['note'];if(_0x1c80a6[_0x5cc7ad(0x1c3)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('yyciR'===_0x5cc7ad(0x6ef)){function _0x45f7bb(){const _0x1d524e=_0x5cc7ad;_0x1e97b8[_0x1d524e(0x3b1)]()[_0x1d524e(0x820)](),_0x3c088c[_0x1d524e(0x9da)](),_0xc15798['selectNextActor'](),this[_0x1d524e(0x10f)]();}}else{const _0x4e56ff=JSON['parse']('['+RegExp['$1'][_0x5cc7ad(0x1c3)](/\d+/g)+']');for(const _0xb68c1f of _0x4e56ff){if(!$gameSwitches['value'](_0xb68c1f))return![];}return!![];}}if(_0x1c80a6['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x5cc7ad(0x5cf)===_0x5cc7ad(0x5cf)){const _0x4dabda=JSON[_0x5cc7ad(0x2d3)]('['+RegExp['$1'][_0x5cc7ad(0x1c3)](/\d+/g)+']');for(const _0x23d62c of _0x4dabda){if(!$gameSwitches['value'](_0x23d62c))return![];}return!![];}else{function _0x29272d(){const _0xa6c5dd=_0x5cc7ad;this[_0xa6c5dd(0x9eb)]();}}}if(_0x1c80a6[_0x5cc7ad(0x1c3)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xecebf5=JSON['parse']('['+RegExp['$1'][_0x5cc7ad(0x1c3)](/\d+/g)+']');for(const _0x257332 of _0xecebf5){if($gameSwitches[_0x5cc7ad(0x6f4)](_0x257332))return!![];}return![];}if(_0x1c80a6['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4ebd83=JSON['parse']('['+RegExp['$1'][_0x5cc7ad(0x1c3)](/\d+/g)+']');for(const _0x39a10b of _0x4ebd83){if(!$gameSwitches['value'](_0x39a10b))return!![];}return![];}if(_0x1c80a6[_0x5cc7ad(0x1c3)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('ynRXb'!==_0x5cc7ad(0x2de)){const _0xb2dd2c=JSON[_0x5cc7ad(0x2d3)]('['+RegExp['$1'][_0x5cc7ad(0x1c3)](/\d+/g)+']');for(const _0x2c6ba7 of _0xb2dd2c){if(_0x5cc7ad(0x54c)!==_0x5cc7ad(0x54c)){function _0x2161e2(){const _0x41b430=_0x5cc7ad;this[_0x41b430(0x550)]=new _0x4c6742();for(let _0x40dc53=0x0;_0x40dc53<0x9;_0x40dc53++){this['_cursorSprite'][_0x41b430(0x9e6)](new _0x4a781f());}this['_cursorArea'][_0x41b430(0x9e6)](this[_0x41b430(0x550)]);}}else{if(!$gameSwitches[_0x5cc7ad(0x6f4)](_0x2c6ba7))return!![];}}return![];}else{function _0x59400a(){return _0x28dc70(_0x55b9db['$1']);}}}if(_0x1c80a6[_0x5cc7ad(0x1c3)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x516e4d=JSON[_0x5cc7ad(0x2d3)]('['+RegExp['$1'][_0x5cc7ad(0x1c3)](/\d+/g)+']');for(const _0xb2be1f of _0x516e4d){if(_0x5cc7ad(0x4af)===_0x5cc7ad(0x460)){function _0x16af50(){const _0x3fe4e9=_0x5cc7ad;this[_0x3fe4e9(0x30a)]('performEvasion',_0x147b51);}}else{if($gameSwitches['value'](_0xb2be1f))return![];}}return!![];}return!![];},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x963)]=function(){const _0x2a5bef=_0xe55837,_0x587956=this[_0x2a5bef(0x967)](),_0xf26b57=VisuMZ[_0x2a5bef(0x278)]['Settings']['PartyCmd'][_0x2a5bef(0xa76)],_0x5d2611=_0x587956==='text'?TextManager[_0x2a5bef(0x366)]:'\x5cI[%1]%2'['format'](_0xf26b57,TextManager['escape']),_0x10eee0=this[_0x2a5bef(0xb4)]();this['addCommand'](_0x5d2611,_0x2a5bef(0x366),_0x10eee0);},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0xb4)]=function(){const _0x2b1bff=_0xe55837;return BattleManager[_0x2b1bff(0x10e)]();},Window_ActorCommand['prototype'][_0xe55837(0x270)]=function(){const _0x19238d=_0xe55837,_0x3f8eab=this[_0x19238d(0x967)](),_0x2c6a10=VisuMZ[_0x19238d(0x278)][_0x19238d(0x108)][_0x19238d(0xa64)][_0x19238d(0x870)],_0x330307=_0x3f8eab===_0x19238d(0x57c)?TextManager[_0x19238d(0x6cd)]:_0x19238d(0x402)[_0x19238d(0x11c)](_0x2c6a10,TextManager[_0x19238d(0x6cd)]),_0x1c9db9=this['isAutoBattleCommandEnabled']();this[_0x19238d(0x29f)](_0x330307,_0x19238d(0x6cd),_0x1c9db9);},Window_ActorCommand[_0xe55837(0x392)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x8bf)]=function(){const _0x11f185=_0xe55837;return VisuMZ['BattleCore'][_0x11f185(0x108)][_0x11f185(0x350)][_0x11f185(0x950)];},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x423)]=function(_0x430950){const _0x23ade=_0xe55837,_0x35e88f=this['commandStyleCheck'](_0x430950);if(_0x35e88f===_0x23ade(0x42f))this[_0x23ade(0x4e9)](_0x430950);else{if(_0x35e88f===_0x23ade(0x7b3))this[_0x23ade(0x76a)](_0x430950);else{if(_0x23ade(0x179)!=='zOxrX')Window_Command[_0x23ade(0x392)][_0x23ade(0x423)]['call'](this,_0x430950);else{function _0x1f56be(){const _0x2bdda0=_0x23ade;this[_0x2bdda0(0x615)]['visible']=![];}}}}this[_0x23ade(0x33b)](_0x430950);},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x967)]=function(){const _0x5313bb=_0xe55837;return VisuMZ[_0x5313bb(0x278)][_0x5313bb(0x108)]['ActorCmd'][_0x5313bb(0x66c)];},Window_ActorCommand[_0xe55837(0x392)]['commandStyleCheck']=function(_0x528cf1){const _0x2bb201=_0xe55837;if(_0x528cf1<0x0)return _0x2bb201(0x57c);const _0x5abf07=this[_0x2bb201(0x967)]();if(_0x5abf07!=='auto')return _0x5abf07;else{if(this['maxItems']()>0x0){if('XrcQu'===_0x2bb201(0x1e9)){function _0x4e9146(){const _0x16bb34=_0x2bb201,_0x613c12=_0x149557[_0x16bb34(0x278)][_0x16bb34(0x108)][_0x16bb34(0x22d)];if(_0x613c12[_0x16bb34(0x2ce)]){const _0x246d9b=new _0x3f009c();_0x246d9b[_0x16bb34(0x881)]=_0x1e122e[_0x16bb34(0x55f)](_0x613c12[_0x16bb34(0x2ce)]),_0x246d9b['x']=_0x613c12['StatusWindowAttachmentBackOffsetX']||0x0,_0x246d9b['y']=_0x613c12[_0x16bb34(0xa41)]||0x0,this['addChildToBack'](_0x246d9b),this[_0x16bb34(0x9b6)]=_0x246d9b;}if(_0x613c12[_0x16bb34(0x7a7)]){const _0x4282c9=new _0x5c0b13();_0x4282c9['bitmap']=_0x228754[_0x16bb34(0x55f)](_0x613c12[_0x16bb34(0x7a7)]),_0x4282c9['x']=_0x613c12[_0x16bb34(0x204)]||0x0,_0x4282c9['y']=_0x613c12[_0x16bb34(0x8a0)]||0x0,this[_0x16bb34(0x9e6)](_0x4282c9),this[_0x16bb34(0xa3d)]=_0x4282c9;}}}else{const _0x971a7c=this[_0x2bb201(0x93f)](_0x528cf1);if(_0x971a7c[_0x2bb201(0x1c3)](/\\I\[(\d+)\]/i)){if('VXwpX'!==_0x2bb201(0x9a6)){function _0x1285c0(){_0x359948=_0x588cf3[_0x13ed1a]['call'](this,_0x5f1ac0,_0x5d2734);if(_0xae5732)_0x16558b=_0x2f72cc;}}else{const _0x35d3bf=this['itemLineRect'](_0x528cf1),_0x330675=this['textSizeEx'](_0x971a7c)[_0x2bb201(0x124)];return _0x330675<=_0x35d3bf['width']?_0x2bb201(0x42f):_0x2bb201(0x7b3);}}}}}return _0x2bb201(0x57c);},Window_ActorCommand[_0xe55837(0x392)]['drawItemStyleIconText']=function(_0x44134f){const _0x1e3aee=_0xe55837,_0xc665e2=this[_0x1e3aee(0xd3)](_0x44134f),_0x54dba5=this[_0x1e3aee(0x93f)](_0x44134f),_0x588af3=this[_0x1e3aee(0x578)](_0x54dba5)[_0x1e3aee(0x124)];this[_0x1e3aee(0x322)](this['isCommandEnabled'](_0x44134f));const _0x4da5d0=this[_0x1e3aee(0x8bf)]();if(_0x4da5d0===_0x1e3aee(0x9db))this[_0x1e3aee(0x85a)](_0x54dba5,_0xc665e2['x']+_0xc665e2[_0x1e3aee(0x124)]-_0x588af3,_0xc665e2['y'],_0x588af3);else{if(_0x4da5d0===_0x1e3aee(0x89d)){const _0x114f45=_0xc665e2['x']+Math[_0x1e3aee(0x639)]((_0xc665e2[_0x1e3aee(0x124)]-_0x588af3)/0x2);this[_0x1e3aee(0x85a)](_0x54dba5,_0x114f45,_0xc665e2['y'],_0x588af3);}else this['drawTextEx'](_0x54dba5,_0xc665e2['x'],_0xc665e2['y'],_0x588af3);}},Window_ActorCommand[_0xe55837(0x392)]['drawItemStyleIcon']=function(_0x398f8e){const _0x355013=_0xe55837;this['commandName'](_0x398f8e)[_0x355013(0x1c3)](/\\I\[(\d+)\]/i);const _0x3a2896=Number(RegExp['$1'])||0x0,_0x5b30c3=this['itemLineRect'](_0x398f8e),_0x252733=_0x5b30c3['x']+Math[_0x355013(0x639)]((_0x5b30c3[_0x355013(0x124)]-ImageManager[_0x355013(0x3dd)])/0x2),_0x1ff0f0=_0x5b30c3['y']+(_0x5b30c3[_0x355013(0x97c)]-ImageManager['iconHeight'])/0x2;this[_0x355013(0x52b)](_0x3a2896,_0x252733,_0x1ff0f0);},Window_ActorCommand['prototype'][_0xe55837(0x33b)]=function(_0x3f4f63){const _0x94e962=_0xe55837;if(!(VisuMZ['BattleCore'][_0x94e962(0x108)][_0x94e962(0x350)][_0x94e962(0x67e)]??!![]))return;const _0x4e0cc7=this[_0x94e962(0x566)](_0x3f4f63);if(!['attack',_0x94e962(0x23e),_0x94e962(0x5bc)][_0x94e962(0x450)](_0x4e0cc7))return;const _0x3e4778=this[_0x94e962(0xd3)](_0x3f4f63);let _0x56996c=null;if(_0x4e0cc7==='attack'){if(_0x94e962(0x64d)===_0x94e962(0x1d4)){function _0xa8afd5(){const _0x3ceeb4=_0x94e962;this[_0x3ceeb4(0x8f9)]=new _0x530ca2(),this['_shadowSprite'][_0x3ceeb4(0x881)]=_0x3412c8['loadSystem'](_0x3ceeb4(0x79e)),this[_0x3ceeb4(0x8f9)]['bitmap'][_0x3ceeb4(0x9d1)]=_0x77d643['BattleCore'][_0x3ceeb4(0x108)][_0x3ceeb4(0x948)][_0x3ceeb4(0xd6)],this[_0x3ceeb4(0x8f9)][_0x3ceeb4(0x5dc)]['x']=0.5,this[_0x3ceeb4(0x8f9)]['anchor']['y']=0.5,this[_0x3ceeb4(0x8f9)]['y']=-0x2,this[_0x3ceeb4(0x8f9)][_0x3ceeb4(0x331)]=![],this['addChild'](this[_0x3ceeb4(0x8f9)]);}}else _0x56996c=$dataSkills[this[_0x94e962(0x6ed)][_0x94e962(0xd4)]()];}else{if(_0x4e0cc7===_0x94e962(0x23e)){if(_0x94e962(0x46a)===_0x94e962(0x2c7)){function _0x5c1302(){const _0x4a7166=_0x94e962;_0x2e1d02[_0x4a7166(0x4f2)]([_0xd7d0fb]);}}else _0x56996c=$dataSkills[this[_0x94e962(0x6ed)]['guardSkillId']()];}else _0x56996c=$dataSkills[this['_list'][_0x3f4f63][_0x94e962(0xa16)]];}this['drawSkillCost'](this['_actor'],_0x56996c,_0x3e4778['x'],_0x3e4778['y'],_0x3e4778['width']);},Window_ActorCommand['prototype'][_0xe55837(0x415)]=function(_0x2db619,_0x42724b,_0x56d9c3,_0x81dcb6,_0x46e3a2){const _0x5b2de6=_0xe55837;if(!_0x42724b)return;if(Imported[_0x5b2de6(0x854)]){if('mYKNt'!==_0x5b2de6(0x153)){function _0x40a893(){const _0x2fd87a=_0x5b2de6;_0x2cb57c['prototype']['performAction']['call'](this,_0x3c4e40),this[_0x2fd87a(0x819)](_0x43cedb);}}else Window_Command[_0x5b2de6(0x392)][_0x5b2de6(0x415)]['call'](this,_0x2db619,_0x42724b,_0x56d9c3,_0x81dcb6,_0x46e3a2);}else Window_SkillList[_0x5b2de6(0x392)][_0x5b2de6(0x415)][_0x5b2de6(0x782)](this,_0x42724b,_0x56d9c3,_0x81dcb6,_0x46e3a2);},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0xa20)]=function(){},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0xa47)]=function(){const _0x232b72=_0xe55837;Window_Command[_0x232b72(0x392)][_0x232b72(0xa47)][_0x232b72(0x782)](this);const _0x495a30=this['battleLayoutStyle']();_0x495a30===_0x232b72(0x1bb)&&this['showHelpWindow']();},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x2cc)]=function(){const _0x1dde8c=_0xe55837;if(this['_battleLayoutStyle'])return this[_0x1dde8c(0x5cb)];return this['_battleLayoutStyle']=SceneManager['_scene'][_0x1dde8c(0x2cc)](),this[_0x1dde8c(0x5cb)];},VisuMZ['BattleCore']['Window_ActorCommand_setup']=Window_ActorCommand['prototype'][_0xe55837(0x62b)],Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0x62b)]=function(_0x29c841){const _0x251286=_0xe55837,_0x1c0d5b=this[_0x251286(0x2cc)]();if(_0x29c841&&['xp',_0x251286(0x85f)][_0x251286(0x450)](_0x1c0d5b))this['resizeWindowXPStyle'](_0x29c841);else _0x29c841&&['border'][_0x251286(0x450)](_0x1c0d5b)&&(this['resizeWindowBorderStyle'](_0x29c841),this[_0x251286(0x20d)]());VisuMZ['BattleCore'][_0x251286(0x56d)][_0x251286(0x782)](this,_0x29c841),_0x29c841&&$gameTroop[_0x251286(0x7f1)]()[_0x251286(0x4c5)]>0x0&&_0x29c841['battler']()&&_0x29c841[_0x251286(0xe1)]()[_0x251286(0x489)]();},Window_ActorCommand[_0xe55837(0x392)]['resizeWindowXPStyle']=function(_0x2b2c97){const _0x5d17d3=_0xe55837,_0xfe975a=Math[_0x5d17d3(0x498)](Graphics[_0x5d17d3(0x386)]/0x3),_0x249657=Math[_0x5d17d3(0x498)](Graphics[_0x5d17d3(0x386)]/$gameParty[_0x5d17d3(0x629)]()[_0x5d17d3(0x4c5)]),_0x4c6cf2=Math['min'](_0xfe975a,_0x249657),_0x1ae9a6=this['fittingHeight'](VisuMZ['BattleCore']['Settings']['BattleLayout']['XPActorCommandLines']),_0x436e6f=_0x249657*_0x2b2c97['index']()+(_0x249657-_0x4c6cf2)/0x2,_0x225f2e=SceneManager['_scene'][_0x5d17d3(0x418)]['y']-_0x1ae9a6;this[_0x5d17d3(0x982)](_0x436e6f,_0x225f2e,_0x4c6cf2,_0x1ae9a6),this['createContents'](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0xe55837(0x392)][_0xe55837(0xcf)]=function(_0x2e1b23){const _0x432880=_0xe55837,_0x79af08=SceneManager[_0x432880(0x1c8)][_0x432880(0x80b)]();this[_0x432880(0x982)](_0x79af08['x'],_0x79af08['y'],_0x79af08[_0x432880(0x124)],_0x79af08[_0x432880(0x97c)]),this[_0x432880(0x878)](),this[_0x432880(0x6e3)](0x0);},Window_ActorCommand['prototype'][_0xe55837(0x3f3)]=function(){const _0x4487bd=_0xe55837;if(this[_0x4487bd(0x19a)]){const _0x57dfae=this[_0x4487bd(0x19a)][_0x4487bd(0x881)],_0x38608e=this['width']-0x8,_0x907b29=this['height'],_0x2bb547=this[_0x4487bd(0x949)],_0x32d520=ColorManager[_0x4487bd(0x909)](),_0x8e8679=ColorManager['dimColor2']();this[_0x4487bd(0x19a)]['x']=0x4,_0x57dfae['resize'](_0x38608e,_0x907b29),_0x57dfae['gradientFillRect'](0x0,0x0,_0x38608e,_0x2bb547,_0x8e8679,_0x32d520,!![]),_0x57dfae[_0x4487bd(0x843)](0x0,_0x2bb547,_0x38608e,_0x907b29-_0x2bb547*0x2,_0x32d520),_0x57dfae[_0x4487bd(0x9de)](0x0,_0x907b29-_0x2bb547,_0x38608e,_0x2bb547,_0x32d520,_0x8e8679,!![]),this[_0x4487bd(0x19a)]['setFrame'](0x0,0x0,_0x38608e,_0x907b29);}},Window_ActorCommand['prototype']['updateHelp']=function(){const _0x246041=_0xe55837;if(!this[_0x246041(0x6ed)])return;const _0x58e862=VisuMZ[_0x246041(0x278)]['Settings'][_0x246041(0x350)],_0x3c62f7=this[_0x246041(0x8b1)]();switch(_0x3c62f7){case _0x246041(0x1f4):this['setHelpWindowItem']($dataSkills[this['_actor']['attackSkillId']()]);break;case _0x246041(0x23e):this[_0x246041(0x66b)]($dataSkills[this[_0x246041(0x6ed)][_0x246041(0x5b2)]()]);break;case _0x246041(0x6de):const _0x1223d1=_0x58e862['HelpSkillType'],_0x20d702=_0x1223d1[_0x246041(0x11c)]($dataSystem['skillTypes'][this[_0x246041(0xa4)]()]);this['_helpWindow']['setText'](_0x20d702);break;case _0x246041(0x5bc):this[_0x246041(0x66b)]($dataSkills[this[_0x246041(0xa4)]()]);break;case'item':this[_0x246041(0x285)][_0x246041(0x66d)](_0x58e862['HelpItem']);break;case _0x246041(0x366):this[_0x246041(0x285)][_0x246041(0x66d)](_0x58e862[_0x246041(0x2fd)]);break;case _0x246041(0x6cd):this['_helpWindow'][_0x246041(0x66d)](_0x58e862[_0x246041(0x10a)]);break;default:this[_0x246041(0x285)][_0x246041(0x66d)]('');break;}},VisuMZ['BattleCore']['Window_BattleStatus_initialize']=Window_BattleStatus[_0xe55837(0x392)]['initialize'],Window_BattleStatus['prototype'][_0xe55837(0x7b6)]=function(_0x5bf8ee){const _0x596e08=_0xe55837;VisuMZ[_0x596e08(0x278)][_0x596e08(0x9c4)]['call'](this,_0x5bf8ee),this[_0x596e08(0x8ef)](),this['createAttachmentSprites']();},Window_BattleStatus[_0xe55837(0x392)]['battleLayoutStyle']=function(){const _0x4c24a7=_0xe55837;if(this[_0x4c24a7(0x5cb)])return this[_0x4c24a7(0x5cb)];return this['_battleLayoutStyle']=SceneManager['_scene']['battleLayoutStyle'](),this['_battleLayoutStyle'];},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x8ef)]=function(){const _0x40809b=_0xe55837;this[_0x40809b(0x378)]=this[_0x40809b(0xb8)]();const _0x54be1f=VisuMZ[_0x40809b(0x278)][_0x40809b(0x108)][_0x40809b(0x22d)];if(_0x54be1f[_0x40809b(0x668)]){if(_0x40809b(0x2cd)===_0x40809b(0x2cd))this[_0x40809b(0x863)]=0x0;else{function _0x3fcc08(){const _0x5423f3=_0x40809b,_0x1f1853='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x5423f3(0x11c)](_0x30e1f8);_0x2fbce2[_0x5423f3(0x278)]['JS'][_0xacc466]=new _0x5d5afc(_0x1f1853);}}}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0xb8)]=function(){const _0x4139af=_0xe55837,_0x5f1b6d=VisuMZ[_0x4139af(0x278)]['Settings'][_0x4139af(0x22d)];if(_0x5f1b6d[_0x4139af(0x644)])return!![];const _0x598d8f=this['battleLayoutStyle']();switch(_0x598d8f){case'list':case'border':return!![];break;case'default':case'xp':case _0x4139af(0x85f):default:return![];break;}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x2b6)]=function(){const _0x47e60a=_0xe55837;if(this[_0x47e60a(0xb8)]()){if(_0x47e60a(0x989)===_0x47e60a(0x892)){function _0x354e2d(){const _0x3fad73=_0x47e60a;if(!_0x53b492[_0x3fad73(0x1d0)]())return;_0x3109ec[_0x3fad73(0x313)](_0x1577d1,_0x5e6005);const _0x13f265=_0x231373[_0x3fad73(0x534)](),_0x1ba421=_0x1ab655[_0x3fad73(0x815)],_0x214dcc=_0x599236[_0x3fad73(0xec)],_0x4fba03=_0x21f28a['_allTargets']?_0x2ae239['_allTargets'][_0x3fad73(0x2b5)](0x0):[],_0x5d340c=_0x380c16[_0x3fad73(0xa2)];if(!_0x13f265||!_0x1ba421||!_0x214dcc)return;if(!_0x1ba421[_0x3fad73(0xa24)]())return;if(_0x2b6e74[_0x3fad73(0x995)])_0x5d340c[_0x3fad73(0x30a)](_0x3fad73(0xc7),_0x214dcc,_0x4fba03,![]);if(_0x1a0432[_0x3fad73(0x321)])_0x5d340c[_0x3fad73(0x30a)]('waitForNewLine');if(_0x2da408[_0x3fad73(0x7ae)])_0x5d340c[_0x3fad73(0x30a)](_0x3fad73(0x410));if(_0x8daec2['ClearBattleLog'])_0x5d340c['push'](_0x3fad73(0x8d7));if(_0x385255[_0x3fad73(0xa21)])_0x5d340c['push'](_0x3fad73(0x9ae),_0x214dcc);if(_0x307ff['WaitForMovement'])_0x5d340c[_0x3fad73(0x30a)](_0x3fad73(0x344));_0x13f265[_0x3fad73(0x78a)](_0x3fad73(0x7fd));}}else return 0x0;}else return 0xa;},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x916)]=function(){const _0x72cfb6=_0xe55837,_0x4cfdf4=this['battleLayoutStyle']();switch(_0x4cfdf4){case _0x72cfb6(0x656):return 0x1;break;case'xp':case _0x72cfb6(0x85f):return $gameParty[_0x72cfb6(0x629)]()[_0x72cfb6(0x4c5)];break;case _0x72cfb6(0x4d5):default:return $gameParty[_0x72cfb6(0x9e8)]();break;}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x37c)]=function(){const _0x23a2dc=_0xe55837,_0x22a4ed=this[_0x23a2dc(0x2cc)]();switch(_0x22a4ed){case _0x23a2dc(0x656):return Window_StatusBase[_0x23a2dc(0x392)]['itemHeight'][_0x23a2dc(0x782)](this);break;case _0x23a2dc(0x4d5):case'xp':case _0x23a2dc(0x85f):default:return this[_0x23a2dc(0x965)];break;}},Window_BattleStatus['prototype']['rowSpacing']=function(){const _0x500f0e=_0xe55837,_0x7b8773=this[_0x500f0e(0x2cc)]();switch(_0x7b8773){case _0x500f0e(0x656):return Window_StatusBase[_0x500f0e(0x392)][_0x500f0e(0x7df)][_0x500f0e(0x782)](this);break;case'default':case'xp':case _0x500f0e(0x85f):default:return 0x0;break;}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x33c)]=function(){const _0x474184=_0xe55837;if(this[_0x474184(0xb8)]()){if(_0x474184(0x238)!==_0x474184(0x13a))Window_StatusBase['prototype'][_0x474184(0x33c)][_0x474184(0x782)](this);else{function _0x128cd8(){const _0x1374e9=_0x474184;if(!_0x4d8534['isSceneBattle']())return;_0x80f4d7[_0x1374e9(0x313)](_0x24850e,_0x4d0d66);const _0x9a81b0=_0x5ca23b['_logWindow'],_0x37b438=_0x4132c1['CopyCombatLog']&&_0x5021af['VisuMZ_4_CombatLog'];_0x9a81b0[_0x1374e9(0x390)](_0x20da40['Text']),_0x37b438&&_0x2d8c9a[_0x1374e9(0x52d)]&&_0x390d07[_0x1374e9(0x5e0)](_0x274396[_0x1374e9(0x68d)]||'',_0x5eead0[_0x1374e9(0x46b)]||0x0);}}}else this['padding']=0x8;},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x3a8)]=function(){const _0xd99045=_0xe55837,_0x120b3d=VisuMZ['BattleCore'][_0xd99045(0x108)]['BattleLayout'];if(_0x120b3d[_0xd99045(0x644)])this['windowskin']=ImageManager[_0xd99045(0x55f)](_0x120b3d[_0xd99045(0x644)]);else{if(_0xd99045(0x428)===_0xd99045(0x428))Window_StatusBase[_0xd99045(0x392)][_0xd99045(0x3a8)][_0xd99045(0x782)](this);else{function _0x240028(){const _0x5c3b2c=_0xd99045;this[_0x5c3b2c(0x2cf)](_0x5c3b2c(0x23e));}}}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x24e)]=function(_0x49d225){const _0x265724=_0xe55837,_0x5ed991=VisuMZ[_0x265724(0x278)][_0x265724(0x108)][_0x265724(0x22d)];if(_0x5ed991[_0x265724(0xd7)])return;Window_StatusBase['prototype'][_0x265724(0x24e)][_0x265724(0x782)](this,_0x49d225);},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x6cc)]=function(){const _0x19abb6=_0xe55837;this[_0x19abb6(0x7ab)]=!![];},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x59f)]=function(){const _0x48807a=_0xe55837;Window_StatusBase[_0x48807a(0x392)][_0x48807a(0x59f)][_0x48807a(0x782)](this),this[_0x48807a(0x203)](),this[_0x48807a(0x7d0)]();if(this[_0x48807a(0x2cc)]()==='border')this[_0x48807a(0x536)]();},Window_BattleStatus['prototype'][_0xe55837(0x203)]=function(){const _0x23ac9e=_0xe55837;if($gameTemp[_0x23ac9e(0x3d8)]()){if(_0x23ac9e(0x4c3)!==_0x23ac9e(0x4c3)){function _0xf2a28(){const _0x40d6e4=_0x23ac9e;let _0x1156b0=_0x11e04e[_0x40d6e4(0x278)]['Sprite_Battler_damageOffsetX'][_0x40d6e4(0x782)](this),_0x45beac=_0x10d031[_0x40d6e4(0x278)][_0x40d6e4(0x108)][_0x40d6e4(0x9fc)][_0x40d6e4(0x4ad)]||0x0;return _0x35a4da[_0x40d6e4(0x498)](_0x1156b0+_0x45beac);}}else this[_0x23ac9e(0x7fe)](),this[_0x23ac9e(0x7ab)]=![],$gameTemp['clearBattleRefreshRequest']();}else{if(this['_requestRefresh']){if(_0x23ac9e(0x899)!==_0x23ac9e(0x899)){function _0x374566(){const _0x25cf16=_0x23ac9e;this[_0x25cf16(0x10d)]['x']=_0x18d3ba['width']*0xa,this[_0x25cf16(0x10d)]['y']=_0xb701ec[_0x25cf16(0x97c)]*0xa;}}else this[_0x23ac9e(0x7ab)]=![],this[_0x23ac9e(0x597)](),this[_0x23ac9e(0x1f2)]();}}},Window_BattleStatus[_0xe55837(0x392)]['show']=function(){const _0x40d3cc=_0xe55837;Window_StatusBase['prototype']['show']['call'](this);if(!$gameSystem[_0x40d3cc(0x22a)]())this[_0x40d3cc(0x597)]();},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0xa20)]=function(){const _0x20b2c5=_0xe55837;if(this[_0x20b2c5(0x78e)]===Window_BattleStatus)return;Window_StatusBase[_0x20b2c5(0x392)][_0x20b2c5(0xa20)]['call'](this);},Window_BattleStatus[_0xe55837(0x392)]['drawBackgroundRect']=function(_0xd2e422){const _0x3adff4=_0xe55837,_0x179fa0=this[_0x3adff4(0x2cc)]();switch(_0x179fa0){case'xp':case _0x3adff4(0x85f):break;case _0x3adff4(0x4d5):case _0x3adff4(0x656):case _0x3adff4(0x1bb):default:return Window_StatusBase[_0x3adff4(0x392)]['drawBackgroundRect'][_0x3adff4(0x782)](this,_0xd2e422);break;}},VisuMZ[_0xe55837(0x278)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0xe55837(0x392)]['drawItemImage'],Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x686)]=function(_0x5af208){const _0x5bd244=_0xe55837,_0x5c9ec7=this[_0x5bd244(0x2cc)]();switch(_0x5c9ec7){case'list':this[_0x5bd244(0x69d)](_0x5af208);break;case'xp':this[_0x5bd244(0x3a0)](_0x5af208);break;case _0x5bd244(0x85f):this[_0x5bd244(0xa01)](_0x5af208);break;case _0x5bd244(0x4d5):case _0x5bd244(0x1bb):default:VisuMZ[_0x5bd244(0x278)][_0x5bd244(0x96b)][_0x5bd244(0x782)](this,_0x5af208);break;}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x623)]=function(_0x205957){const _0x164f3b=_0xe55837,_0x46b54c=this[_0x164f3b(0x2cc)]();if(!$gameSystem[_0x164f3b(0x22a)]())this['centerFrontViewSprite'](_0x205957);switch(_0x46b54c){case _0x164f3b(0x656):this[_0x164f3b(0x25d)](_0x205957);break;case'xp':case _0x164f3b(0x85f):case _0x164f3b(0x4d5):case'border':default:this[_0x164f3b(0x1d6)](_0x205957);break;}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x6fc)]=function(){const _0x2644c7=_0xe55837,_0x54316c=this[_0x2644c7(0x2cc)]();if(['xp']['includes'](_0x54316c)&&!$gameSystem[_0x2644c7(0x22a)]()){if(_0x2644c7(0x1a5)===_0x2644c7(0x1a5)){this[_0x2644c7(0x8e9)](0x0,0x0,0x0,0x0);return;}else{function _0x1cbe64(){const _0x384556=_0x2644c7;if(this['_targetOpacity']===_0x21f37c)return;this['_targetOpacity']=_0x488b6d,this['_opacityDuration']=_0x50f07e,this['_opacityWholeDuration']=_0x323a0e,this[_0x384556(0x545)]=_0x29501f||'Linear';if(_0x3be7d8<=0x0)this['opacity']=_0x5053f2;}}}Window_StatusBase[_0x2644c7(0x392)][_0x2644c7(0x6fc)][_0x2644c7(0x782)](this);},Window_BattleStatus[_0xe55837(0x392)]['centerFrontViewSprite']=function(_0x1aeb61){const _0xd9fb31=_0xe55837,_0x1ac460=this['actor'](_0x1aeb61)[_0xd9fb31(0xe1)]();if(!_0x1ac460)return;const _0x13402b=this[_0xd9fb31(0x2cc)](),_0x156b18=this[_0xd9fb31(0x5d2)](_0x1aeb61);let _0x587fc6=Math[_0xd9fb31(0x498)](_0x156b18['x']+_0x156b18['width']/0x2)+this[_0xd9fb31(0x949)];[_0xd9fb31(0x656)]['includes'](_0x13402b)&&(_0x587fc6=_0x156b18[_0xd9fb31(0x124)]/$gameParty[_0xd9fb31(0x629)]()[_0xd9fb31(0x4c5)],_0x587fc6*=_0x1aeb61,_0x587fc6+=_0x156b18['width']/$gameParty[_0xd9fb31(0x629)]()[_0xd9fb31(0x4c5)]/0x2);let _0x465fe3=Math[_0xd9fb31(0x498)](this[_0xd9fb31(0x9f4)](_0x1aeb61,_0x1ac460,_0x156b18));_0x1ac460[_0xd9fb31(0x291)](_0x587fc6,_0x465fe3),this[_0xd9fb31(0x16b)](_0x1ac460,0x1),_0x1ac460[_0xd9fb31(0x2fa)]();},Window_BattleStatus[_0xe55837(0x392)]['frontviewSpriteY']=function(_0x14d81f,_0x536ec5,_0x485713){const _0x473705=_0xe55837,_0x2f512f=VisuMZ[_0x473705(0x278)]['Settings'][_0x473705(0x22d)],_0x7df0f9=this[_0x473705(0x2cc)]();if(_0x7df0f9==='xp'){if(_0x473705(0x14f)===_0x473705(0x3b9)){function _0x7095b3(){const _0x2460f7=_0x473705;this[_0x2460f7(0x596)]();}}else{const _0x54b0c8=_0x2f512f[_0x473705(0x5b0)];switch(_0x54b0c8[_0x473705(0x8f1)]()[_0x473705(0x1ee)]()){case _0x473705(0x91a):return _0x485713[_0x473705(0x97c)]-_0x536ec5[_0x473705(0x8f9)][_0x473705(0x97c)]/0x4;break;case _0x473705(0x89d):const _0x5ca851=_0x2f512f[_0x473705(0x98a)];return(_0x485713[_0x473705(0x97c)]+(_0x536ec5[_0x473705(0x97c)]||_0x5ca851))/0x2;break;case'top':return 0x0;case _0x473705(0x625):default:return this[_0x473705(0x73f)](_0x485713);break;}}}else{if(_0x7df0f9==='portrait'){}}return _0x536ec5[_0x473705(0x97c)];},Window_BattleStatus[_0xe55837(0x392)]['drawItemImageListStyle']=function(_0x29d8b8){const _0x4ca227=_0xe55837;if(!VisuMZ[_0x4ca227(0x278)][_0x4ca227(0x108)][_0x4ca227(0x22d)][_0x4ca227(0x365)])return;const _0x18c708=this[_0x4ca227(0x3b1)](_0x29d8b8),_0x4a1fa9=this['itemRect'](_0x29d8b8);_0x4a1fa9[_0x4ca227(0x124)]=ImageManager[_0x4ca227(0x405)],_0x4a1fa9[_0x4ca227(0x97c)]-=0x2,this[_0x4ca227(0x734)](_0x18c708,_0x4a1fa9['x']+0x1,_0x4a1fa9['y']+0x1,_0x4a1fa9[_0x4ca227(0x124)],_0x4a1fa9['height']);},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x25d)]=function(_0x17d46e){const _0x40bdab=_0xe55837,_0x76e450=VisuMZ[_0x40bdab(0x278)]['Settings'][_0x40bdab(0x22d)],_0x3c8108=$dataSystem[_0x40bdab(0x65f)]?0x4:0x3,_0x2b8717=_0x3c8108*0x80+(_0x3c8108-0x1)*0x8+0x4,_0x22dba5=this[_0x40bdab(0x3b1)](_0x17d46e),_0x239024=this[_0x40bdab(0x5d2)](_0x17d46e);let _0xb14d3b=_0x239024['x']+this[_0x40bdab(0x949)];_0x76e450['ShowFacesListStyle']?_0xb14d3b=_0x239024['x']+ImageManager[_0x40bdab(0x405)]+0x8:_0xb14d3b+=ImageManager[_0x40bdab(0x3dd)];const _0x19a663=Math[_0x40bdab(0x498)](Math[_0x40bdab(0x6a9)](_0x239024['x']+_0x239024['width']-_0x2b8717,_0xb14d3b)),_0x3fb7c6=Math[_0x40bdab(0x498)](_0x239024['y']+(_0x239024[_0x40bdab(0x97c)]-Sprite_Name[_0x40bdab(0x392)][_0x40bdab(0x35d)]())/0x2),_0x4b0f0e=Math[_0x40bdab(0x498)](_0x19a663-ImageManager['iconWidth']/0x2-0x4),_0x200ddc=Math['round'](_0x239024['y']+(_0x239024[_0x40bdab(0x97c)]-ImageManager[_0x40bdab(0xa0d)])/0x2+ImageManager[_0x40bdab(0xa0d)]/0x2);let _0xa5dfc6=_0x19a663+0x88;const _0x174860=_0x3fb7c6;this[_0x40bdab(0x3ca)](_0x22dba5,_0x19a663-0x4+(_0x76e450[_0x40bdab(0x640)]||0x0),_0x3fb7c6+(_0x76e450[_0x40bdab(0x35a)]||0x0)),this[_0x40bdab(0x7ee)](_0x22dba5,_0x19a663+(_0x76e450['NameOffsetX']||0x0),_0x3fb7c6+(_0x76e450[_0x40bdab(0x35b)]||0x0)),this[_0x40bdab(0x4f7)](_0x22dba5,_0x4b0f0e+(_0x76e450[_0x40bdab(0x6f5)]||0x0),_0x200ddc+(_0x76e450[_0x40bdab(0x552)]||0x0)),this[_0x40bdab(0xa29)](_0x22dba5,'hp',_0xa5dfc6+0x88*0x0+(_0x76e450[_0x40bdab(0x77e)]||0x0),_0x174860+(_0x76e450['HpGaugeOffsetY']||0x0)),this['placeGauge'](_0x22dba5,'mp',_0xa5dfc6+0x88*0x1+(_0x76e450[_0x40bdab(0x506)]||0x0),_0x174860+(_0x76e450['MpGaugeOffsetY']||0x0)),$dataSystem['optDisplayTp']&&this[_0x40bdab(0xa29)](_0x22dba5,'tp',_0xa5dfc6+0x88*0x2+(_0x76e450[_0x40bdab(0x315)]||0x0),_0x174860+(_0x76e450[_0x40bdab(0x2e1)]||0x0));},Window_BattleStatus['prototype']['drawItemImageXPStyle']=function(_0x2bde7c){const _0x17a749=_0xe55837;if(!$gameSystem['isSideView']())return;VisuMZ['BattleCore'][_0x17a749(0x96b)][_0x17a749(0x782)](this,_0x2bde7c);},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x1d6)]=function(_0x4a9d05){const _0xe8fb89=_0xe55837,_0x56e2b7=VisuMZ['BattleCore']['Settings'][_0xe8fb89(0x22d)],_0x2b3d8a=this[_0xe8fb89(0x3b1)](_0x4a9d05),_0x51d75a=this['itemRect'](_0x4a9d05),_0xcbbd7e=Math[_0xe8fb89(0x498)](_0x51d75a['x']+(_0x51d75a[_0xe8fb89(0x124)]-0x80)/0x2),_0x2909bb=this['nameY'](_0x51d75a);let _0x2a874a=_0xcbbd7e-ImageManager[_0xe8fb89(0x3dd)]/0x2-0x4,_0x34052f=_0x2909bb+ImageManager[_0xe8fb89(0xa0d)]/0x2;_0x2a874a-ImageManager[_0xe8fb89(0x3dd)]/0x2<_0x51d75a['x']&&(_0x2a874a=_0xcbbd7e+ImageManager[_0xe8fb89(0x3dd)]/0x2-0x4,_0x34052f=_0x2909bb-ImageManager[_0xe8fb89(0xa0d)]/0x2);const _0x3a39c3=_0xcbbd7e,_0x2f2482=this[_0xe8fb89(0x3ae)](_0x51d75a);this['placeTimeGauge'](_0x2b3d8a,_0xcbbd7e+(_0x56e2b7[_0xe8fb89(0x640)]||0x0),_0x2909bb+(_0x56e2b7[_0xe8fb89(0x35a)]||0x0)),this[_0xe8fb89(0x7ee)](_0x2b3d8a,_0xcbbd7e+(_0x56e2b7[_0xe8fb89(0x5c9)]||0x0),_0x2909bb+(_0x56e2b7[_0xe8fb89(0x35b)]||0x0)),this[_0xe8fb89(0x4f7)](_0x2b3d8a,_0x2a874a+(_0x56e2b7[_0xe8fb89(0x6f5)]||0x0),_0x34052f+(_0x56e2b7[_0xe8fb89(0x552)]||0x0)),this['placeGauge'](_0x2b3d8a,'hp',_0x3a39c3+(_0x56e2b7[_0xe8fb89(0x77e)]||0x0),_0x2f2482+(_0x56e2b7[_0xe8fb89(0x6d7)]||0x0)),this[_0xe8fb89(0xa29)](_0x2b3d8a,'mp',_0x3a39c3+(_0x56e2b7[_0xe8fb89(0x506)]||0x0),_0x2f2482+this[_0xe8fb89(0x6ff)]()+(_0x56e2b7['MpGaugeOffsetY']||0x0));if($dataSystem['optDisplayTp']){if(_0xe8fb89(0x964)===_0xe8fb89(0x964))this[_0xe8fb89(0xa29)](_0x2b3d8a,'tp',_0x3a39c3+(_0x56e2b7['TpGaugeOffsetX']||0x0),_0x2f2482+this[_0xe8fb89(0x6ff)]()*0x2+(_0x56e2b7[_0xe8fb89(0x2e1)]||0x0));else{function _0x253a20(){const _0x44b370=_0xe8fb89;_0x30991e=_0x384035['concat'](_0x216717[_0x44b370(0x777)](_0x411062));}}}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0xa37)]=function(_0x322429){const _0x2fc184=_0xe55837;if(!VisuMZ[_0x2fc184(0x278)]['Settings'][_0x2fc184(0x22d)][_0x2fc184(0x63c)])return![];if(_0x322429[_0x2fc184(0x5ef)]())return!![];return Imported[_0x2fc184(0x68c)]&&_0x322429['getMenuImage']();},Game_Actor[_0xe55837(0x392)]['getBattlePortraitOffsetX']=function(){const _0x3c2ef1=_0xe55837;if(this['actor']()[_0x3c2ef1(0x35c)][_0x3c2ef1(0x1c3)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x3c2ef1(0x5b8)===_0x3c2ef1(0x1e4)){function _0x3aca89(){const _0x53d778=_0x3c2ef1,_0x1aa091=this[_0x53d778(0x53e)]();if(_0x1aa091&&this[_0x53d778(0x863)]<0xff)this[_0x53d778(0x863)]+=0x10;else!_0x1aa091&&this['opacity']>0x0&&(this[_0x53d778(0x863)]-=0x10);}}else return Number(RegExp['$1']);}else{if(this[_0x3c2ef1(0x3b1)]()[_0x3c2ef1(0x35c)][_0x3c2ef1(0x1c3)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x3c2ef1(0x6e1)!==_0x3c2ef1(0x6e1)){function _0x38f06(){const _0x173ae5=_0x3c2ef1;return _0x2aa7b1[_0x173ae5(0x278)]['Game_Interpreter_command301'][_0x173ae5(0x782)](this,_0x12418e);}}else return Number(RegExp['$1']);}}return 0x0;},Game_Actor[_0xe55837(0x392)][_0xe55837(0x58b)]=function(){const _0x2ca83b=_0xe55837;if(this[_0x2ca83b(0x3b1)]()[_0x2ca83b(0x35c)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x2ca83b(0x3b1)]()[_0x2ca83b(0x35c)][_0x2ca83b(0x1c3)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0xa01)]=function(_0x4cf6b3){const _0x127e8e=_0xe55837,_0x426b42=this[_0x127e8e(0x3b1)](_0x4cf6b3);if(this[_0x127e8e(0xa37)](_0x426b42)){if(_0x127e8e(0x51e)!==_0x127e8e(0x29b)){const _0x56c4fa=_0x127e8e(0x41f)[_0x127e8e(0x11c)](_0x426b42[_0x127e8e(0x92d)]()),_0x41709c=this[_0x127e8e(0x3cd)](_0x56c4fa,Sprite),_0x127ff9=_0x426b42[_0x127e8e(0x147)]();if(_0x127ff9!=='')_0x41709c[_0x127e8e(0x881)]=ImageManager[_0x127e8e(0x929)](_0x127ff9);else{if(_0x127e8e(0x57f)==='LdHWd')_0x41709c[_0x127e8e(0x881)]=ImageManager['_emptyBitmap'];else{function _0x10e474(){const _0x20877c=_0x127e8e;this[_0x20877c(0x49f)]();}}}const _0x394747=this['itemRect'](_0x4cf6b3);_0x41709c[_0x127e8e(0x5dc)]['x']=0.5,_0x41709c[_0x127e8e(0x5dc)]['y']=0x1;let _0x4f35da=Math[_0x127e8e(0x498)](_0x394747['x']+_0x394747['width']/0x2)+this['padding'];_0x4f35da+=_0x426b42[_0x127e8e(0x9be)]();let _0x3ef9d1=Math['round'](this[_0x127e8e(0x97c)]);_0x3ef9d1+=_0x426b42['getBattlePortraitOffsetY'](),_0x41709c[_0x127e8e(0x982)](_0x4f35da,_0x3ef9d1);const _0x57a2ab=VisuMZ[_0x127e8e(0x278)][_0x127e8e(0x108)][_0x127e8e(0x22d)][_0x127e8e(0x2c3)];_0x41709c['scale']['x']=_0x57a2ab,_0x41709c[_0x127e8e(0x23d)]['y']=_0x57a2ab,_0x41709c['show']();}else{function _0xfa20c(){_0x4da628['setValue'](_0xc1a508['VariableDmg'],0x0);}}}else{const _0x29f5ed=this['faceRect'](_0x4cf6b3);this[_0x127e8e(0x734)](_0x426b42,_0x29f5ed['x'],_0x29f5ed['y'],_0x29f5ed[_0x127e8e(0x124)],_0x29f5ed[_0x127e8e(0x97c)]);}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x3cd)]=function(_0x23e8fc,_0x18ab5d){const _0x3a2951=_0xe55837,_0x24f3f1=this[_0x3a2951(0x24a)];if(_0x24f3f1[_0x23e8fc])return _0x24f3f1[_0x23e8fc];else{if(_0x3a2951(0x709)===_0x3a2951(0x709)){const _0x413a5e=new _0x18ab5d();return _0x24f3f1[_0x23e8fc]=_0x413a5e,this[_0x3a2951(0x90f)](_0x413a5e),this[_0x3a2951(0x90f)](this[_0x3a2951(0x16d)]),_0x413a5e;}else{function _0x9ca577(){const _0x4908e6=_0x3a2951;this[_0x4908e6(0x8f9)]['visible']=this['_battler'][_0x4908e6(0x674)](),this[_0x4908e6(0x188)]();}}}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x513)]=function(){const _0x5440f5=_0xe55837;this[_0x5440f5(0x157)](),this[_0x5440f5(0x6d4)](),Window_StatusBase[_0x5440f5(0x392)][_0x5440f5(0x513)]['call'](this),this[_0x5440f5(0x30d)]();},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x157)]=function(){const _0x552f10=_0xe55837;this['_cursorArea']=new Sprite(),this[_0x552f10(0x16d)][_0x552f10(0x7c4)]=[new PIXI[(_0x552f10(0x7c4))][(_0x552f10(0x10b))]()],this['_cursorArea']['filterArea']=new Rectangle(),this[_0x552f10(0x16d)][_0x552f10(0x982)](this['_padding'],this[_0x552f10(0x163)]),this[_0x552f10(0x9e6)](this['_cursorArea']);},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x6d4)]=function(){const _0x4ddd76=_0xe55837;this['_effectsContainer']=new Sprite(),this[_0x4ddd76(0x9e6)](this['_effectsContainer']);},Window_BattleStatus[_0xe55837(0x392)]['_createDamageContainer']=function(){const _0x8b3081=_0xe55837;this[_0x8b3081(0x700)]=new Sprite(),this[_0x8b3081(0x9e6)](this[_0x8b3081(0x700)]);},Window_BattleStatus['prototype'][_0xe55837(0x2ac)]=function(){const _0x4c8eb3=_0xe55837;this[_0x4c8eb3(0x550)]=new Sprite();for(let _0x5c8a51=0x0;_0x5c8a51<0x9;_0x5c8a51++){this[_0x4c8eb3(0x550)][_0x4c8eb3(0x9e6)](new Sprite());}this[_0x4c8eb3(0x16d)][_0x4c8eb3(0x9e6)](this['_cursorSprite']);},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x2e8)]=function(){const _0x5e882b=_0xe55837;Window_StatusBase[_0x5e882b(0x392)]['_updateClientArea']['call'](this),this[_0x5e882b(0x985)]();},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x985)]=function(){const _0x6dd472=_0xe55837,_0x38082a=this[_0x6dd472(0x163)];this['_cursorArea'][_0x6dd472(0x982)](_0x38082a,_0x38082a),this[_0x6dd472(0x16d)]['x']=_0x38082a-this[_0x6dd472(0x780)]['x'],this[_0x6dd472(0x16d)]['y']=_0x38082a-this[_0x6dd472(0x780)]['y'];if(this[_0x6dd472(0x3e9)]>0x0&&this[_0x6dd472(0x965)]>0x0)this[_0x6dd472(0x16d)][_0x6dd472(0x331)]=this[_0x6dd472(0x5f1)]();else{if('ObMKp'===_0x6dd472(0x18a))this[_0x6dd472(0x16d)][_0x6dd472(0x331)]=![];else{function _0xa8cb02(){const _0x4a9fea=_0x6dd472;return this['battlerSprites']()[_0x4a9fea(0x9e7)](_0x18fcac=>_0x18fcac[_0x4a9fea(0x862)]());}}}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x457)]=function(){const _0x532ae2=_0xe55837;Window_StatusBase[_0x532ae2(0x392)]['_updateFilterArea'][_0x532ae2(0x782)](this),this[_0x532ae2(0x8fa)]();},Window_BattleStatus['prototype'][_0xe55837(0x8fa)]=function(){const _0x22c5ed=_0xe55837,_0x1ea385=this[_0x22c5ed(0x16d)]['worldTransform'][_0x22c5ed(0x183)](new Point(0x0,0x0)),_0x3ce92d=this[_0x22c5ed(0x16d)][_0x22c5ed(0x32c)];_0x3ce92d['x']=_0x1ea385['x']+this['origin']['x'],_0x3ce92d['y']=_0x1ea385['y']+this[_0x22c5ed(0x780)]['y'],_0x3ce92d[_0x22c5ed(0x124)]=this[_0x22c5ed(0x3e9)],_0x3ce92d[_0x22c5ed(0x97c)]=this[_0x22c5ed(0x965)];},Window_BattleStatus['prototype'][_0xe55837(0xa6a)]=function(_0x3323df){const _0x5450df=_0xe55837;if(this[_0x5450df(0x2cc)]()!==_0x5450df(0x85f))return;this[_0x5450df(0xa01)](_0x3323df['index']());},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x9a)]=function(_0x1074c5,_0x4d4b0d){const _0x2c2286=_0xe55837;if(!this[_0x2c2286(0x700)])return;if(!_0x1074c5)return;if(!_0x4d4b0d)return;const _0x396144=this[_0x2c2286(0x5d2)](_0x4d4b0d[_0x2c2286(0x7a5)]());_0x396144['x']+=_0x396144[_0x2c2286(0x124)]/0x2+this[_0x2c2286(0x949)],_0x1074c5['x']=_0x396144['x'],_0x1074c5['y']=_0x396144['y'],this[_0x2c2286(0x700)][_0x2c2286(0x9e6)](_0x1074c5);},Window_BattleStatus['prototype'][_0xe55837(0x381)]=function(_0x5785e7){const _0x18c238=_0xe55837;if(!this['_damageContainer'])return;if(!_0x5785e7)return;this[_0x18c238(0x700)][_0x18c238(0x8c5)](_0x5785e7);},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x536)]=function(){const _0x566e86=_0xe55837;if(!this[_0x566e86(0x6e8)]())return;if(!this[_0x566e86(0x5e9)])this[_0x566e86(0x939)]();this['prepareBorderActor'](),this[_0x566e86(0x420)]();},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x6e8)]=function(){const _0x976b80=_0xe55837;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x976b80(0x1d0)]())return![];return VisuMZ[_0x976b80(0x278)][_0x976b80(0x108)][_0x976b80(0x22d)][_0x976b80(0x304)];},Window_BattleStatus['prototype'][_0xe55837(0x939)]=function(){const _0x391ec3=_0xe55837;this[_0x391ec3(0x5e9)]=new Sprite();const _0x2b98d5=SceneManager[_0x391ec3(0x1c8)],_0xc143ef=_0x2b98d5[_0x391ec3(0x6a6)]['indexOf'](_0x2b98d5[_0x391ec3(0x10d)]);_0x2b98d5['addChildAt'](this[_0x391ec3(0x5e9)],_0xc143ef),this[_0x391ec3(0x5e9)][_0x391ec3(0x5dc)]['x']=0.5,this[_0x391ec3(0x5e9)][_0x391ec3(0x5dc)]['y']=0x1;const _0x544cfd=VisuMZ[_0x391ec3(0x278)][_0x391ec3(0x108)][_0x391ec3(0x22d)][_0x391ec3(0x289)];this[_0x391ec3(0x5e9)][_0x391ec3(0x23d)]['x']=_0x544cfd,this[_0x391ec3(0x5e9)]['scale']['y']=_0x544cfd,this[_0x391ec3(0x5e9)]['y']=this['y']+this['height'],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0xe55837(0x392)]['prepareBorderActor']=function(){const _0x17ccb0=_0xe55837;this['_borderPortraitSprite'][_0x17ccb0(0x331)]=BattleManager[_0x17ccb0(0xa79)]();const _0x49d90e=BattleManager['actor']();if(_0x49d90e===this['_borderPortraitSprite'][_0x17ccb0(0x3b1)])return;this[_0x17ccb0(0x5e9)]['actor']=_0x49d90e||this[_0x17ccb0(0x5e9)]['actor'];if(!_0x49d90e)return;else{if(_0x49d90e[_0x17ccb0(0x147)]()===''){this[_0x17ccb0(0x5e9)][_0x17ccb0(0x881)]=ImageManager[_0x17ccb0(0x26a)];return;}else{const _0x242d16=ImageManager[_0x17ccb0(0x929)](_0x49d90e['getBattlePortraitFilename']());_0x242d16[_0x17ccb0(0x2a8)](this[_0x17ccb0(0x2fc)][_0x17ccb0(0x51d)](this,_0x242d16));}}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x2fc)]=function(_0x4af3fd){const _0x1b0e30=_0xe55837;this[_0x1b0e30(0x1da)]=0x14,this['_borderPortraitSprite'][_0x1b0e30(0x881)]=_0x4af3fd;if(SceneManager['_scene']['isRightInputMode']()){if(_0x1b0e30(0x5df)!==_0x1b0e30(0x872))this[_0x1b0e30(0x5e9)]['x']=0x0,this['_borderPortraitTargetX']=Math[_0x1b0e30(0x541)](_0x4af3fd[_0x1b0e30(0x124)]/0x2);else{function _0x16532c(){const _0x54968d=_0x1b0e30;for(const _0x537cfc of this[_0x54968d(0xa1f)]){_0x537cfc['x']+=_0x1f2acd[_0x54968d(0x9ec)]*_0x155660,_0x537cfc['y']+=_0x39c463['PopupShiftY'];}}}}else this[_0x1b0e30(0x5e9)]['x']=this[_0x1b0e30(0x124)],this[_0x1b0e30(0x37b)]=this['width']*0x3/0x4;this[_0x1b0e30(0x5e9)]['opacity']=0x0,this[_0x1b0e30(0x5e9)]['y']=this['y']+this[_0x1b0e30(0x97c)];const _0x10f38a=BattleManager[_0x1b0e30(0x3b1)]();if(_0x10f38a){if(_0x1b0e30(0x79f)!=='aKJxL'){function _0x2a5545(){const _0x5b73d9=_0x1b0e30;return _0x1711c1[_0x5b73d9(0x1d0)]()?_0x463aab[_0x5b73d9(0x1c8)][_0x5b73d9(0x54d)][_0x5b73d9(0x700)]:this[_0x5b73d9(0x44b)];}}else this[_0x1b0e30(0x37b)]+=_0x10f38a['getBattlePortraitOffsetX'](),this[_0x1b0e30(0x5e9)]['y']+=_0x10f38a[_0x1b0e30(0x58b)]();}},Window_BattleStatus['prototype']['updateBorderSprite']=function(){const _0x16afa8=_0xe55837;if(this[_0x16afa8(0x1da)]>0x0){if(_0x16afa8(0x2eb)===_0x16afa8(0x2eb)){const _0x172809=this[_0x16afa8(0x1da)],_0x2c7c15=this[_0x16afa8(0x5e9)];_0x2c7c15['x']=(_0x2c7c15['x']*(_0x172809-0x1)+this['_borderPortraitTargetX'])/_0x172809,_0x2c7c15[_0x16afa8(0x863)]=(_0x2c7c15['opacity']*(_0x172809-0x1)+0xff)/_0x172809,this[_0x16afa8(0x1da)]--;}else{function _0xdb4bde(){const _0x561796=_0x16afa8;this[_0x561796(0x17e)](_0x1a0691);}}}},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0x7d0)]=function(){const _0x1562d1=_0xe55837;return;if(this[_0x1562d1(0x1bf)]){if(_0x1562d1(0xa5)===_0x1562d1(0x9cc)){function _0x3d6910(){const _0x5cdbba=_0x1562d1,_0x417d9a=_0x1d3dab[_0x5cdbba(0x660)](_0x2eb95f);return _0x417d9a>=0x0?[_0x497b0e[_0x417d9a-0x1]||_0x5627a9]:[_0x28d906];}}else this['_effectsContainer']['x']=this['x'],this[_0x1562d1(0x1bf)]['y']=this['y'];}this['_damageContainer']&&(this[_0x1562d1(0x700)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0xe55837(0x392)][_0xe55837(0xbc)]=function(){const _0x4798f3=_0xe55837,_0x533b3b=VisuMZ[_0x4798f3(0x278)][_0x4798f3(0x108)]['BattleLayout'];if(_0x533b3b[_0x4798f3(0x2ce)]){const _0xb7443=new Sprite();_0xb7443['bitmap']=ImageManager[_0x4798f3(0x55f)](_0x533b3b[_0x4798f3(0x2ce)]),_0xb7443['x']=_0x533b3b[_0x4798f3(0x986)]||0x0,_0xb7443['y']=_0x533b3b[_0x4798f3(0xa41)]||0x0,this[_0x4798f3(0x90f)](_0xb7443),this['_backAttachmentSprite']=_0xb7443;}if(_0x533b3b[_0x4798f3(0x7a7)]){const _0x814cff=new Sprite();_0x814cff[_0x4798f3(0x881)]=ImageManager[_0x4798f3(0x55f)](_0x533b3b[_0x4798f3(0x7a7)]),_0x814cff['x']=_0x533b3b[_0x4798f3(0x204)]||0x0,_0x814cff['y']=_0x533b3b['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x4798f3(0x9e6)](_0x814cff),this[_0x4798f3(0xa3d)]=_0x814cff;}},Window_BattleStatus['prototype'][_0xe55837(0x1f2)]=function(){const _0x12164f=_0xe55837;this[_0x12164f(0xa3d)]&&this[_0x12164f(0x9e6)](this[_0x12164f(0xa3d)]);},Window_BattleActor[_0xe55837(0x392)][_0xe55837(0x4b9)]=function(){const _0x54dade=_0xe55837;return Window_BattleStatus[_0x54dade(0x392)]['isOkEnabled'][_0x54dade(0x782)](this)&&this[_0x54dade(0x682)]();},Window_BattleActor[_0xe55837(0x392)]['isActionSelectionValid']=function(){const _0x4c0670=_0xe55837,_0x3f5f9a=BattleManager['inputtingAction'](),_0x360ef0=this[_0x4c0670(0x3b1)](this[_0x4c0670(0x7a5)]());if(!_0x3f5f9a)return!![];if(!_0x3f5f9a[_0x4c0670(0xa24)]())return!![];const _0x5e5a55=_0x3f5f9a[_0x4c0670(0xa24)]()[_0x4c0670(0x35c)];if(_0x5e5a55[_0x4c0670(0x1c3)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x360ef0===BattleManager[_0x4c0670(0x3b1)]())return![];}return!![];},VisuMZ[_0xe55837(0x278)]['Window_BattleEnemy_initialize']=Window_BattleEnemy['prototype'][_0xe55837(0x7b6)],Window_BattleEnemy[_0xe55837(0x392)]['initialize']=function(_0x143302){const _0x3c5182=_0xe55837;this['_lastEnemy']=null,VisuMZ[_0x3c5182(0x278)][_0x3c5182(0x5fb)]['call'](this,_0x143302);},Window_BattleEnemy[_0xe55837(0x392)][_0xe55837(0x916)]=function(){const _0x5dd12b=_0xe55837;return this[_0x5dd12b(0x246)]();},VisuMZ['BattleCore'][_0xe55837(0x611)]=Window_BattleEnemy[_0xe55837(0x392)][_0xe55837(0x2fa)],Window_BattleEnemy[_0xe55837(0x392)][_0xe55837(0x2fa)]=function(){const _0x25848d=_0xe55837;VisuMZ[_0x25848d(0x278)][_0x25848d(0x611)]['call'](this),this['y']=Graphics['height']*0xa;},Window_BattleEnemy[_0xe55837(0x392)][_0xe55837(0x12f)]=function(){const _0x434fdd=_0xe55837;return $gameTroop['aliveMembers']()[_0x434fdd(0x2b5)](0x0);},Window_BattleEnemy[_0xe55837(0x392)][_0xe55837(0x597)]=function(){const _0x13a14f=_0xe55837;this['_enemies']=this[_0x13a14f(0x12f)](),this['sortEnemies'](),Window_Selectable[_0x13a14f(0x392)][_0x13a14f(0x597)][_0x13a14f(0x782)](this);},Window_BattleEnemy[_0xe55837(0x392)][_0xe55837(0x337)]=function(){const _0x42f816=_0xe55837;this[_0x42f816(0xa5b)]['sort']((_0x24d464,_0x3f83f1)=>{const _0x335bdc=_0x42f816;if(_0x335bdc(0x61e)===_0x335bdc(0xc2)){function _0x716e8b(){const _0xa6cd44=_0x335bdc,_0x542f37=_0x45d686[_0x25fa5b];_0x542f37&&_0x3df7d3[_0xa6cd44(0x5ae)](_0x47cfe4);}}else{if(_0x24d464['battler']()[_0x335bdc(0xa0)]===_0x3f83f1[_0x335bdc(0xe1)]()[_0x335bdc(0xa0)])return _0x24d464[_0x335bdc(0xe1)]()['_baseY']-_0x3f83f1[_0x335bdc(0xe1)]()[_0x335bdc(0x937)];else{if(_0x335bdc(0x393)===_0x335bdc(0x990)){function _0x59004c(){const _0x16f9b2=_0x335bdc;_0x2a3426['BattleCore'][_0x16f9b2(0x76b)][_0x16f9b2(0x782)](this);}}else return _0x24d464[_0x335bdc(0xe1)]()[_0x335bdc(0xa0)]-_0x3f83f1['battler']()[_0x335bdc(0xa0)];}}}),SceneManager[_0x42f816(0x200)]()&&this[_0x42f816(0xa5b)][_0x42f816(0x8e2)]();},Window_BattleEnemy[_0xe55837(0x392)][_0xe55837(0x8a4)]=function(){const _0x3cf2d4=_0xe55837,_0x4a69b2=VisuMZ[_0x3cf2d4(0x278)][_0x3cf2d4(0x108)][_0x3cf2d4(0x214)];if(_0x4a69b2[_0x3cf2d4(0x208)])this[_0x3cf2d4(0x44a)]();else{if('RLsnU'===_0x3cf2d4(0xa07)){function _0x1407da(){const _0x1da8ca=_0x3cf2d4,_0x5dea40=this['svBattlerData']()[_0x1da8ca(0x959)]||0x0,_0x307ebd=_0x1d3444[_0x1da8ca(0x99c)][_0x5dea40];_0x307ebd&&this[_0x1da8ca(0x345)](_0x307ebd[_0x1da8ca(0x5ad)]);}}else this[_0x3cf2d4(0x255)]();}},Window_BattleEnemy['prototype'][_0xe55837(0x44a)]=function(){const _0x4850b4=_0xe55837;if(this['_lastEnemy']&&this[_0x4850b4(0xa5b)][_0x4850b4(0x450)](this[_0x4850b4(0x490)])){const _0x3b4486=this[_0x4850b4(0xa5b)]['indexOf'](this[_0x4850b4(0x490)]);this[_0x4850b4(0x32d)](_0x3b4486);}else{if(_0x4850b4(0x3e2)===_0x4850b4(0x645)){function _0x23129a(){const _0x4099c4=_0x4850b4,_0x1077ef=_0xf274a3[_0x4099c4(0x35c)];if(_0x1077ef[_0x4099c4(0x1c3)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x3f85f2=_0x44491f(_0x2e52de['$1']),_0x747852=_0x46f700[_0x4099c4(0x278)]['createKeyJS'](_0x59567b,_0x4099c4(0xa15));_0x397feb[_0x4099c4(0x278)][_0x4099c4(0xb0)](_0x3f85f2,_0x747852);}if(_0x1077ef[_0x4099c4(0x1c3)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x490fdf=_0x32cbfe(_0x2efad['$1']),_0x1dae6b=_0x232372[_0x4099c4(0x278)][_0x4099c4(0x678)](_0x439479,_0x4099c4(0x3ea));_0x5ccad0[_0x4099c4(0x278)][_0x4099c4(0x718)](_0x490fdf,_0x1dae6b);}}}else this[_0x4850b4(0x255)]();}},Window_BattleEnemy[_0xe55837(0x392)][_0xe55837(0x255)]=function(){const _0x3dd0ea=_0xe55837,_0x1ae73d=VisuMZ['BattleCore'][_0x3dd0ea(0x108)][_0x3dd0ea(0x214)];let _0x26cf90=![];if($gameSystem[_0x3dd0ea(0x22a)]()){if(_0x3dd0ea(0x7d6)!==_0x3dd0ea(0x7d6)){function _0x2872a3(){const _0x3667a1=_0x3dd0ea,_0x104d62=_0x27d501[_0x3667a1(0x278)][_0x3667a1(0x6bb)]['call'](this);return _0x104d62['autoBattleAtStart']=this[_0x3667a1(0x3b3)],_0x104d62[_0x3667a1(0x9d2)]=this[_0x3667a1(0x9d2)],_0x104d62[_0x3667a1(0xaa)]=this[_0x3667a1(0xaa)],_0x104d62;}}else _0x26cf90=_0x1ae73d[_0x3dd0ea(0x19e)];}else _0x26cf90=_0x1ae73d[_0x3dd0ea(0x263)];this[_0x3dd0ea(0x32d)](_0x26cf90?this[_0x3dd0ea(0x246)]()-0x1:0x0);},Window_BattleEnemy[_0xe55837(0x392)][_0xe55837(0x9cd)]=function(){const _0x8b0882=_0xe55837;Window_Selectable[_0x8b0882(0x392)][_0x8b0882(0x9cd)]['call'](this),this[_0x8b0882(0x490)]=this[_0x8b0882(0x67b)]();},Window_BattleItem[_0xe55837(0x392)][_0xe55837(0x450)]=function(_0x463e5a){const _0x3dd3f0=_0xe55837;if(!_0x463e5a)return![];return _0x463e5a['occasion']===0x0||_0x463e5a[_0x3dd3f0(0x81d)]===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0xe55837(0x9b)](Window_Base[_0xe55837(0x392)]),Window_AutoBattleCancel['prototype']['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0xe55837(0x392)]['initialize']=function(_0x7e5bbd){const _0x1d7794=_0xe55837;Window_Base[_0x1d7794(0x392)][_0x1d7794(0x7b6)][_0x1d7794(0x782)](this,_0x7e5bbd),this[_0x1d7794(0x6e3)](this[_0x1d7794(0xa51)]()),this['refresh']();},Window_AutoBattleCancel[_0xe55837(0x392)][_0xe55837(0xa51)]=function(){const _0x5b4197=_0xe55837;return VisuMZ['BattleCore'][_0x5b4197(0x108)]['AutoBattle'][_0x5b4197(0x352)];},Window_AutoBattleCancel['prototype'][_0xe55837(0x597)]=function(){const _0x33ac62=_0xe55837;this['contents']['clear']();const _0x194d46=VisuMZ['BattleCore']['Settings']['AutoBattle']['AutoBattleMsg'],_0x4332bb=_0x194d46[_0x33ac62(0x11c)](this['okButtonText'](),this[_0x33ac62(0x543)]()),_0x5a68ff=this[_0x33ac62(0x578)](_0x4332bb)[_0x33ac62(0x124)],_0x2cc8c1=Math[_0x33ac62(0x639)]((this[_0x33ac62(0x3e9)]-_0x5a68ff)/0x2);this[_0x33ac62(0x85a)](_0x4332bb,_0x2cc8c1,0x0,_0x5a68ff);},Window_AutoBattleCancel[_0xe55837(0x392)][_0xe55837(0x4f1)]=function(){const _0xb0b30b=_0xe55837;return Imported[_0xb0b30b(0x209)]?TextManager[_0xb0b30b(0x9c3)]('ok'):VisuMZ[_0xb0b30b(0x278)][_0xb0b30b(0x108)][_0xb0b30b(0x193)][_0xb0b30b(0x882)];},Window_AutoBattleCancel[_0xe55837(0x392)]['cancelButtonText']=function(){const _0x3577bc=_0xe55837;if(Imported[_0x3577bc(0x209)]){if(_0x3577bc(0x8ab)===_0x3577bc(0x880)){function _0x49e9df(){const _0x27c924=_0x3577bc,_0x4df1f5=this[_0x27c924(0x453)]();this[_0x27c924(0x99e)]=![],this[_0x27c924(0x597)](),this['isDead']()&&_0x4df1f5&&(this[_0x27c924(0x408)](),this[_0x27c924(0x41b)]());}}else return TextManager[_0x3577bc(0x9c3)]('cancel');}else{if(_0x3577bc(0x8de)===_0x3577bc(0x213)){function _0x4a320c(){const _0x2d77b8=_0x3577bc;this[_0x2d77b8(0x8e7)](_0x2d77b8(0x789)),_0x575785[_0x2d77b8(0x278)][_0x2d77b8(0x61f)][_0x2d77b8(0x782)](this),this[_0x2d77b8(0xa60)]('Defeat');}}else return VisuMZ[_0x3577bc(0x278)][_0x3577bc(0x108)]['AutoBattle'][_0x3577bc(0x736)];}},Window_AutoBattleCancel[_0xe55837(0x392)][_0xe55837(0x59f)]=function(){const _0x56afee=_0xe55837;Window_Base[_0x56afee(0x392)][_0x56afee(0x59f)][_0x56afee(0x782)](this),this[_0x56afee(0x839)](),this[_0x56afee(0x4d2)]();},Window_AutoBattleCancel[_0xe55837(0x392)][_0xe55837(0x839)]=function(){const _0xbaa35f=_0xe55837;this[_0xbaa35f(0x331)]=BattleManager[_0xbaa35f(0x9ed)];},Window_AutoBattleCancel[_0xe55837(0x392)][_0xe55837(0x4d2)]=function(){const _0x5637c8=_0xe55837;if(!BattleManager[_0x5637c8(0x9ed)])return;(Input[_0x5637c8(0x3b0)]('ok')||Input[_0x5637c8(0x3b0)](_0x5637c8(0x8ff))||TouchInput[_0x5637c8(0xa74)]()||TouchInput[_0x5637c8(0x555)]())&&(SoundManager[_0x5637c8(0x583)](),BattleManager[_0x5637c8(0x9ed)]=![],Input[_0x5637c8(0x8d7)](),TouchInput['clear']());};function Window_EnemyName(){const _0x1671c5=_0xe55837;this[_0x1671c5(0x7b6)](...arguments);}Window_EnemyName[_0xe55837(0x392)]=Object[_0xe55837(0x9b)](Window_StatusBase[_0xe55837(0x392)]),Window_EnemyName['prototype']['constructor']=Window_EnemyName,Window_EnemyName[_0xe55837(0x392)][_0xe55837(0x7b6)]=function(_0x58f780){const _0x3bff76=_0xe55837;this[_0x3bff76(0x90b)]=_0x58f780,this[_0x3bff76(0x497)]='';const _0x12f88e=new Rectangle(0x0,0x0,Graphics[_0x3bff76(0x386)],this[_0x3bff76(0x4ac)]()*0x4);Window_StatusBase['prototype'][_0x3bff76(0x7b6)][_0x3bff76(0x782)](this,_0x12f88e),this[_0x3bff76(0x6e3)](0x2),this[_0x3bff76(0xa43)]=0x0;},Window_EnemyName['prototype'][_0xe55837(0x33c)]=function(){const _0x1c5987=_0xe55837;this[_0x1c5987(0x949)]=0x0;},Window_EnemyName[_0xe55837(0x392)][_0xe55837(0x67b)]=function(){const _0x4ec3b9=_0xe55837;return $gameTroop['members']()[this[_0x4ec3b9(0x90b)]];},Window_EnemyName[_0xe55837(0x392)][_0xe55837(0x59f)]=function(){const _0x4e54a6=_0xe55837;Window_StatusBase[_0x4e54a6(0x392)][_0x4e54a6(0x59f)]['call'](this),this['enemy']()&&this['enemy']()[_0x4e54a6(0x625)]()!==this[_0x4e54a6(0x497)]&&(this[_0x4e54a6(0x497)]=this[_0x4e54a6(0x67b)]()['name'](),this[_0x4e54a6(0x597)]()),this[_0x4e54a6(0x592)](),this[_0x4e54a6(0x9d4)]();},Window_EnemyName['prototype'][_0xe55837(0x592)]=function(){const _0x423d14=_0xe55837;if(!this['enemy']()){if(this['contentsOpacity']>0x0)this[_0x423d14(0xa43)]-=0x10;}else{if(this[_0x423d14(0x67b)]()[_0x423d14(0xb6)]()){if(this[_0x423d14(0xa43)]>0x0)this[_0x423d14(0xa43)]-=0x10;}else{if(SceneManager[_0x423d14(0x1c8)][_0x423d14(0xdc)]&&SceneManager[_0x423d14(0x1c8)][_0x423d14(0xdc)][_0x423d14(0x88c)]&&SceneManager['_scene'][_0x423d14(0xdc)][_0x423d14(0xa5b)][_0x423d14(0x450)](this[_0x423d14(0x67b)]())){if(_0x423d14(0x72c)!==_0x423d14(0xa1d)){if(this['contentsOpacity']<0xff)this[_0x423d14(0xa43)]+=0x10;}else{function _0x47b603(){const _0x19e93d=_0x423d14;_0x2e97a2['BattleCore'][_0x19e93d(0x955)][_0x19e93d(0x782)](this);}}}else this[_0x423d14(0xa43)]>0x0&&(this['contentsOpacity']-=0x10);}}},Window_EnemyName[_0xe55837(0x392)][_0xe55837(0x9d4)]=function(){const _0x2833ae=_0xe55837;if(!this[_0x2833ae(0x67b)]())return;SceneManager['isBattleFlipped']()?this['x']=Graphics[_0x2833ae(0x386)]-this[_0x2833ae(0x67b)]()[_0x2833ae(0xe1)]()[_0x2833ae(0xa0)]:this['x']=this[_0x2833ae(0x67b)]()['battler']()['_baseX'];this['x']-=Math[_0x2833ae(0x498)](this['width']/0x2),this['y']=this['enemy']()['battler']()['_baseY']-Math['round'](this[_0x2833ae(0x4ac)]()*1.5);const _0xf4ccad=VisuMZ[_0x2833ae(0x278)][_0x2833ae(0x108)][_0x2833ae(0x214)];this['x']+=_0xf4ccad[_0x2833ae(0x5c9)]||0x0,this['y']+=_0xf4ccad[_0x2833ae(0x35b)]||0x0;},Window_EnemyName[_0xe55837(0x392)][_0xe55837(0x491)]=function(){const _0x241fd7=_0xe55837;Window_Base[_0x241fd7(0x392)]['resetFontSettings']['call'](this),this[_0x241fd7(0x9e1)][_0x241fd7(0x533)]=VisuMZ[_0x241fd7(0x278)][_0x241fd7(0x108)][_0x241fd7(0x214)][_0x241fd7(0x44f)];},Window_EnemyName[_0xe55837(0x392)]['refresh']=function(){const _0x5187be=_0xe55837;Window_StatusBase['prototype']['refresh'][_0x5187be(0x782)](this),this[_0x5187be(0x9e1)][_0x5187be(0x8d7)]();if(!this['enemy']())return;this['drawEnemyName']();},Window_EnemyName[_0xe55837(0x392)][_0xe55837(0x12e)]=function(){const _0x374b05=_0xe55837;this[_0x374b05(0x497)]=this[_0x374b05(0x67b)]()[_0x374b05(0x625)]();const _0x47c529=this[_0x374b05(0x578)](this['_text'])['width'],_0xa566db=Math[_0x374b05(0x498)]((this[_0x374b05(0x3e9)]-_0x47c529)/0x2);this[_0x374b05(0x85a)](this[_0x374b05(0x497)],_0xa566db,0x0,_0x47c529+0x8);},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x1a8)]=function(){const _0x3732c8=_0xe55837;return VisuMZ[_0x3732c8(0x278)][_0x3732c8(0x108)][_0x3732c8(0x30b)][_0x3732c8(0x65b)];},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x976)]=function(){const _0x183247=_0xe55837;return VisuMZ[_0x183247(0x278)][_0x183247(0x108)][_0x183247(0x30b)][_0x183247(0x94c)];},Window_BattleLog['prototype'][_0xe55837(0x861)]=function(){return VisuMZ['BattleCore']['Settings']['BattleLog']['BackColor'];},Window_BattleLog['prototype'][_0xe55837(0x710)]=function(){return![];},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x9e2)]=function(_0x211944,_0x50dc39){const _0x2303ff=_0xe55837;this[_0x2303ff(0x1a4)](_0x2303ff(0x6ea)),BattleManager[_0x2303ff(0x3d2)](_0x211944,_0x50dc39),this['callNextMethod']();},Window_BattleLog[_0xe55837(0x392)]['actionSplicePoint']=function(){const _0xd0cd0a=_0xe55837;this[_0xd0cd0a(0x996)]();},Window_BattleLog['prototype'][_0xe55837(0x30a)]=function(_0x318c12){const _0x17a476=_0xe55837,_0xcf3a97=Array[_0x17a476(0x392)]['slice'][_0x17a476(0x782)](arguments,0x1),_0x1e9aed={'name':_0x318c12,'params':_0xcf3a97},_0x4afeca=this[_0x17a476(0x401)]['map'](_0x239986=>_0x239986[_0x17a476(0x625)])[_0x17a476(0x660)]('actionSplicePoint');_0x4afeca>=0x0?this[_0x17a476(0x401)][_0x17a476(0x4c7)](_0x4afeca,0x0,_0x1e9aed):this[_0x17a476(0x401)]['push'](_0x1e9aed);},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x1a4)]=function(_0x1665fd){const _0x5ba6cc=_0xe55837,_0x1f062f=Array['prototype']['slice']['call'](arguments,0x1);this[_0x5ba6cc(0x401)]['unshift']({'name':_0x1665fd,'params':_0x1f062f});},Window_BattleLog['prototype']['logActionList']=function(){const _0x4c462c=_0xe55837;if(!$gameTemp['isPlaytest']())return;console['log'](this[_0x4c462c(0x401)][_0x4c462c(0x584)](_0x2b2d59=>_0x2b2d59['name'])[_0x4c462c(0x520)]('\x0a'));},VisuMZ[_0xe55837(0x278)][_0xe55837(0x265)]=Window_BattleLog['prototype'][_0xe55837(0x597)],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x597)]=function(){const _0x39c91f=_0xe55837;this[_0x39c91f(0x7ab)]=!![];},VisuMZ[_0xe55837(0x278)]['Window_BattleLog_update']=Window_BattleLog['prototype'][_0xe55837(0x59f)],Window_BattleLog['prototype'][_0xe55837(0x59f)]=function(){const _0x5d3b28=_0xe55837;VisuMZ['BattleCore'][_0x5d3b28(0x95)]['call'](this);if(this[_0x5d3b28(0x7ab)])this['processRefresh']();},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x6d9)]=function(){const _0x2d48d2=_0xe55837;this[_0x2d48d2(0x7ab)]=![],VisuMZ[_0x2d48d2(0x278)][_0x2d48d2(0x265)][_0x2d48d2(0x782)](this);},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x1b4)]=function(_0x2522d1){const _0x1d054d=_0xe55837;let _0x40b14b=VisuMZ['BattleCore'][_0x1d054d(0x108)]['BattleLog']['TextAlign'][_0x1d054d(0x8f1)]()[_0x1d054d(0x1ee)](),_0x15c5b=this['_lines'][_0x2522d1];if(_0x15c5b[_0x1d054d(0x1c3)](/<LEFT>/i))_0x40b14b=_0x1d054d(0x1f6);else{if(_0x15c5b[_0x1d054d(0x1c3)](/<CENTER>/i)){if(_0x1d054d(0x184)==='ySnex')_0x40b14b='center';else{function _0x2a6316(){const _0x460d03=_0x1d054d;this[_0x460d03(0x5c2)][_0x460d03(0x62b)](this[_0x460d03(0x341)]);}}}else{if(_0x15c5b['match'](/<RIGHT>/i)){if(_0x1d054d(0x766)===_0x1d054d(0x9bd)){function _0x26a544(){const _0x287b99=_0x1d054d;return _0x5d99bc[_0x287b99(0x1a1)]['Settings']['QoL']['DigitGroupingDamageSprites'];}}else _0x40b14b=_0x1d054d(0x9db);}}}_0x15c5b=_0x15c5b[_0x1d054d(0x1eb)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x15c5b=_0x15c5b[_0x1d054d(0x1eb)](/\\I\[0\]/gi,'');const _0x16220a=this[_0x1d054d(0xa13)](_0x2522d1);this['contents'][_0x1d054d(0x4e3)](_0x16220a['x'],_0x16220a['y'],_0x16220a[_0x1d054d(0x124)],_0x16220a[_0x1d054d(0x97c)]);const _0x2cccfe=this[_0x1d054d(0x578)](_0x15c5b)[_0x1d054d(0x124)];let _0x3ca169=_0x16220a['x'];if(_0x40b14b==='center'){if(_0x1d054d(0x8e0)!=='gUkIf')_0x3ca169+=(_0x16220a[_0x1d054d(0x124)]-_0x2cccfe)/0x2;else{function _0x1e8e6d(){return!![];}}}else{if(_0x40b14b===_0x1d054d(0x9db)){if('MnbHY'===_0x1d054d(0x612)){function _0x3407f6(){const _0x2b3c2a=_0x1d054d,_0x36cf71=_0x44aef8[_0x2b3c2a(0x22c)],_0x5afaf6=_0x2b3c2a(0x9d2);this[_0x2b3c2a(0x29f)](_0x36cf71,_0x5afaf6);}}else _0x3ca169+=_0x16220a[_0x1d054d(0x124)]-_0x2cccfe;}}this['drawTextEx'](_0x15c5b,_0x3ca169,_0x16220a['y'],_0x2cccfe+0x8);},Window_BattleLog['prototype'][_0xe55837(0x390)]=function(_0x29c6e2){const _0xbf6c17=_0xe55837;this['_lines'][_0xbf6c17(0x30a)](_0x29c6e2),this['refresh'](),this['callNextMethod']();},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x2d5)]=function(){const _0x6f9659=_0xe55837;let _0x17ecea=![];switch(this[_0x6f9659(0x6d5)]){case _0x6f9659(0x62e):_0x17ecea=this[_0x6f9659(0x54d)][_0x6f9659(0x5b9)]();break;case _0x6f9659(0x91e):_0x17ecea=this[_0x6f9659(0x54d)][_0x6f9659(0x5c0)]();break;case _0x6f9659(0x574):_0x17ecea=this[_0x6f9659(0x54d)][_0x6f9659(0x562)]();break;case _0x6f9659(0x6b5):_0x17ecea=this['_spriteset'][_0x6f9659(0x1d2)]();break;case _0x6f9659(0x770):_0x17ecea=this[_0x6f9659(0x54d)][_0x6f9659(0x404)]();break;case _0x6f9659(0x863):_0x17ecea=this['_spriteset'][_0x6f9659(0x125)]();break;}if(!_0x17ecea){if(_0x6f9659(0x94f)===_0x6f9659(0x24d)){function _0x5608be(){const _0x37c18c=_0x6f9659;this[_0x37c18c(0x8e7)]('EscapeSuccessJS'),_0x44a306['_spriteset'][_0x37c18c(0xce)](),_0x33bc6e['BattleCore']['BattleManager_onEscapeSuccess'][_0x37c18c(0x782)](this),this['processPostBattleCommonEvents'](_0x37c18c(0x116));}}else this[_0x6f9659(0x6d5)]='';}return _0x17ecea;},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x9a5)]=function(){const _0x276348=_0xe55837;this[_0x276348(0x78a)](_0x276348(0x574));},Window_BattleLog['prototype'][_0xe55837(0x9d)]=function(){const _0x7a5ab8=_0xe55837;this[_0x7a5ab8(0x78a)](_0x7a5ab8(0x6b5));},Window_BattleLog['prototype'][_0xe55837(0x846)]=function(){const _0x315d0c=_0xe55837;this['setWaitMode'](_0x315d0c(0x770));},Window_BattleLog[_0xe55837(0x392)]['waitForOpacity']=function(){const _0x497686=_0xe55837;this[_0x497686(0x78a)](_0x497686(0x863));},Window_BattleLog['prototype']['startTurn']=function(){const _0x43b96f=_0xe55837,_0x4abbca=VisuMZ[_0x43b96f(0x278)][_0x43b96f(0x108)]['BattleLog'];if(!_0x4abbca[_0x43b96f(0x765)])return;this[_0x43b96f(0x30a)]('addText',_0x4abbca[_0x43b96f(0x36f)][_0x43b96f(0x11c)]($gameTroop[_0x43b96f(0x2c6)]())),this[_0x43b96f(0x30a)](_0x43b96f(0x664),_0x4abbca[_0x43b96f(0x103)]),this['push'](_0x43b96f(0x8d7));},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x62f)]=function(_0x93810b,_0x44ecb5,_0x10f1ec){const _0x102e9a=_0xe55837;if(this[_0x102e9a(0x78b)](_0x44ecb5)){if(_0x102e9a(0xa34)===_0x102e9a(0xa34))BattleManager[_0x102e9a(0x152)]();else{function _0x57bfcf(){const _0x4e17f4=_0x102e9a;this[_0x4e17f4(0x2e3)]();}}}else this[_0x102e9a(0x794)](_0x93810b,_0x44ecb5,_0x10f1ec);},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x78b)]=function(_0x26d282){const _0x52b544=_0xe55837;if(!SceneManager[_0x52b544(0x1d0)]())return![];if(!_0x26d282)return![];if(!_0x26d282[_0x52b544(0xa24)]())return![];if(_0x26d282['item']()['note']['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x52b544(0x774)](_0x26d282[_0x52b544(0xa24)]()))return!![];return![];},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x794)]=function(_0x21bab2,_0x23f6f8,_0x4e9d9d){const _0x19db02=_0xe55837,_0x225dc3=_0x23f6f8['item']();this[_0x19db02(0x252)](_0x21bab2,_0x23f6f8,_0x4e9d9d),this[_0x19db02(0x2bb)](_0x21bab2,_0x23f6f8,_0x4e9d9d),this[_0x19db02(0x7db)](_0x21bab2,_0x23f6f8,_0x4e9d9d);},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x1a7)]=function(_0xacc510,_0x115118){const _0x5e152c=_0xe55837,_0x567e8f=VisuMZ[_0x5e152c(0x278)][_0x5e152c(0x108)][_0x5e152c(0x30b)];_0x567e8f[_0x5e152c(0x7e9)]&&this[_0x5e152c(0x30a)](_0x5e152c(0x390),_0x5e152c(0x4d4)[_0x5e152c(0x11c)](DataManager[_0x5e152c(0x162)](_0x115118)));if(DataManager['isSkill'](_0x115118)){if(_0x5e152c(0x705)===_0x5e152c(0x705)){if(_0x567e8f[_0x5e152c(0x185)])this[_0x5e152c(0x8b5)](_0x115118['message1'],_0xacc510,_0x115118);if(_0x567e8f[_0x5e152c(0x2e6)])this[_0x5e152c(0x8b5)](_0x115118[_0x5e152c(0x7d8)],_0xacc510,_0x115118);}else{function _0xb3c39b(){const _0x5773d7=_0x5e152c;this[_0x5773d7(0x8e7)](_0x5773d7(0x58d)),_0x8dc5df['BattleCore'][_0x5773d7(0x805)][_0x5773d7(0x782)](this),this[_0x5773d7(0xa60)](_0x5773d7(0x7bf));}}}else{if(_0x5e152c(0x608)===_0x5e152c(0x6cf)){function _0x39970e(){const _0x2279da=_0x5e152c;delete _0x39534b[_0x2279da(0x542)][_0x2279da(0x8ff)];}}else{if(_0x567e8f[_0x5e152c(0x81c)])this[_0x5e152c(0x8b5)](TextManager[_0x5e152c(0x5cc)],_0xacc510,_0x115118);}}},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x252)]=function(_0x979892,_0x51def1,_0x1a5769){const _0x138e02=_0xe55837,_0x206d64=_0x51def1[_0x138e02(0xa24)]();this[_0x138e02(0x1a7)](_0x979892,_0x206d64),this['push'](_0x138e02(0xc7),_0x979892,_0x1a5769,!![]),this[_0x138e02(0x30a)](_0x138e02(0x8a9),_0x979892,_0x51def1),this['push'](_0x138e02(0x344)),this[_0x138e02(0x30a)](_0x138e02(0x932),_0x979892,_0x51def1),this[_0x138e02(0x30a)]('waitForAnimation');},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x2bb)]=function(_0x3384f6,_0x4ef6c1,_0x44de5b){const _0x5b1726=_0xe55837;if(this[_0x5b1726(0xa75)](_0x4ef6c1)){if(_0x5b1726(0x1fd)!==_0x5b1726(0x8cc))this[_0x5b1726(0x5db)](_0x3384f6,_0x4ef6c1,_0x44de5b);else{function _0x1a4b99(){const _0x5749ed=_0x5b1726;_0xa1c8d9[_0x5749ed(0x30a)](new _0x1b0e96(_0x4df6b7));}}}else{if(this[_0x5b1726(0x652)](_0x4ef6c1))this['autoMeleeMultiTargetActionSet'](_0x3384f6,_0x4ef6c1,_0x44de5b);else{if(_0x4ef6c1[_0x5b1726(0x617)]())this[_0x5b1726(0x1c7)](_0x3384f6,_0x4ef6c1,_0x44de5b);else{if(_0x5b1726(0x32e)!==_0x5b1726(0x32e)){function _0x138ed7(){const _0x3fb52b=_0x5b1726;this[_0x3fb52b(0x28f)][_0x3fb52b(0x357)]=_0x2a460f[_0x3fb52b(0x392)]['svBattlerAnchorY'][_0x3fb52b(0x782)](this);}}else this[_0x5b1726(0x1dc)](_0x3384f6,_0x4ef6c1,_0x44de5b);}}}},Window_BattleLog['prototype']['isMeleeSingleTargetAction']=function(_0x480c0d){const _0x54038a=_0xe55837;if(!_0x480c0d[_0x54038a(0x64b)]())return![];if(!_0x480c0d[_0x54038a(0x436)]())return![];if(!_0x480c0d['isForOpponent']())return![];return VisuMZ[_0x54038a(0x278)][_0x54038a(0x108)][_0x54038a(0xa10)][_0x54038a(0x961)];},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x5db)]=function(_0x59556b,_0x594a73,_0x1bb3a0){const _0x1787d5=_0xe55837,_0x15dd5d=_0x59556b[_0x1787d5(0x495)]()[_0x1787d5(0x695)]<0x2,_0x16836d=0x14,_0x551085=0x30;_0x15dd5d&&(this[_0x1787d5(0x30a)]('performJump',[_0x59556b],_0x551085,_0x16836d),this[_0x1787d5(0x30a)](_0x1787d5(0x717),_0x59556b,_0x1bb3a0,_0x1787d5(0x8f8),_0x16836d,!![],_0x1787d5(0x837),!![]),this[_0x1787d5(0x30a)]('requestMotion',[_0x59556b],_0x1787d5(0x4dc)),this['push'](_0x1787d5(0x344)));let _0x5eb79e=_0x594a73[_0x1787d5(0x4ea)]()?this[_0x1787d5(0x95b)](_0x59556b):0x1;for(let _0x12faf9=0x0;_0x12faf9<_0x5eb79e;_0x12faf9++){_0x594a73[_0x1787d5(0x4ea)]()&&_0x59556b[_0x1787d5(0x107)]()&&this[_0x1787d5(0x30a)](_0x1787d5(0x95f),_0x59556b,_0x12faf9);if(_0x594a73[_0x1787d5(0xa24)]()[_0x1787d5(0x44d)]<0x0){if('BvQfn'!==_0x1787d5(0x5bd))this[_0x1787d5(0x1c7)](_0x59556b,_0x594a73,_0x1bb3a0);else{function _0x48c9e6(){const _0x1fc7d2=_0x1787d5;this[_0x1fc7d2(0x5d4)]=_0x562df4[_0x1fc7d2(0x529)]||[0x0,0x0,0x0,0x0],this[_0x1fc7d2(0x5d4)]=_0x29225d[_0x1fc7d2(0x9f8)](this[_0x1fc7d2(0x5d4)]),this['_flashDuration']=_0x22f9d1[_0x1fc7d2(0x5c3)]||0x0;const _0x4d58a8=this[_0x1fc7d2(0x533)](),_0x1d6af9=_0x42535c[_0x1fc7d2(0x639)](_0x4d58a8*0x1e),_0x2a9383=this['createChildSprite'](_0x1d6af9,_0x4d58a8);_0x2a9383[_0x1fc7d2(0x881)]['textColor']=_0x97e27a[_0x1fc7d2(0xde)](_0x22c561['textColor']),_0x2a9383[_0x1fc7d2(0x881)][_0x1fc7d2(0x444)](_0x499351,0x0,0x0,_0x1d6af9,_0x4d58a8,'center'),_0x2a9383['dy']=0x0;}}}else this[_0x1787d5(0x1dc)](_0x59556b,_0x594a73,_0x1bb3a0);}if(_0x594a73[_0x1787d5(0x4ea)]()&&_0x59556b[_0x1787d5(0x107)]()){if(_0x1787d5(0x1be)!==_0x1787d5(0x1be)){function _0x1e79cf(){const _0x3e84a7=_0x1787d5;_0x4302a7['BattleCore'][_0x3e84a7(0x803)][_0x3e84a7(0x782)](this,_0x2663cc),_0x44a41f[_0x3e84a7(0x7da)]();}}else this[_0x1787d5(0x30a)](_0x1787d5(0x3a4),_0x59556b);}this[_0x1787d5(0x30a)](_0x1787d5(0xc7),_0x59556b,_0x1bb3a0,![]);if(_0x15dd5d){if('CDDcw'!==_0x1787d5(0x192)){const _0x362cef=_0x59556b['battler']();this[_0x1787d5(0x30a)](_0x1787d5(0x7a3),[_0x59556b],_0x551085,_0x16836d),this[_0x1787d5(0x30a)](_0x1787d5(0x247),_0x59556b,_0x362cef['_homeX'],_0x362cef['_homeY'],_0x16836d,![],_0x1787d5(0x837)),this['push']('requestMotion',[_0x59556b],_0x1787d5(0x53c)),this[_0x1787d5(0x30a)](_0x1787d5(0x344)),this[_0x1787d5(0x30a)](_0x1787d5(0x835),[_0x59556b],_0x1787d5(0x4dc));}else{function _0x2ec3d9(){const _0x43a646=_0x1787d5;this[_0x43a646(0x30a)](_0x43a646(0x2dc),_0x2c602d,_0x10dc7f);if(!_0x5d3545[_0x43a646(0x278)]['Settings'][_0x43a646(0x30b)]['ShowSubstitute'])return;const _0x36a588=_0x4d7191[_0x43a646(0x625)](),_0x46af6d=_0xe6d91c[_0x43a646(0xaf)][_0x43a646(0x11c)](_0x36a588,_0x21f9cc['name']());this[_0x43a646(0x30a)](_0x43a646(0x390),_0x46af6d);}}}},Window_BattleLog['prototype'][_0xe55837(0x652)]=function(_0xa3ba3d){const _0x392503=_0xe55837;if(!_0xa3ba3d[_0x392503(0x64b)]())return![];if(!_0xa3ba3d[_0x392503(0x74d)]())return![];if(!_0xa3ba3d['isForOpponent']())return![];return VisuMZ[_0x392503(0x278)]['Settings']['ActionSequence'][_0x392503(0x88b)];},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x19f)]=function(_0x44c5ee,_0x31d2a7,_0x28a0e9){const _0x4b40d8=_0xe55837,_0x1f2445=_0x44c5ee[_0x4b40d8(0x495)]()[_0x4b40d8(0x695)]<0x2,_0x42c85e=0x14,_0x29a67e=0x30;_0x1f2445&&(this[_0x4b40d8(0x30a)](_0x4b40d8(0x7a3),[_0x44c5ee],_0x29a67e,_0x42c85e),this['push'](_0x4b40d8(0x717),_0x44c5ee,_0x28a0e9,_0x4b40d8(0xa6f),_0x42c85e,!![],_0x4b40d8(0x837),!![]),this[_0x4b40d8(0x30a)](_0x4b40d8(0x835),[_0x44c5ee],_0x4b40d8(0x4dc)),this[_0x4b40d8(0x30a)]('waitForMovement'));let _0x1ee58f=_0x31d2a7[_0x4b40d8(0x4ea)]()?this['getDualWieldTimes'](_0x44c5ee):0x1;for(let _0x209c4c=0x0;_0x209c4c<_0x1ee58f;_0x209c4c++){_0x31d2a7['isAttack']()&&_0x44c5ee[_0x4b40d8(0x107)]()&&this['push']('setActiveWeaponSet',_0x44c5ee,_0x209c4c),this[_0x4b40d8(0x1dc)](_0x44c5ee,_0x31d2a7,_0x28a0e9);}if(_0x31d2a7[_0x4b40d8(0x4ea)]()&&_0x44c5ee[_0x4b40d8(0x107)]()){if(_0x4b40d8(0xa18)===_0x4b40d8(0x9a9)){function _0x33b451(){const _0x2eb150=_0x4b40d8,_0x21b360=_0x11f353[_0x2eb150(0x392)][_0x2eb150(0x2b5)][_0x2eb150(0x782)](arguments,0x1);this['_methods'][_0x2eb150(0x1a4)]({'name':_0x1c057a,'params':_0x21b360});}}else this[_0x4b40d8(0x30a)](_0x4b40d8(0x3a4),_0x44c5ee);}this[_0x4b40d8(0x30a)](_0x4b40d8(0xc7),_0x44c5ee,_0x28a0e9,![]);if(_0x1f2445){const _0x2698a1=_0x44c5ee[_0x4b40d8(0xe1)]();this[_0x4b40d8(0x30a)]('performJump',[_0x44c5ee],_0x29a67e,_0x42c85e),this[_0x4b40d8(0x30a)](_0x4b40d8(0x247),_0x44c5ee,_0x2698a1['_homeX'],_0x2698a1[_0x4b40d8(0x677)],_0x42c85e,![],_0x4b40d8(0x837)),this['push'](_0x4b40d8(0x835),[_0x44c5ee],_0x4b40d8(0x53c)),this[_0x4b40d8(0x30a)](_0x4b40d8(0x344)),this['push'](_0x4b40d8(0x835),[_0x44c5ee],_0x4b40d8(0x4dc));}},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x1c7)]=function(_0x1db801,_0x3d1db6,_0x16235e){const _0x419179=_0xe55837,_0x1fe2c8=_0x3d1db6['item']();for(const _0x46e6f9 of _0x16235e){if('LwraB'!==_0x419179(0x438)){if(!_0x46e6f9)continue;this['push'](_0x419179(0x2af),_0x1db801,_0x3d1db6),this[_0x419179(0x30a)](_0x419179(0x664),Sprite_Battler[_0x419179(0x850)]),this[_0x419179(0x30a)](_0x419179(0x687),_0x1db801,[_0x46e6f9],_0x1fe2c8[_0x419179(0x44d)]),this[_0x419179(0x30a)]('waitCount',0x18),this[_0x419179(0x30a)](_0x419179(0x9e2),_0x1db801,_0x46e6f9);}else{function _0x248f05(){const _0x4b12a6=_0x419179;this[_0x4b12a6(0x174)][_0x4b12a6(0x881)][_0x4b12a6(0x9d1)]=this[_0x4b12a6(0x341)]['battlerSmoothImage']();}}}},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x1dc)]=function(_0xd18a22,_0x2e2f25,_0x25539a){const _0x4a6667=_0xe55837,_0x1b76b0=_0x2e2f25[_0x4a6667(0xa24)]();this[_0x4a6667(0x30a)]('performAction',_0xd18a22,_0x2e2f25),this[_0x4a6667(0x30a)](_0x4a6667(0x664),Sprite_Battler[_0x4a6667(0x850)]),this['push'](_0x4a6667(0x687),_0xd18a22,_0x25539a[_0x4a6667(0x6cb)](),_0x1b76b0[_0x4a6667(0x44d)]),this[_0x4a6667(0x30a)](_0x4a6667(0x9a5));for(const _0x1c1be8 of _0x25539a){if(!_0x1c1be8)continue;this[_0x4a6667(0x30a)](_0x4a6667(0x9e2),_0xd18a22,_0x1c1be8);}},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x7db)]=function(_0x198430,_0x530658,_0x17bd8f){const _0x593296=_0xe55837,_0x213cf1=_0x530658[_0x593296(0xa24)]();this[_0x593296(0x30a)](_0x593296(0xc7),_0x198430,_0x17bd8f,![]),this[_0x593296(0x30a)](_0x593296(0x3a3)),this[_0x593296(0x30a)](_0x593296(0x410)),this[_0x593296(0x30a)]('clear'),this[_0x593296(0x30a)](_0x593296(0x9ae),_0x198430),this[_0x593296(0x30a)](_0x593296(0x344));},Window_BattleLog['prototype'][_0xe55837(0x573)]=function(_0x47d276){},VisuMZ[_0xe55837(0x278)][_0xe55837(0x1ef)]=Window_BattleLog[_0xe55837(0x392)]['displayCurrentState'],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0xa3a)]=function(_0x1d0c9c){const _0x373a7d=_0xe55837;if(!VisuMZ['BattleCore'][_0x373a7d(0x108)]['BattleLog']['ShowCurrentState'])return;VisuMZ[_0x373a7d(0x278)][_0x373a7d(0x1ef)]['call'](this,_0x1d0c9c);},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x944)]=function(_0x233e34){const _0x283374=_0xe55837;this[_0x283374(0x30a)](_0x283374(0xcc),_0x233e34);if(VisuMZ[_0x283374(0x278)]['Settings'][_0x283374(0xa10)][_0x283374(0xa59)]){if(_0x283374(0x727)==='BpGRT'){function _0x427ac4(){const _0x1218ca=_0x283374;this[_0x1218ca(0xa46)]()[_0x1218ca(0x8c5)](_0x17cdc7);}}else this[_0x283374(0x30a)](_0x283374(0x687),_0x233e34,[BattleManager[_0x283374(0xec)]],-0x1);}if(!VisuMZ[_0x283374(0x278)][_0x283374(0x108)][_0x283374(0x30b)][_0x283374(0x72a)])return;this[_0x283374(0x30a)](_0x283374(0x390),TextManager[_0x283374(0x6ec)][_0x283374(0x11c)](_0x233e34['name']()));},Window_BattleLog['prototype'][_0xe55837(0x3ed)]=function(_0x49e46a){const _0x4edf51=_0xe55837;this[_0x4edf51(0x30a)](_0x4edf51(0x726),_0x49e46a);if(!VisuMZ[_0x4edf51(0x278)][_0x4edf51(0x108)]['BattleLog']['ShowReflect'])return;this[_0x4edf51(0x30a)](_0x4edf51(0x390),TextManager[_0x4edf51(0x853)][_0x4edf51(0x11c)](_0x49e46a[_0x4edf51(0x625)]()));},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x205)]=function(_0x37d65a,_0x42744f){const _0x5cb4c5=_0xe55837;if(VisuMZ[_0x5cb4c5(0x278)]['Settings'][_0x5cb4c5(0xa10)][_0x5cb4c5(0x244)]){const _0x2ea8e6=_0x42744f['item']();this['push']('showAnimation',_0x37d65a,[_0x37d65a],_0x2ea8e6[_0x5cb4c5(0x44d)]);}},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x1e3)]=function(_0x2e678c,_0x17df91){const _0xc6fdd3=_0xe55837;this[_0xc6fdd3(0x30a)](_0xc6fdd3(0x2dc),_0x2e678c,_0x17df91);if(!VisuMZ[_0xc6fdd3(0x278)][_0xc6fdd3(0x108)][_0xc6fdd3(0x30b)][_0xc6fdd3(0x5a8)])return;const _0x14df0f=_0x2e678c[_0xc6fdd3(0x625)](),_0x482d24=TextManager[_0xc6fdd3(0xaf)][_0xc6fdd3(0x11c)](_0x14df0f,_0x17df91[_0xc6fdd3(0x625)]());this[_0xc6fdd3(0x30a)]('addText',_0x482d24);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x795)]=Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x735)],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x735)]=function(_0x5cfed8){const _0x1d794a=_0xe55837;if(!VisuMZ[_0x1d794a(0x278)][_0x1d794a(0x108)][_0x1d794a(0x30b)]['ShowFailure'])return;VisuMZ['BattleCore'][_0x1d794a(0x795)]['call'](this,_0x5cfed8);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x94)]=Window_BattleLog['prototype'][_0xe55837(0x582)],Window_BattleLog['prototype'][_0xe55837(0x582)]=function(_0x50f9e2){const _0xb3516f=_0xe55837;if(!VisuMZ[_0xb3516f(0x278)][_0xb3516f(0x108)][_0xb3516f(0x30b)][_0xb3516f(0x305)])return;VisuMZ[_0xb3516f(0x278)]['Window_BattleLog_displayCritical'][_0xb3516f(0x782)](this,_0x50f9e2);},VisuMZ['BattleCore']['Window_BattleLog_displayMiss']=Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x759)],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x759)]=function(_0x5b379a){const _0x1cef10=_0xe55837;if(!VisuMZ[_0x1cef10(0x278)][_0x1cef10(0x108)]['BattleLog'][_0x1cef10(0xe4)])this[_0x1cef10(0x30a)](_0x1cef10(0x170),_0x5b379a);else{if(_0x1cef10(0x306)!=='uVPQh')VisuMZ[_0x1cef10(0x278)][_0x1cef10(0x9aa)]['call'](this,_0x5b379a);else{function _0x33524e(){const _0x38fb1e=_0x1cef10;if(!_0x1311f3[_0x38fb1e(0x22a)]())return;this[_0x38fb1e(0x844)]=_0x5187ce;const _0x3326c7=this['battler']();if(_0x3326c7)_0x3326c7[_0x38fb1e(0x5b1)]();}}}},VisuMZ[_0xe55837(0x278)]['Window_BattleLog_displayEvasion']=Window_BattleLog[_0xe55837(0x392)]['displayEvasion'],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x4e6)]=function(_0x355156){const _0x280172=_0xe55837;if(!VisuMZ['BattleCore'][_0x280172(0x108)]['BattleLog']['ShowMissEvasion']){if(_0x355156[_0x280172(0x83a)]()[_0x280172(0x7de)]){if(_0x280172(0xa2d)!=='ZFGnS'){function _0x2af2ce(){_0x1cce07['setWaitMode']('battleAnimation');}}else this[_0x280172(0x30a)](_0x280172(0x5ec),_0x355156);}else this['push'](_0x280172(0x730),_0x355156);}else VisuMZ['BattleCore']['Window_BattleLog_displayEvasion'][_0x280172(0x782)](this,_0x355156);},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x979)]=function(_0x27ea70){const _0x2bcc12=_0xe55837;if(_0x27ea70[_0x2bcc12(0x83a)]()[_0x2bcc12(0x746)]){_0x27ea70[_0x2bcc12(0x83a)]()[_0x2bcc12(0x42b)]>0x0&&!_0x27ea70[_0x2bcc12(0x83a)]()['drain']&&this[_0x2bcc12(0x30a)](_0x2bcc12(0x4a4),_0x27ea70);_0x27ea70[_0x2bcc12(0x83a)]()[_0x2bcc12(0x42b)]<0x0&&this[_0x2bcc12(0x30a)](_0x2bcc12(0x91d),_0x27ea70);if(VisuMZ[_0x2bcc12(0x278)][_0x2bcc12(0x108)][_0x2bcc12(0x30b)][_0x2bcc12(0x2b4)]){if(_0x2bcc12(0x82a)===_0x2bcc12(0x65e)){function _0x488e11(){const _0x1f0658=_0x2bcc12;for(const _0x47e3c4 of _0x50a381){const _0x58b38a=_0x3bb7b1[0x0][_0x1f0658(0x11c)](_0x47e3c4[0x0],_0x20f1fc[0x0]),_0xc1fd1d=_0x3e0655[0x1][_0x1f0658(0x11c)](_0x47e3c4[0x1],_0x38dafd[0x1])['trim'](),_0x450cd0=new _0x7c3017(_0x1f9e17['format'](_0xc1fd1d),'i');_0x12848a[_0x58b38a]=_0x450cd0;}}}else this[_0x2bcc12(0x30a)](_0x2bcc12(0x390),this[_0x2bcc12(0x15e)](_0x27ea70));}}},VisuMZ[_0xe55837(0x278)][_0xe55837(0x7b4)]=Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x112)],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x112)]=function(_0x14ed07){const _0xd73082=_0xe55837;if(!VisuMZ[_0xd73082(0x278)][_0xd73082(0x108)][_0xd73082(0x30b)][_0xd73082(0x3b2)])return;VisuMZ['BattleCore'][_0xd73082(0x7b4)][_0xd73082(0x782)](this,_0x14ed07);},VisuMZ[_0xe55837(0x278)][_0xe55837(0x318)]=Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x413)],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x413)]=function(_0xd28601){const _0x4f06f6=_0xe55837;if(!VisuMZ[_0x4f06f6(0x278)][_0x4f06f6(0x108)]['BattleLog'][_0x4f06f6(0x5a0)])return;VisuMZ[_0x4f06f6(0x278)][_0x4f06f6(0x318)][_0x4f06f6(0x782)](this,_0xd28601);},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x92f)]=function(_0x234b7d){const _0x41ef70=_0xe55837,_0x55154b=_0x234b7d[_0x41ef70(0x83a)](),_0x2215cf=_0x55154b[_0x41ef70(0x422)]();for(const _0xe6213f of _0x2215cf){const _0x58d0e8=_0x234b7d['isActor']()?_0xe6213f[_0x41ef70(0x5bf)]:_0xe6213f[_0x41ef70(0x7d8)];_0x58d0e8&&VisuMZ['BattleCore'][_0x41ef70(0x108)]['BattleLog']['ShowAddedState']&&(this[_0x41ef70(0x30a)](_0x41ef70(0x1df)),this[_0x41ef70(0x30a)](_0x41ef70(0x3d3)),this[_0x41ef70(0x30a)](_0x41ef70(0x390),_0x58d0e8['format'](_0x234b7d['name']())),this[_0x41ef70(0x30a)](_0x41ef70(0xea)));if(_0xe6213f['id']===_0x234b7d[_0x41ef70(0x5b3)]()){if(_0x41ef70(0x5d9)===_0x41ef70(0x5d9))this['push'](_0x41ef70(0x408),_0x234b7d);else{function _0x27d340(){const _0x1354df=_0x41ef70,_0x26bff4=this[_0x1354df(0x198)];_0x26bff4[_0x1354df(0x719)](_0x1354df(0x366),this['actorCommandEscape'][_0x1354df(0x51d)](this)),_0x26bff4['setHandler']('autoBattle',this[_0x1354df(0x6b0)][_0x1354df(0x51d)](this)),_0x26bff4[_0x1354df(0x719)](_0x1354df(0x5bc),this[_0x1354df(0x4e1)][_0x1354df(0x51d)](this)),_0x250920[_0x1354df(0x6a1)]()&&(this[_0x1354df(0x1f5)]()?delete _0x26bff4[_0x1354df(0x542)][_0x1354df(0x8ff)]:_0x26bff4[_0x1354df(0x719)]('cancel',this[_0x1354df(0x383)][_0x1354df(0x51d)](this)));}}}}},Window_BattleLog['prototype'][_0xe55837(0x926)]=function(_0x346553){const _0x2dbeb1=_0xe55837;if(!VisuMZ['BattleCore'][_0x2dbeb1(0x108)][_0x2dbeb1(0x30b)][_0x2dbeb1(0x8da)])return;const _0x43ad5c=_0x346553['result'](),_0x1bd7f9=_0x43ad5c[_0x2dbeb1(0x6ee)]();for(const _0xb9d5d of _0x1bd7f9){if(_0xb9d5d['message4']){if(_0x2dbeb1(0x445)==='YsEwu')this['push']('popBaseLine'),this[_0x2dbeb1(0x30a)](_0x2dbeb1(0x3d3)),this[_0x2dbeb1(0x30a)]('addText',_0xb9d5d['message4'][_0x2dbeb1(0x11c)](_0x346553[_0x2dbeb1(0x625)]())),this[_0x2dbeb1(0x30a)](_0x2dbeb1(0xea));else{function _0x20661c(){const _0x11839a=_0x2dbeb1;return _0x4c4756(_0x4c58d0['$1'])[_0x11839a(0x4d1)](/[\r\n]+/);}}}}},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x5e3)]=function(_0x3519da){const _0x9baef6=_0xe55837,_0x5274bc=VisuMZ['BattleCore'][_0x9baef6(0x108)]['BattleLog'],_0x120eff=_0x3519da[_0x9baef6(0x83a)]();if(_0x5274bc[_0x9baef6(0x26f)])this['displayBuffs'](_0x3519da,_0x120eff[_0x9baef6(0x9d0)],TextManager['buffAdd']);if(_0x5274bc['ShowAddedDebuff'])this[_0x9baef6(0x1ec)](_0x3519da,_0x120eff[_0x9baef6(0x821)],TextManager['debuffAdd']);if(_0x5274bc[_0x9baef6(0x903)])this['displayBuffs'](_0x3519da,_0x120eff['removedBuffs'],TextManager['buffRemove']);},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x1ec)]=function(_0xf53a69,_0x2af551,_0x318468){const _0x153076=_0xe55837;for(const _0x599e77 of _0x2af551){const _0x49923b=_0x318468[_0x153076(0x11c)](_0xf53a69['name'](),TextManager[_0x153076(0x724)](_0x599e77));this[_0x153076(0x30a)]('popBaseLine'),this['push'](_0x153076(0x3d3)),this[_0x153076(0x30a)](_0x153076(0x390),_0x49923b),this[_0x153076(0x30a)](_0x153076(0xea));}},VisuMZ['BattleCore'][_0xe55837(0x604)]=Window_BattleLog['prototype']['clear'],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x8d7)]=function(){const _0x1d307f=_0xe55837;VisuMZ[_0x1d307f(0x278)][_0x1d307f(0x604)][_0x1d307f(0x782)](this),this['callNextMethod']();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x523)]=Window_BattleLog['prototype']['pushBaseLine'],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x3d3)]=function(){const _0x8638e5=_0xe55837;VisuMZ[_0x8638e5(0x278)][_0x8638e5(0x523)][_0x8638e5(0x782)](this),this[_0x8638e5(0x996)]();},VisuMZ['BattleCore'][_0xe55837(0x323)]=Window_BattleLog['prototype'][_0xe55837(0x1df)],Window_BattleLog[_0xe55837(0x392)]['popBaseLine']=function(){const _0x204198=_0xe55837;VisuMZ[_0x204198(0x278)][_0x204198(0x323)]['call'](this),this[_0x204198(0x597)](),this[_0x204198(0x996)]();},VisuMZ['BattleCore']['Window_BattleLog_popupDamage']=Window_BattleLog[_0xe55837(0x392)]['popupDamage'],Window_BattleLog['prototype'][_0xe55837(0x8b3)]=function(_0x491472){const _0x3c9e8d=_0xe55837;VisuMZ[_0x3c9e8d(0x278)][_0x3c9e8d(0x26e)][_0x3c9e8d(0x782)](this,_0x491472),this[_0x3c9e8d(0x996)]();},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x3a3)]=function(){const _0x46f274=_0xe55837;let _0x205b56=0x0;if(this[_0x46f274(0x31e)][_0x46f274(0x4c5)]>0x0){if(_0x46f274(0x2e7)===_0x46f274(0x818)){function _0x5f35a7(){const _0x47f225=_0x46f274;_0x392858[_0x47f225(0x278)]['JS'][_0xf2f31][_0x47f225(0x782)](this,this,this,_0x1a3a30,0x0);}}else _0x205b56=this[_0x46f274(0x31e)][this[_0x46f274(0x31e)][_0x46f274(0x4c5)]-0x1];}this[_0x46f274(0x87b)][_0x46f274(0x4c5)]>_0x205b56?this[_0x46f274(0xea)]():this['callNextMethod']();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x913)]=Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x8a9)],Window_BattleLog[_0xe55837(0x392)]['performActionStart']=function(_0x58b489,_0x1e997c){const _0x4aa3b6=_0xe55837;VisuMZ['BattleCore'][_0x4aa3b6(0x913)][_0x4aa3b6(0x782)](this,_0x58b489,_0x1e997c),this[_0x4aa3b6(0x996)]();},VisuMZ[_0xe55837(0x278)]['Window_BattleLog_performAction']=Window_BattleLog['prototype']['performAction'],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x2af)]=function(_0x1741c4,_0x4f8df9){const _0xae0a22=_0xe55837;VisuMZ[_0xae0a22(0x278)][_0xae0a22(0x739)][_0xae0a22(0x782)](this,_0x1741c4,_0x4f8df9),this[_0xae0a22(0x996)]();},VisuMZ[_0xe55837(0x278)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x9ae)],Window_BattleLog[_0xe55837(0x392)]['performActionEnd']=function(_0x70f30f){const _0x484ec6=_0xe55837;VisuMZ['BattleCore'][_0x484ec6(0x6d0)][_0x484ec6(0x782)](this,_0x70f30f);for(const _0x3a222b of BattleManager[_0x484ec6(0x8d3)]()){if(_0x484ec6(0x29a)!==_0x484ec6(0x29a)){function _0x92df6e(){const _0x534108=_0x484ec6;this[_0x534108(0x610)]=!![];}}else{if(!_0x3a222b)continue;if(_0x3a222b[_0x484ec6(0xb6)]())continue;_0x3a222b['performActionEndMembers']();}}this[_0x484ec6(0x996)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x86f)]=Window_BattleLog['prototype'][_0xe55837(0x4a4)],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x4a4)]=function(_0x5b14a6){const _0x3335a5=_0xe55837;VisuMZ[_0x3335a5(0x278)]['Window_BattleLog_performDamage']['call'](this,_0x5b14a6),this[_0x3335a5(0x996)]();},VisuMZ['BattleCore'][_0xe55837(0x74a)]=Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x170)],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x170)]=function(_0x25e31d){const _0x2b21f3=_0xe55837;VisuMZ[_0x2b21f3(0x278)][_0x2b21f3(0x74a)][_0x2b21f3(0x782)](this,_0x25e31d),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performRecovery']=Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x91d)],Window_BattleLog[_0xe55837(0x392)]['performRecovery']=function(_0x546a23){const _0x39503d=_0xe55837;VisuMZ[_0x39503d(0x278)][_0x39503d(0x729)]['call'](this,_0x546a23),this[_0x39503d(0x996)]();},VisuMZ['BattleCore'][_0xe55837(0x363)]=Window_BattleLog['prototype'][_0xe55837(0x5ec)],Window_BattleLog['prototype'][_0xe55837(0x5ec)]=function(_0x5bcf95){const _0x5c982a=_0xe55837;VisuMZ[_0x5c982a(0x278)]['Window_BattleLog_performEvasion'][_0x5c982a(0x782)](this,_0x5bcf95),this[_0x5c982a(0x996)]();},VisuMZ['BattleCore']['Window_BattleLog_performMagicEvasion']=Window_BattleLog['prototype'][_0xe55837(0x730)],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x730)]=function(_0x5e5e87){const _0x2a289b=_0xe55837;VisuMZ[_0x2a289b(0x278)][_0x2a289b(0x7ed)][_0x2a289b(0x782)](this,_0x5e5e87),this['callNextMethod']();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x7c7)]=Window_BattleLog[_0xe55837(0x392)]['performCounter'],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0xcc)]=function(_0x2a8e6f){const _0x394a4d=_0xe55837;VisuMZ[_0x394a4d(0x278)][_0x394a4d(0x7c7)][_0x394a4d(0x782)](this,_0x2a8e6f),this[_0x394a4d(0x996)]();},VisuMZ[_0xe55837(0x278)]['Window_BattleLog_performReflection']=Window_BattleLog['prototype']['performReflection'],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x726)]=function(_0x20a9e0){const _0x117b77=_0xe55837;VisuMZ['BattleCore'][_0x117b77(0x8db)]['call'](this,_0x20a9e0),this[_0x117b77(0x996)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x669)]=Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x2dc)],Window_BattleLog[_0xe55837(0x392)]['performSubstitute']=function(_0x59f9f6,_0x154d40){const _0x3c84a=_0xe55837;VisuMZ[_0x3c84a(0x278)]['Window_BattleLog_performSubstitute']['call'](this,_0x59f9f6,_0x154d40),this[_0x3c84a(0x996)]();},VisuMZ[_0xe55837(0x278)][_0xe55837(0x8b8)]=Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x408)],Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x408)]=function(_0x1413f8){const _0x48f622=_0xe55837;VisuMZ['BattleCore'][_0x48f622(0x8b8)][_0x48f622(0x782)](this,_0x1413f8),this[_0x48f622(0x996)]();},Window_BattleLog['prototype'][_0xe55837(0x932)]=function(_0x47c334,_0x1dfc55){const _0x1b779c=_0xe55837;_0x47c334[_0x1b779c(0x932)](_0x1dfc55),this['callNextMethod']();},Window_BattleLog[_0xe55837(0x392)]['showEnemyAttackAnimation']=function(_0x3b499a,_0x1e97ab){const _0x5ddba3=_0xe55837,_0x35bad2=_0x3b499a['attackAnimationId1']();_0x35bad2<=0x0?SoundManager[_0x5ddba3(0x622)]():this['showNormalAnimation'](_0x1e97ab,_0x35bad2);},Window_BattleLog['prototype'][_0xe55837(0xc7)]=function(_0x13041f,_0x3cc3f4,_0x57cbc){const _0x477c1d=_0xe55837,_0x12428d=[_0x13041f][_0x477c1d(0xa77)](_0x3cc3f4);for(const _0x45a8ee of _0x12428d){if(!_0x45a8ee)continue;_0x45a8ee['setImmortal'](_0x57cbc);}this[_0x477c1d(0x996)]();},Window_BattleLog['prototype'][_0xe55837(0x664)]=function(_0x5db876){const _0x596a65=_0xe55837;this[_0x596a65(0x18b)]=_0x5db876;},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x835)]=function(_0x51f348,_0x56d9bd){const _0x20ad4e=_0xe55837;for(const _0x42dbaf of _0x51f348){if('sLdAG'===_0x20ad4e(0x396)){if(!_0x42dbaf)continue;_0x42dbaf['requestMotion'](_0x56d9bd);}else{function _0x34e264(){const _0x37a000=_0x20ad4e;if(_0x3f4981['battleCameraData']()[_0x37a000(0x1c4)]>0x0)return!![];if(_0xd691c5[_0x37a000(0x956)]()['cameraOffsetDuration']>0x0)return!![];this[_0x37a000(0x6d5)]='';}}}this[_0x20ad4e(0x996)]();},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x247)]=function(_0x14cb14,_0x5f4af6,_0x100c59,_0x47f742,_0x18d6a4,_0x4b6327){const _0x2a7ec2=_0xe55837;_0x14cb14['moveBattlerToPoint'](_0x5f4af6,_0x100c59,_0x47f742,_0x18d6a4,_0x4b6327,-0x1),this[_0x2a7ec2(0x996)]();},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x717)]=function(_0x2ed66b,_0x86bd62,_0x23c010,_0x123d84,_0x5a8beb,_0x47b0d6,_0x459523){const _0x7cbab5=_0xe55837,_0x4fd7e5=Math[_0x7cbab5(0x6a9)](..._0x86bd62['map'](_0xc5ca8d=>_0xc5ca8d['battler']()[_0x7cbab5(0xa0)]-_0xc5ca8d[_0x7cbab5(0xe1)]()[_0x7cbab5(0x56b)]()/0x2)),_0x2b799a=Math[_0x7cbab5(0x220)](..._0x86bd62['map'](_0x56c835=>_0x56c835[_0x7cbab5(0xe1)]()[_0x7cbab5(0xa0)]+_0x56c835[_0x7cbab5(0xe1)]()[_0x7cbab5(0x56b)]()/0x2)),_0x2d2294=Math[_0x7cbab5(0x6a9)](..._0x86bd62[_0x7cbab5(0x584)](_0x38bd9b=>_0x38bd9b[_0x7cbab5(0xe1)]()['_baseY']-_0x38bd9b[_0x7cbab5(0xe1)]()[_0x7cbab5(0x202)]())),_0x123ff1=Math[_0x7cbab5(0x220)](..._0x86bd62[_0x7cbab5(0x584)](_0x4754a8=>_0x4754a8[_0x7cbab5(0xe1)]()[_0x7cbab5(0x937)])),_0x88ae50=_0x86bd62[_0x7cbab5(0x49d)](_0xda3467=>_0xda3467[_0x7cbab5(0x107)]())[_0x7cbab5(0x4c5)],_0x325ddb=_0x86bd62[_0x7cbab5(0x49d)](_0x2f3bd4=>_0x2f3bd4['isEnemy']())[_0x7cbab5(0x4c5)];let _0x50950f=0x0,_0x155159=0x0;if(_0x23c010['match'](/front/i))_0x50950f=_0x88ae50>=_0x325ddb?_0x4fd7e5:_0x2b799a;else{if(_0x23c010[_0x7cbab5(0x1c3)](/middle/i)){if('EnYOu'!=='EnYOu'){function _0x3970f0(){const _0x35d348=_0x7cbab5;_0x53aa77[_0x35d348(0x2e0)]();let _0x591ff8=_0x453f15[_0x35d348(0x278)]['Settings']['ActionSequence'][_0x35d348(0x52a)];_0x591ff8>0x0&&_0x413ce1['requestAnimation']([this],_0x591ff8);}}else _0x50950f=(_0x4fd7e5+_0x2b799a)/0x2,_0x459523=-0x1;}else{if(_0x23c010['match'](/back/i)){if(_0x7cbab5(0x3f6)!=='XnPQp'){function _0x3733bc(){const _0x57a3ab=_0x7cbab5;_0x445ae9+=_0x3c3e50,_0xf0e874+=_0xfe1ee6[_0x57a3ab(0x107)]()?-_0x204531:_0x3951a5;}}else _0x50950f=_0x88ae50>=_0x325ddb?_0x2b799a:_0x4fd7e5;}}}if(_0x23c010['match'](/head/i))_0x155159=_0x2d2294;else{if(_0x23c010['match'](/center/i))_0x155159=(_0x2d2294+_0x123ff1)/0x2;else{if(_0x23c010[_0x7cbab5(0x1c3)](/base/i)){if(_0x7cbab5(0x627)!=='aBBMJ'){function _0x406444(){this['revertTpbCachedActor']();}}else _0x155159=_0x123ff1;}}}_0x2ed66b['moveBattlerToPoint'](_0x50950f,_0x155159,_0x123d84,_0x5a8beb,_0x47b0d6,_0x459523),this[_0x7cbab5(0x996)]();},Window_BattleLog[_0xe55837(0x392)][_0xe55837(0x7a3)]=function(_0x4157a2,_0x206963,_0x42a845){const _0x2afbee=_0xe55837;for(const _0x1d5c63 of _0x4157a2){if(!_0x1d5c63)continue;_0x1d5c63['jumpBattler'](_0x206963,_0x42a845);}this[_0x2afbee(0x996)]();};